,comments_id,line,message,range.start_line,range.end_line,content,changes_id,revisions_id,path,filepath_before,filepath_after,method_name_commented,is_included_after,is_revised_method_comment,masked_content_before,masked_content_after,masked_message
0,140fa212_552b55e6,2168.0,"We could also review this closing tab check. That way, the incognito tab is not closed when clicking back button, to be consistent with normal tab logic. WDYT?",,,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser;', '', 'import android.annotation.TargetApi;', 'import android.app.ActivityManager;', 'import android.content.ComponentName;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.content.pm.ApplicationInfo;', 'import android.content.pm.ShortcutManager;', 'import android.os.Build;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.text.TextUtils;', 'import android.text.format.DateUtils;', 'import android.util.Pair;', 'import android.view.KeyEvent;', 'import android.view.KeyboardShortcutGroup;', 'import android.view.Menu;', 'import android.view.View;', 'import android.view.View.OnClickListener;', 'import android.view.ViewConfiguration;', 'import android.view.ViewGroup;', 'import android.view.Window;', 'import android.view.WindowManager;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', 'import androidx.lifecycle.Lifecycle;', 'import androidx.lifecycle.LifecycleObserver;', 'import androidx.lifecycle.LifecycleRegistry;', '', 'import org.chromium.base.CallbackController;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.MemoryPressureListener;', 'import org.chromium.base.ThreadUtils;', 'import org.chromium.base.TraceEvent;', 'import org.chromium.base.annotations.UsedByReflection;', 'import org.chromium.base.jank_tracker.JankTrackerImpl;', 'import org.chromium.base.library_loader.LibraryLoader;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.supplier.ObservableSupplierImpl;', 'import org.chromium.base.supplier.OneShotCallback;', 'import org.chromium.base.supplier.OneshotSupplier;', 'import org.chromium.base.supplier.OneshotSupplierImpl;', 'import org.chromium.base.supplier.Supplier;', 'import org.chromium.base.supplier.UnownedUserDataSupplier;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.cc.input.BrowserControlsState;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.IntentHandler.IntentHandlerDelegate;', 'import org.chromium.chrome.browser.IntentHandler.TabOpenType;', 'import org.chromium.chrome.browser.accessibility_tab_switcher.OverviewListLayout;', 'import org.chromium.chrome.browser.app.ChromeActivity;', 'import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.metrics.TabbedActivityLaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.ChromeNextTabPolicySupplier;', 'import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;', 'import org.chromium.chrome.browser.app.tabmodel.TabWindowManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.TabbedModeTabModelOrchestrator;', 'import org.chromium.chrome.browser.bookmarks.BookmarkUtils;', 'import org.chromium.chrome.browser.browserservices.intents.WebappConstants;', 'import org.chromium.chrome.browser.compositor.CompositorViewHolder;', 'import org.chromium.chrome.browser.compositor.bottombar.ephemeraltab.EphemeralTabCoordinator;', 'import org.chromium.chrome.browser.compositor.layouts.Layout;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChrome;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromePhone;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromeTablet;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeBehavior;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeController;', 'import org.chromium.chrome.browser.cookies.CookiesFetcher;', 'import org.chromium.chrome.browser.crypto.CipherFactory;', 'import org.chromium.chrome.browser.dependency_injection.ChromeActivityComponent;', 'import org.chromium.chrome.browser.device.DeviceClassManager;', 'import org.chromium.chrome.browser.dom_distiller.ReaderModeManager;', 'import org.chromium.chrome.browser.download.DownloadNotificationService;', 'import org.chromium.chrome.browser.download.DownloadOpenSource;', 'import org.chromium.chrome.browser.download.DownloadUtils;', 'import org.chromium.chrome.browser.feature_engagement.TrackerFactory;', 'import org.chromium.chrome.browser.feed.FeedSurfaceTracker;', 'import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;', 'import org.chromium.chrome.browser.flags.ActivityType;', 'import org.chromium.chrome.browser.flags.CachedFeatureFlags;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.fonts.FontPreloader;', 'import org.chromium.chrome.browser.gesturenav.NavigationSheet;', 'import org.chromium.chrome.browser.homepage.HomepageManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationPresenceController;', 'import org.chromium.chrome.browser.incognito.IncognitoProfileDestroyer;', 'import org.chromium.chrome.browser.incognito.IncognitoStartup;', 'import org.chromium.chrome.browser.incognito.IncognitoTabLauncher;', 'import org.chromium.chrome.browser.incognito.IncognitoTabSnapshotController;', 'import org.chromium.chrome.browser.incognito.IncognitoUtils;', 'import org.chromium.chrome.browser.infobar.DataReductionPromoInfoBar;', 'import org.chromium.chrome.browser.infobar.SyncErrorInfoBar;', 'import org.chromium.chrome.browser.layouts.LayoutStateProvider;', 'import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.metrics.AndroidSessionDurationsServiceState;', 'import org.chromium.chrome.browser.metrics.LaunchMetrics;', 'import org.chromium.chrome.browser.metrics.MainIntentBehaviorMetrics;', 'import org.chromium.chrome.browser.modaldialog.ChromeTabModalPresenter;', 'import org.chromium.chrome.browser.modaldialog.TabModalLifetimeHandler;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceChromeTabbedActivity;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceManager;', 'import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;', 'import org.chromium.chrome.browser.native_page.NativePageAssassin;', 'import org.chromium.chrome.browser.navigation_predictor.NavigationPredictorBridge;', 'import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;', 'import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;', 'import org.chromium.chrome.browser.ntp.NewTabPageUma;', 'import org.chromium.chrome.browser.ntp.NewTabPageUtils;', 'import org.chromium.chrome.browser.omnibox.OmniboxFocusReason;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelper;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelperSupplier;', 'import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.profiles.OTRProfileID;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.profiles.ProfileManager;', 'import org.chromium.chrome.browser.reengagement.ReengagementNotificationController;', 'import org.chromium.chrome.browser.search_engines.SearchEngineChoiceNotification;', 'import org.chromium.chrome.browser.settings.SettingsLauncherImpl;', 'import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;', 'import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;', 'import org.chromium.chrome.browser.survey.ChromeSurveyController;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorPromptUtils;', 'import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.tab.TabAssociatedApp;', 'import org.chromium.chrome.browser.tab.TabCreationState;', 'import org.chromium.chrome.browser.tab.TabDelegateFactory;', 'import org.chromium.chrome.browser.tab.TabLaunchType;', 'import org.chromium.chrome.browser.tab.TabSelectionType;', 'import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedAppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedRootUiCoordinator;', 'import org.chromium.chrome.browser.tabmodel.ChromeTabCreator;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHost;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostRegistry;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostUtils;', 'import org.chromium.chrome.browser.tabmodel.NextTabPolicy.NextTabPolicySupplier;', 'import org.chromium.chrome.browser.tabmodel.TabModel;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelector;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorBase;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabModelObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelUtils;', 'import org.chromium.chrome.browser.tabmodel.TabWindowManager;', 'import org.chromium.chrome.browser.tasks.ConditionalTabStripUtils;', 'import org.chromium.chrome.browser.tasks.EngagementTimeUtil;', 'import org.chromium.chrome.browser.tasks.JourneyManager;', 'import org.chromium.chrome.browser.tasks.ReturnToChromeExperimentsUtil;', 'import org.chromium.chrome.browser.tasks.TasksUma;', 'import org.chromium.chrome.browser.tasks.tab_management.TabGroupUi;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementDelegate;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementModuleProvider;', 'import org.chromium.chrome.browser.tasks.tab_management.TabUiFeatureUtilities;', 'import org.chromium.chrome.browser.toolbar.ToolbarButtonInProductHelpController;', 'import org.chromium.chrome.browser.toolbar.ToolbarIntentMetadata;', 'import org.chromium.chrome.browser.toolbar.ToolbarManager;', 'import org.chromium.chrome.browser.toolbar.top.ToolbarControlContainer;', 'import org.chromium.chrome.browser.translate.TranslateIntentHandler;', 'import org.chromium.chrome.browser.ui.AppLaunchDrawBlocker;', 'import org.chromium.chrome.browser.ui.RootUiCoordinator;', 'import org.chromium.chrome.browser.ui.TabObscuringHandler;', 'import org.chromium.chrome.browser.ui.appmenu.AppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.undo_tab_close_snackbar.UndoBarController;', 'import org.chromium.chrome.browser.usage_stats.UsageStatsService;', 'import org.chromium.chrome.browser.util.ChromeAccessibilityUtil;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.chrome.features.start_surface.StartSurface;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.chrome.features.start_surface.StartSurfaceState;', 'import org.chromium.chrome.features.start_surface.StartSurfaceUserData;', 'import org.chromium.components.browser_ui.settings.SettingsLauncher;', 'import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;', 'import org.chromium.components.browser_ui.util.ComposedBrowserControlsVisibilityDelegate;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.embedder_support.util.UrlUtilities;', 'import org.chromium.components.feature_engagement.EventConstants;', 'import org.chromium.components.messages.MessageDispatcherProvider;', 'import org.chromium.components.profile_metrics.BrowserProfileType;', 'import org.chromium.components.webapps.ShortcutSource;', 'import org.chromium.content_public.browser.LoadUrlParams;', 'import org.chromium.content_public.browser.NavigationHandle;', 'import org.chromium.content_public.browser.RenderFrameHost;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.content_public.browser.WebContents;', 'import org.chromium.content_public.browser.WebContentsAccessibility;', 'import org.chromium.content_public.common.ContentSwitches;', 'import org.chromium.ui.base.PageTransition;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.widget.Toast;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.HashSet;', 'import java.util.List;', 'import java.util.Locale;', '', '/**', ' * This is the main activity for ChromeMobile when not running in document mode.  All the tabs', ' * are accessible via a chrome specific tab switching UI.', ' */', 'public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>', '        implements ChromeAccessibilityUtil.Observer {', '    private static final String TAG = ""ChromeTabbedActivity"";', '', '    private static final String HELP_URL_PREFIX = ""https://support.google.com/chrome/"";', '', '    protected static final String WINDOW_INDEX = ""window_index"";', '', '    private static final String IS_INCOGNITO_SELECTED = ""is_incognito_selected"";', '', '    private static final int INVALID_WINDOW_ID = TabWindowManager.INVALID_WINDOW_INDEX;', '', '    // How long to delay closing the current tab when our app is minimized.  Have to delay this', ""    // so that we don't show the contents of the next tab while minimizing."", '    private static final long CLOSE_TAB_ON_MINIMIZE_DELAY_MS = 500;', '', '    // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs', '    // restore. This is needed because we do not know when reading PartnerBrowserCustomizations', '    // provider will be finished.', '    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;', '', '    /**', '     * Sending an intent with this action to Chrome will cause it to close all tabs', '     * (iff the --enable-test-intents command line flag is set). If a URL is supplied in the', '     * intent data, this will be loaded and unaffected by the close all action.', '     */', '    private static final String ACTION_CLOSE_TABS =', '            ""com.google.android.apps.chrome.ACTION_CLOSE_TABS"";', '', '    @VisibleForTesting', '    public static final String STARTUP_UMA_HISTOGRAM_SUFFIX = "".Tabbed"";', '', '    // Name of the ChromeTabbedActivity alias that handles MAIN intents.', '    public static final String MAIN_LAUNCHER_ACTIVITY_NAME = ""com.google.android.apps.chrome.Main"";', '', '    public static final SettingsLauncher SETTINGS_LAUNCHER = new SettingsLauncherImpl();', '', '    public static final HashSet<String> TABBED_MODE_COMPONENT_NAMES = new HashSet<String>() {', '        {', '            add(ChromeTabbedActivity.class.getName());', '            add(MultiInstanceChromeTabbedActivity.class.getName());', '            add(ChromeTabbedActivity2.class.getName());', '            add(MAIN_LAUNCHER_ACTIVITY_NAME);', '        }', '    };', '', '    /**', '     * Identifies a histogram to use in {@link #maybeDispatchExplicitMainViewIntent(Intent, int)}.', '     */', '    @IntDef({DispatchedBy.ON_CREATE, DispatchedBy.ON_NEW_INTENT})', '    @Retention(RetentionPolicy.SOURCE)', '    private @interface DispatchedBy {', '        int ON_CREATE = 1;', '        int ON_NEW_INTENT = 2;', '    }', '', '    // Count histogram used to track number of tabs when we show the Overview on Return to Chrome.', '    private static final String TAB_COUNT_ON_RETURN = ""Tabs.TabCountOnStartScreenShown"";', '', '    private final MainIntentBehaviorMetrics mMainIntentMetrics;', '    private @Nullable MultiInstanceManager mMultiInstanceManager;', '', '    private UndoBarController mUndoBarPopupController;', '', '    private LayoutManagerChrome mLayoutManager;', '', '    private ViewGroup mContentContainer;', '', '    private ToolbarControlContainer mControlContainer;', '', '    private TabbedModeTabModelOrchestrator mTabModelOrchestrator;', '    private TabModelSelectorBase mTabModelSelector;', '    private TabModelSelectorTabObserver mTabModelSelectorTabObserver;', '    private TabModelSelectorTabModelObserver mTabModelObserver;', '', '    private BrowserControlsVisibilityDelegate mVrBrowserControlsVisibilityDelegate;', '    private TabModalLifetimeHandler mTabModalHandler;', '', '    private boolean mUIWithNativeInitialized;', '', '    private Boolean mIsAccessibilityTabSwitcherEnabled;', '', '    private LocaleManager mLocaleManager;', '', '    private AppIndexingUtil mAppIndexingUtil;', '', '    private Runnable mShowHistoryRunnable;', '', '    private CompositorViewHolder mCompositorViewHolder;', '    private OverviewListLayout mOverviewListLayout;', '    /**', '     * Keeps track of whether or not a specific tab was created based on the startup intent.', '     */', '    private boolean mCreatedTabOnStartup;', '', '    // Whether or not the initial tab is being created.', '    private boolean mPendingInitialTabCreation;', '', '    // Whether {@link setInitialOverviewState()} has been called within the current onStart/onStop', '    // session.', '    private boolean mHasDeterminedOverviewStateForCurrentSession;', '    /**', '     *  Keeps track of the pref for the last time since this activity was stopped.', '     */', '    private ChromeInactivityTracker mInactivityTracker;', '', ""    // This is the cached value of mIntentHandler#shouldIgnoreIntent and shouldn't be read directly."", '    // Use #shouldIgnoreIntent instead.', '    private Boolean mShouldIgnoreIntent;', '    /*', '     *  Listens to FrameMetrics and records jank metrics.', '     */', '    private JankTrackerImpl mJankTracker;', '', '    // Supplier for a dependency to inform about the type of intent used to launch Chrome.', '    private OneshotSupplierImpl<ToolbarIntentMetadata> mIntentMetadataOneshotSupplier =', '            new OneshotSupplierImpl<>();', '', '    // Time at which an intent was received and handled.', '    private long mIntentHandlingTimeMs;', '', '    /**', '     * Whether the StartSurface is shown when Chrome is launched.', '     */', '    private boolean mOverviewShownOnStart;', '', '    private NextTabPolicySupplier mNextTabPolicySupplier;', '', '    private final UnownedUserDataSupplier<StartupPaintPreviewHelper>', '            mStartupPaintPreviewHelperSupplier = new StartupPaintPreviewHelperSupplier();', '', '    private final OneshotSupplierImpl<LayoutStateProvider> mLayoutStateProviderOneshotSupplier =', '            new OneshotSupplierImpl<>();', '    // TODO(crbug.com/1108496): Removed after all usages has been migrated to LayoutStateProvider.', '    private final OneshotSupplierImpl<OverviewModeBehavior> mOverviewModeBehaviorSupplier =', '            new OneshotSupplierImpl<>();', '    private OverviewModeController mOverviewModeController;', '', '    private ObservableSupplierImpl<EphemeralTabCoordinator> mEphemeralTabCoordinatorSupplier =', '            new ObservableSupplierImpl<>();', '    private final OneshotSupplierImpl<StartSurface> mStartSurfaceSupplier =', '            new OneshotSupplierImpl<>();', '    private ObservableSupplierImpl<Tab> mStartSurfaceParentTabSupplier =', '            new ObservableSupplierImpl<>();', '', '    private CallbackController mCallbackController = new CallbackController();', '    private TabbedModeTabDelegateFactory mTabDelegateFactory;', '', '    private final AppLaunchDrawBlocker mAppLaunchDrawBlocker;', '', '    // ID assigned to each ChromeTabbedActivity instance in Android S+ where multi-instance feature', '    // is supported. This can be explicitly set in the incoming Intent or internally assigned.', '    private int mWindowId;', '', '    private final IncognitoTabHost mIncognitoTabHost = new IncognitoTabHost() {', '        @Override', '        public boolean hasIncognitoTabs() {', '            return getTabModelSelector().getModel(true).getCount() > 0;', '        }', '', '        @Override', '        public void closeAllIncognitoTabs() {', '            if (isActivityFinishingOrDestroyed()) return;', '', '            // If the tabbed activity has not yet initialized, then finish the activity to avoid', '            // timing issues with clearing the incognito tab state in the background.', '            if (!areTabModelsInitialized() || !didFinishNativeInitialization()) {', '                finish();', '                return;', '            }', '', '            getTabModelSelector().getModel(true).closeAllTabs(false, false);', '        }', '', '        @Override', '        public boolean isActiveModel() {', '            return getTabModelSelector().getModel(true).isActiveModel();', '        }', '    };', '', '    /**', '     * This class is used to warm up the chrome split ClassLoader. See SplitChromeApplication for', '     * more info', '     */', '    @UsedByReflection(""SplitChromeApplication.java"")', '    public static class Preload extends ChromeTabbedActivity {', '        private LifecycleRegistry mLifecycleRegistry;', '', '        @UsedByReflection(""SplitChromeApplication.java"")', '        public Preload() {}', '', '        @Override', '        public Lifecycle getLifecycle() {', '            if (mLifecycleRegistry == null) {', '                // LifecycleRegistry normally enforces it is called on the main thread, but this', '                // class will be preloaded in a background thread. The only method that gets called', '                // in the activity constructor is addObserver(), so just override that.', '                mLifecycleRegistry = new LifecycleRegistry(null) {', '                    @Override', '                    public void addObserver(LifecycleObserver observer) {}', '                };', '            }', '            return mLifecycleRegistry;', '        }', '    }', '', '    /**', '     * Specify the proper non-.Main-aliased Chrome Activity for the given component.', '     *', '     * @param intent The intent to set the component for.', '     * @param component The client generated component to be validated.', '     */', '    public static void setNonAliasedComponent(Intent intent, ComponentName component) {', '        assert component != null;', '        Context appContext = ContextUtils.getApplicationContext();', '        if (!TextUtils.equals(component.getPackageName(), appContext.getPackageName())) {', '            return;', '        }', '        if (component.getClassName() != null', '                && TextUtils.equals(component.getClassName(),', '                        ChromeTabbedActivity.MAIN_LAUNCHER_ACTIVITY_NAME)) {', '            // Keep in sync with the activities that the .Main alias points to in', '            // AndroidManifest.xml.', '            intent.setClass(appContext, ChromeTabbedActivity.class);', '        } else {', '            intent.setComponent(component);', '        }', '    }', '', '    /**', '     * Constructs a ChromeTabbedActivity.', '     */', '    public ChromeTabbedActivity() {', '        mMainIntentMetrics = new MainIntentBehaviorMetrics();', '', '        // AppLaunchDrawBlocker may block drawing the Activity content until the initial tab is', '        // available.', '        // clang-format off', '        mAppLaunchDrawBlocker = new AppLaunchDrawBlocker(getLifecycleDispatcher(),', '                () -> findViewById(android.R.id.content),', '                this::getIntent, this::shouldIgnoreIntent, this::isTablet,', '                this::shouldShowOverviewPageOnStart);', '        // clang-format on', '    }', '', '    @Override', '    protected void onPreCreate() {', '        super.onPreCreate();', '        mMultiInstanceManager = MultiInstanceManager.create(this, getTabModelOrchestratorSupplier(),', '                getMultiWindowModeStateDispatcher(), getLifecycleDispatcher(),', '                getModalDialogManagerSupplier(), this);', '    }', '', '    @Override', '    protected @LaunchIntentDispatcher.Action int maybeDispatchLaunchIntent(', '            Intent intent, Bundle savedInstanceState) {', '        // Detect if incoming intent is a result of Chrome recreating itself. For now, restrict this', ""        // path to reparenting to ensure the launching logic isn't disrupted."", ""        // TODO(crbug.com/1065491): Unlock this codepath for all incoming intents once it's"", '        // confirmed working and stable.', '        if (savedInstanceState != null', '                && AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()) {', '            return LaunchIntentDispatcher.Action.CONTINUE;', '        }', '', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_MAIN.equals(intent.getAction())) {', '            // Call dispatchToTabbedActivity() for MAIN intents to activate proper multi-window', '            // TabbedActivity (i.e. if CTA2 is currently running and Chrome is started, CTA2', ""            // should be brought to front). Don't call dispatchToTabbedActivity() for non-MAIN"", '            // intents to avoid breaking cases where CTA is started explicitly (e.g. to handle', ""            // 'Move to other window' command from CTA2)."", '            return LaunchIntentDispatcher.dispatchToTabbedActivity(this, intent);', '        }', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(intent, DispatchedBy.ON_CREATE);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            return action;', '        }', '        return super.maybeDispatchLaunchIntent(intent, savedInstanceState);', '    }', '', '    // We know of at least one app that explicitly specifies .Main activity in custom tab', ""    // intents. The app shouldn't be doing that, but until it's updated, we need to support"", '    // such use case.', '    //', '    // This method attempts to treat VIEW intents explicitly sent to .Main as custom tab', '    // intents, and dispatch them accordingly. If the intent was not dispatched, the method', '    // returns Action.CONTINUE.', '    //', '    // The method also updates the supplied boolean histogram with the dispatching result,', '    // but only if the intent is a VIEW intent sent explicitly to .Main activity.', '    private @LaunchIntentDispatcher.Action int maybeDispatchExplicitMainViewIntent(', '            Intent intent, @DispatchedBy int dispatchedBy) {', ""        // The first check ensures that this is .Main activity alias (we can't check exactly, but"", '        // this gets us sufficiently close).', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getComponent() != null', '                && MAIN_LAUNCHER_ACTIVITY_NAME.equals(intent.getComponent().getClassName())) {', '            @LaunchIntentDispatcher.Action', '            int action = LaunchIntentDispatcher.dispatchToCustomTabActivity(this, intent);', '            switch (dispatchedBy) {', '                case DispatchedBy.ON_CREATE:', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnCreate"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                case DispatchedBy.ON_NEW_INTENT:', '', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnNewIntent"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                default:', '                    assert false : ""Unknown dispatchedBy value "" + dispatchedBy;', '            }', '            if (action == LaunchIntentDispatcher.Action.CONTINUE) {', '                // Intent was not dispatched, record its source.', '                @IntentHandler.ExternalAppId', '                int externalId = IntentHandler.determineExternalIntentSource(intent);', '                RecordHistogram.recordEnumeratedHistogram(', '                        ""Android.MainActivity.UndispatchedExplicitMainViewIntentSource"", externalId,', '                        IntentHandler.ExternalAppId.NUM_ENTRIES);', '', ""                // Crash if intent came from us, but only in debug builds and only if we weren't"", ""                // explicitly told not to. Hopefully we'll get enough reports to find where"", '                // these intents come from.', '                if (externalId == IntentHandler.ExternalAppId.CHROME', '                        && 0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)', '                        && !CommandLine.getInstance().hasSwitch(', '                                ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS)) {', '                    String intentInfo = intent.toString();', '                    Bundle extras = intent.getExtras();', '                    if (extras != null) {', '                        intentInfo +=', '                                "", extras.keySet = ["" + TextUtils.join("", "", extras.keySet()) + ""]"";', '                    }', '                    String message = String.format((Locale) null,', '                            ""VIEW intent sent to .Main activity alias was not dispatched. PLEASE ""', '                                    + ""report the following info to crbug.com/789732: \\""%s\\"". Use ""', '                                    + ""--%s flag to disable this check."",', '                            intentInfo, ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS);', '                    throw new IllegalStateException(message);', '                }', '            }', '            return action;', '        }', '        return LaunchIntentDispatcher.Action.CONTINUE;', '    }', '', '    @Override', '    public void initializeCompositor() {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeCompositor"");', '            super.initializeCompositor();', '', '            // LocaleManager can only function after the native library is loaded.', '            mLocaleManager = LocaleManager.getInstance();', '            mLocaleManager.setSettingsLauncher(SETTINGS_LAUNCHER);', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '', '            mTabModelOrchestrator.onNativeLibraryReady(getTabContentManager());', '', '            mTabModelObserver = new TabModelSelectorTabModelObserver(mTabModelSelector) {', '                @Override', '                public void didCloseTab(int tabId, boolean incognito) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                @Override', '                public void tabPendingClosure(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(true);', '                }', '', '                @Override', '                public void tabRemoved(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                private void closeIfNoTabsAndHomepageEnabled(boolean isPendingClosure) {', '                    if (getTabModelSelector().getTotalTabCount() == 0) {', '                        // If the last tab is closed, and homepage is enabled, then exit Chrome.', '                        if (HomepageManager.shouldCloseAppWithZeroTabs()) {', '                            finish();', '                        } else if (isPendingClosure) {', '                            NewTabPageUma.recordNTPImpression(', '                                    NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                        }', '                    }', '', '                    // TODO(960196) : remove this when the associated bug fix. This is a band-aid', '                    //  fix for TabGrid and closing tabs with TabGroupUi.', '                    //  If one of the following is true, then exit Chrome when TabGroupsAndroid is', '                    //  enabled, and tab switcher is not shown:', '                    //   1. If the very last tab is closed.', '                    //   2. If normal tab model is selected and no normal tabs.', '                    if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(ChromeTabbedActivity.this)', '                            && !mOverviewModeController.overviewVisible()) {', '                        if (getTabModelSelector().getTotalTabCount() == 0', '                                || (!getTabModelSelector().isIncognitoSelected()', '                                        && getTabModelSelector().getModel(false).getCount() == 0)) {', '                            finish();', '                        }', '                    }', '                }', '', '                @Override', '                public void didAddTab(', '                        Tab tab, @TabLaunchType int type, @TabCreationState int creationState) {', '                    if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                            && !DeviceClassManager.enableAnimations()) {', '                        Toast.makeText(ChromeTabbedActivity.this, R.string.open_in_new_tab_toast,', '                                     Toast.LENGTH_SHORT)', '                                .show();', '                    }', '                }', '', '                @Override', '                public void multipleTabsPendingClosure(List<Tab> tabs, boolean isAllTabs) {', '                    if (!isAllTabs) return;', '                    NewTabPageUma.recordNTPImpression(NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                }', '            };', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeCompositor"");', '        }', '    }', '', '    private void refreshSignIn() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.refreshSignIn"")) {', '            FirstRunSignInProcessor.start(this);', '        }', '    }', '', '    private void setupCompositorContentPreNativeForPhone() {', '        if (isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForPhone"")) {', '            CompositorViewHolder compositorViewHolder = getCompositorViewHolderSupplier().get();', '', '            // TODO(1169205): Remove all GTS enabled checks after M5 is default.', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {', '                TabManagementDelegate tabManagementDelegate =', '                        TabManagementModuleProvider.getDelegate();', '                if (tabManagementDelegate != null) {', '                    StartSurface startSurface = tabManagementDelegate.createStartSurface(this,', '                            mRootUiCoordinator.getScrimCoordinator(),', '                            mRootUiCoordinator.getBottomSheetController(), mStartSurfaceSupplier,', '                            mStartSurfaceParentTabSupplier, hadWarmStart(), getWindowAndroid(),', '                            compositorViewHolder, compositorViewHolder::getDynamicResourceLoader,', '                            getTabModelSelector(), getBrowserControlsManager(),', '                            getSnackbarManager(), getShareDelegateSupplier(),', '                            getToolbarManager()::getOmniboxStub, getTabContentManager(),', '                            getModalDialogManager(),', '                            /* chromeActivityNativeDelegate= */ this, getLifecycleDispatcher(),', '                            getTabCreatorManagerSupplier().get(),', '                            getMenuOrKeyboardActionController(),', '                            getMultiWindowModeStateDispatcher(), mJankTracker,', '                            getToolbarManager()::getToolbar);', '                }', '            }', '', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,', '                    mStartSurfaceSupplier.get(), getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPreNativeForTablet() {', '        if (!isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForTablet"")) {', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromeTablet(getCompositorViewHolderSupplier().get(),', '                    mContentContainer, getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPostNative() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPostNative"")) {', '            if (!isLayoutManagerCreated()) {', '                if (isTablet()) {', '                    setupCompositorContentPreNativeForTablet();', '                } else {', '                    setupCompositorContentPreNativeForPhone();', '                }', '            }', '', '            mLayoutManager.setEnableAnimations(DeviceClassManager.enableAnimations());', '', '            // TODO(yusufo): get rid of findViewById(R.id.url_bar).', '            initializeCompositorContent(mLayoutManager, findViewById(R.id.url_bar),', '                    mContentContainer, mControlContainer);', '        }', '    }', '', '    private boolean isLayoutManagerCreated() {', '        return mLayoutManager != null;', '    }', '', '    private void initializeToolbarManager() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initializeToolbarManager"")) {', '            mUndoBarPopupController.initialize();', '', '            OnClickListener tabSwitcherClickHandler = v -> {', '                if (ChromeFeatureList.isEnabled(ChromeFeatureList.TOOLBAR_IPH_ANDROID)) {', '                    Profile profile = mTabModelProfileSupplier.get();', '                    if (profile != null) {', '                        TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                EventConstants.TAB_SWITCHER_BUTTON_CLICKED);', '                    }', '                }', '', '                if (getFullscreenManager().getPersistentFullscreenMode()) {', '                    return;', '                }', '', '                if (isInOverviewMode()', '                        && !ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                    hideOverview();', '                } else {', '                    showOverview(StartSurfaceState.SHOWING_TABSWITCHER);', '                }', '            };', '            OnClickListener newTabClickHandler = v -> {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This assumes that the keyboard can not be seen at the same time as the', '                // newtab button on the toolbar.', '                getCurrentTabCreator().launchNTP();', '                mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);', '                if (getTabModelSelector().isIncognitoSelected()) {', '                    RecordUserAction.record(""MobileToolbarStackViewNewIncognitoTab"");', '                } else {', '                    RecordUserAction.record(""MobileToolbarStackViewNewTab"");', '                }', '                RecordUserAction.record(""MobileTopToolbarNewTabButton"");', '', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '            };', '            OnClickListener bookmarkClickHandler = v -> addOrEditBookmark(getActivityTab());', '', '            Supplier<Boolean> showStartSurfaceSupplier = () -> {', '                // If incognito is selected, tapping the home button stays on the current incognito', '                // tab.', '                if (ReturnToChromeExperimentsUtil.shouldShowStartSurfaceAsTheHomePageOnPhone(', '                            this, isTablet())', '                        && !mTabModelSelector.isIncognitoSelected()) {', '                    StartSurfaceUserData.setKeepTab(getActivityTab(), true);', '                    showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '                    return true;', '                }', '                return false;', '            };', '', '            getToolbarManager().initializeWithNative(mLayoutManager, tabSwitcherClickHandler,', '                    newTabClickHandler, bookmarkClickHandler, null, showStartSurfaceSupplier);', '', '            if (!TabUiFeatureUtilities.supportInstantStart(isTablet(), this)) {', '                assert !(mOverviewModeController != null', '                        && mOverviewModeController.overviewVisible());', '            }', '        }', '    }', '', '    private void maybeCreateIncognitoTabSnapshotController() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.maybeCreateIncognitoTabSnapshotController"")) {', '            if (!CommandLine.getInstance().hasSwitch(', '                        ChromeSwitches.ENABLE_INCOGNITO_SNAPSHOTS_IN_ANDROID_RECENTS)) {', '                IncognitoTabSnapshotController.createIncognitoTabSnapshotController(', '                        this, getWindow(), mLayoutManager, mTabModelSelector);', '            }', '', '            mUIWithNativeInitialized = true;', '            onAccessibilityTabSwitcherModeChanged();', '', '            // The dataset has already been created, we need to initialize our state.', '            mTabModelSelector.notifyChanged();', '', '            // Check for incognito tabs to handle the case where Chrome was swiped away in the', '            // background.', '            if (!IncognitoTabHostUtils.doIncognitoTabsExist()) {', '                IncognitoNotificationManager.dismissIncognitoNotification();', '                DownloadNotificationService.getInstance().cancelOffTheRecordDownloads();', '            }', '        }', '    }', '', '    private void maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.""', '                     + ""maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver"")) {', '            FeedSurfaceTracker.getInstance().startup();', '', '            if (UsageStatsService.isEnabled()) {', '                UsageStatsService.getInstance().createPageViewObserver(', '                        this, getActivityTabProvider(), getTabContentManagerSupplier());', '            }', '        }', '    }', '', '    private void initJourneyManager() {', '        assert mOverviewModeController != null;', '', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initJourneyManager"")) {', '            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TAB_ENGAGEMENT_REPORTING_ANDROID)) {', '                // The lifecycle of this object is managed by the lifecycle dispatcher.', '                new JourneyManager(getTabModelSelector(), getLifecycleDispatcher(),', '                        mOverviewModeController, new EngagementTimeUtil());', '            }', '        }', '    }', '', '    @Override', '    public void onNewIntent(Intent intent) {', ""        // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly"", '        // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,', '        // and not Chrome', '        Intent intentForDispatching = new Intent(intent);', '        intentForDispatching.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(', '                intentForDispatching, DispatchedBy.ON_NEW_INTENT);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            // Pressing back button in CCT should bring user to the caller activity.', '            moveTaskToBack(true);', '            // Intent was dispatched to CustomTabActivity, consume it.', '            return;', '        }', '', '        mIntentHandlingTimeMs = SystemClock.uptimeMillis();', '        super.onNewIntent(intent);', '    }', '', '    @Override', '    public void startNativeInitialization() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.startNativeInitialization"")) {', ""            // This is on the critical path so don't delay."", '            if (ChromeFeatureList.isEnabled(', '                        ChromeFeatureList.DARKEN_WEBSITES_CHECKBOX_IN_THEMES_SETTING)) {', '                WebContentsDarkModeController.createInstance();', '            }', '            setupCompositorContentPostNative();', '', ""            // All this initialization can be expensive so it's split into multiple tasks."", '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::refreshSignIn));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initializeToolbarManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeCreateIncognitoTabSnapshotController));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::onAccessibilityTabSwitcherModeChanged));', '', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initJourneyManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::finishNativeInitialization));', '            ChromeAccessibilityUtil.get().addObserver(this);', '        }', '    }', '', '    @Override', '    public void finishNativeInitialization() {', '        super.finishNativeInitialization();', '', '        // TODO(jinsukkim): Let these classes handle the registration by themselves.', '        mCompositorViewHolder = getCompositorViewHolderSupplier().get();', '        mOverviewListLayout = (OverviewListLayout) mLayoutManager.getOverviewListLayout();', '        getTabObscuringHandler().addObserver(mCompositorViewHolder);', '        getTabObscuringHandler().addObserver(mOverviewListLayout);', '', '        ChromeAccessibilityUtil.get().addObserver(mLayoutManager);', '        if (isTablet()) ChromeAccessibilityUtil.get().addObserver(mCompositorViewHolder);', '    }', '', '    @Override', '    public void onResumeWithNative() {', '        super.onResumeWithNative();', '', '        IncognitoStartup.onResumeWithNative(', '                getTabModelSelectorSupplier(), TABBED_MODE_COMPONENT_NAMES);', '', '        mLocaleManager.setSnackbarManager(getSnackbarManager());', '        mLocaleManager.startObservingPhoneChanges();', '', '        if (isWarmOnResume()) {', '            NavigationPredictorBridge.onActivityWarmResumed();', '        } else {', '            NavigationPredictorBridge.onColdStart();', '        }', '', '        // This call is not guarded by a feature flag.', '        SearchEngineChoiceNotification.handleSearchEngineChoice(', '                this, getSnackbarManager(), SETTINGS_LAUNCHER);', '', '        if (!isWarmOnResume()) {', '            SuggestionsMetrics.recordArticlesListVisible();', '        }', '    }', '', '    @Override', '    public void onPauseWithNative() {', '        mTabModelSelector.commitAllTabClosures();', '        CookiesFetcher.persistCookies();', '', '        mLocaleManager.setSnackbarManager(null);', '        mLocaleManager.stopObservingPhoneChanges();', '', '        NavigationPredictorBridge.onPause();', '', '        super.onPauseWithNative();', '    }', '', '    @Override', '    public void onStopWithNative() {', '        super.onStopWithNative();', '', '        mTabModelOrchestrator.saveState();', '        mHasDeterminedOverviewStateForCurrentSession = false;', '    }', '', '    @Override', '    public void onStartWithNative() {', '        mMainIntentMetrics.logLaunchBehavior();', '        super.onStartWithNative();', '', ""        // Don't call setInitialOverviewState if we're waiting for the tab's creation or we risk"", '        // showing a glimpse of the tab selector during start up.', '        if (!mPendingInitialTabCreation) {', '            setInitialOverviewState();', '        }', '', '        if (TabUiFeatureUtilities.isConditionalTabStripEnabled()', '                || ConditionalTabStripUtils.getOptOutIndicator()) {', '            ConditionalTabStripUtils.updateFeatureExpiration(', '                    mInactivityTracker.getLastBackgroundedTimeMs());', '        }', '', '        Bundle savedInstanceState = getSavedInstanceState();', '        if (savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false)) {', '            // This will be executed only once since SavedInstanceState will be reset a few lines', '            // later.', '            AndroidSessionDurationsServiceState.restoreNativeFromSerialized(savedInstanceState,', '                    getCurrentTabModel().getProfile().getPrimaryOTRProfile(', '                            /* createIfNeeded= */ true));', '        }', '', '        resetSavedInstanceState();', '        StartSurfaceConfiguration.addFeedVisibilityObserver();', '        BookmarkUtils.maybeExpireLastBookmarkLocationForReadLater(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    @Override', '    public void onNewIntentWithNative(Intent intent) {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.onNewIntentWithNative"");', '', '            super.onNewIntentWithNative(intent);', '            if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                logMainIntentBehavior(intent);', '            }', '', '            if (CommandLine.getInstance().hasSwitch(ContentSwitches.ENABLE_TEST_INTENTS)) {', '                handleDebugIntent(intent);', '            }', '', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.onNewIntentWithNative"");', '        }', '    }', '', '    @Override', '    public @ActivityType int getActivityType() {', '        return ActivityType.TABBED;', '    }', '', '    @Override', '    public ChromeTabCreator getTabCreator(boolean incognito) {', '        return (ChromeTabCreator) super.getTabCreator(incognito);', '    }', '', '    @Override', '    public ChromeTabCreator getCurrentTabCreator() {', '        return (ChromeTabCreator) super.getCurrentTabCreator();', '    }', '', '    @Override', '    public OverviewModeBehavior getOverviewModeBehavior() {', '        return mOverviewModeController;', '    }', '', '    @Override', '    public @Nullable OneshotSupplier<OverviewModeBehavior> getOverviewModeBehaviorSupplier() {', '        return mOverviewModeBehaviorSupplier;', '    }', '', '    /**', '     * @return The toolbar button in-product help controller for this activity.', '     * TODO(pnoland, https://crbug.com/865801): remove this in favor', ""     *        of injecting the controller directly where it's needed."", '     */', '    public ToolbarButtonInProductHelpController getToolbarButtonInProductHelpController() {', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getToolbarButtonInProductHelpController();', '    }', '', '    private void handleDebugIntent(Intent intent) {', '        if (ACTION_CLOSE_TABS.equals(intent.getAction())) {', '            getTabModelSelector().closeAllTabs();', '        } else if (MemoryPressureListener.handleDebugIntent(', '                           ChromeTabbedActivity.this, intent.getAction())) {', '            // Handled.', '        }', '    }', '', '    private void setTrackColdStartupMetrics(boolean shouldTrackColdStartupMetrics) {', '        assert getActivityTabStartupMetricsTracker() != null;', '', '        if (shouldTrackColdStartupMetrics) {', '            getActivityTabStartupMetricsTracker().trackStartupMetrics(STARTUP_UMA_HISTOGRAM_SUFFIX);', '        } else {', '            getActivityTabStartupMetricsTracker().cancelTrackingStartupMetrics();', '        }', '', '        // Paint Preview should follow the same logic as startup UMA histograms as the feature', '        // should only run on cold startup of Chrome when the user is unable to interact before', '        // entering a tab.', '        StartupPaintPreviewHelper.setShouldShowOnRestore(shouldTrackColdStartupMetrics);', '    }', '', '    private void setInitialOverviewState() {', '        if (mHasDeterminedOverviewStateForCurrentSession) return;', '', '        mHasDeterminedOverviewStateForCurrentSession = true;', '        boolean isOverviewVisible = mOverviewModeController.overviewVisible();', '', '        if (shouldRefreshAndShowOverview(isOverviewVisible)) {', '            if (getCurrentTabModel() != null) {', '                RecordHistogram.recordCountHistogram(', '                        TAB_COUNT_ON_RETURN, getCurrentTabModel().getCount());', '            }', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this) && !isTablet()) {', '                mStartSurfaceSupplier.get().getController().enableRecordingFirstMeaningfulPaint(', '                        getOnCreateTimestampMs());', '            }', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '            return;', '        }', '', '        if (getActivityTab() == null && !isOverviewVisible) {', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '        }', '', '        if (IntentUtils.isMainIntentFromLauncher(getIntent())', '                && mOverviewModeController.overviewVisible()) {', '            RecordUserAction.record(""MobileStartup.UserEnteredTabSwitcher"");', '        }', '    }', '', '    private boolean shouldRefreshAndShowOverview(boolean isOverviewVisible) {', '        // If StartSurfaceConfiguration.NEW_SURFACE_FROM_HOME_BUTTON is turned on, MV tiles and', '        // carousels may be hidden before Chrome is brought to the background. If overview should be', '        // shown, no matter overview was already visible or not, we should call', '        // showOverview(StartSurfaceState.SHOWING_START) to show MV tiles and carousels again.', '        return shouldShowOverviewPageOnStart()', '                && (!isOverviewVisible', '                        || StartSurfaceConfiguration.shouldShowNewSurfaceFromHomeButton());', '    }', '', '    /**', '     * Returns whether grid Tab switcher or the Start surface should be shown at startup.', '     */', '    private boolean shouldShowOverviewPageOnStart() {', '        return ReturnToChromeExperimentsUtil.shouldShowOverviewPageOnStart(', '                this, getIntent(), getTabModelSelector(), mInactivityTracker);', '    }', '', '    private void logMainIntentBehavior(Intent intent) {', '        assert IntentUtils.isMainIntentFromLauncher(intent);', '        // TODO(tedchoc): We should cache the last visible time and reuse it to avoid different', '        //                values of this depending on when it is called after the activity was', '        //                shown.', '', '        // Temporary safety check to make sure none of this code runs if the feature is', '        // disabled.', '        if (ReengagementNotificationController.isEnabled()) {', '            if (mCallbackController != null) {', '                new OneShotCallback<>(', '                        mTabModelProfileSupplier, mCallbackController.makeCancelable(profile -> {', '                            assert profile != null : ""Unexpectedly null profile from TabModel."";', '                            if (profile == null) return;', '', '                            TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                    EventConstants.STARTED_FROM_MAIN_INTENT);', '                        }));', '            }', '        }', '', '        mMainIntentMetrics.onMainIntentWithNative(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    /** Access the main intent metrics for test validation. */', '    @VisibleForTesting', '    public MainIntentBehaviorMetrics getMainIntentBehaviorMetricsForTesting() {', '        return mMainIntentMetrics;', '    }', '', '    @VisibleForTesting', '    public ChromeInactivityTracker getInactivityTrackerForTesting() {', '        return mInactivityTracker;', '    }', '', '    @Override', '    public void initializeState() {', '        // This method goes through 3 steps:', ""        // 1. Load the saved tab state (but don't start restoring the tabs yet)."", '        // 2. Process the Intent that this activity received and if that should result in any', '        //    new tabs, create them.  This is done after step 1 so that the new tab gets', '        //    created after previous tab state was restored.', '        // 3. If no tabs were created in any of the above steps, create an NTP, otherwise', '        //    start asynchronous tab restore (loading the previously active tab synchronously', '        //    if no new tabs created in step 2).', '', '        // Only look at the original intent if this is not a ""restoration"" and we are allowed to', '        // process intents. Any subsequent intents are carried through onNewIntent.', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeState"");', '', '            super.initializeState();', '            Log.i(TAG, ""#initializeState"");', '            Intent intent = getIntent();', '', '            boolean hadCipherData =', '                    CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());', '', '            boolean noRestoreState =', '                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);', '            if (noRestoreState) {', '                // Clear the state files because they are inconsistent and useless from now on.', '                mTabModelOrchestrator.clearState();', '            } else {', '                // State should be clear when we start first run and hence we do not need to load', '                // a previous state. This may change the current Model, watch out for initialization', '                // based on the model.', '                // Never attempt to restore incognito tabs when this activity was previously swiped', '                // away in Recents. http://crbug.com/626629', '                boolean ignoreIncognitoFiles = !hadCipherData;', '                mTabModelOrchestrator.loadState(ignoreIncognitoFiles);', '            }', '', '            mInactivityTracker.register(this.getLifecycleDispatcher());', '            boolean isIntentWithEffect = false;', '            boolean isMainIntentFromLauncher = false;', '            if (getSavedInstanceState() == null && intent != null) {', '                if (!shouldIgnoreIntent()) {', '                    isIntentWithEffect = mIntentHandler.onNewIntent(intent);', '                }', '', '                if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                    isMainIntentFromLauncher = true;', '                    logMainIntentBehavior(intent);', '                }', '            }', '', '            mIntentMetadataOneshotSupplier.set(', '                    new ToolbarIntentMetadata(isMainIntentFromLauncher, isIntentWithEffect));', '', '            // If we have tabs to reparent and getSavedInstanceState() is non-null, then the tabs', '            // are coming from night mode tab reparenting. In this case, reparenting happens', '            // synchronously along with tab restoration so there are no tabs waiting for', '            // reparenting like there are for other tab reparenting operations.', '            boolean hasTabWaitingForReparenting =', '                    AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()', '                    && getSavedInstanceState() == null;', '            mCreatedTabOnStartup = getCurrentTabModel().getCount() > 0', '                    || mTabModelOrchestrator.getRestoredTabCount() > 0 || isIntentWithEffect', '                    || hasTabWaitingForReparenting;', '', '            // We always need to try to restore tabs. The set of tabs might be empty, but at least', '            // it will trigger the notification that tab restore is complete which is needed by', '            // other parts of Chrome such as sync.', '            boolean activeTabBeingRestored = !isIntentWithEffect', '                    || (shouldShowOverviewPageOnStart()', '                            && !mTabModelSelector.isIncognitoSelected());', '', '            mTabModelOrchestrator.restoreTabs(activeTabBeingRestored);', '', '            // Only create an initial tab if no tabs were restored and no intent was handled.', '            // Also, check whether the active tab was supposed to be restored and that the total', '            // tab count is now non zero.  If this is not the case, tab restore failed and we need', '            // to create a new tab as well.', '            if (!mCreatedTabOnStartup', '                    || (!hasTabWaitingForReparenting && activeTabBeingRestored', '                            && getTabModelSelector().getTotalTabCount() == 0)) {', '                // If homepage URI is not determined, due to PartnerBrowserCustomizations provider', '                // async reading, then create a tab at the async reading finished. If it takes', '                // too long, just create NTP.', '', '                mPendingInitialTabCreation = true;', '                PartnerBrowserCustomizations.getInstance().setOnInitializeAsyncFinished(() -> {', '                    if (!isActivityFinishingOrDestroyed()) {', '                        createInitialTab();', '                    }', '                }, INITIAL_TAB_CREATION_TIMEOUT_MS);', '            }', '', '            // If initial tab creation is pending, this will instead be handled when we create the', '            // initial tab in #createInitialTab.', '            if (!mPendingInitialTabCreation) {', '                mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '            }', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeState"");', '        }', '    }', '', '    private boolean hasStartWithNativeBeenCalled() {', '        int activity_state = getLifecycleDispatcher().getCurrentActivityState();', '        return activity_state == ActivityLifecycleDispatcher.ActivityState.STARTED_WITH_NATIVE', '                || activity_state == ActivityLifecycleDispatcher.ActivityState.RESUMED_WITH_NATIVE;', '    }', '', '    /**', '     * Create an initial tab for cold start without restored tabs.', '     */', '    private void createInitialTab() {', '        Log.i(TAG, ""#createInitialTab executed."");', '        mPendingInitialTabCreation = false;', '', '        // If the start surface or grid tab switcher will be shown on start, do not create a new', '        // tab.', '        if (!shouldShowOverviewPageOnStart()) {', '            String url = HomepageManager.getHomepageUri();', '            if (TextUtils.isEmpty(url)) {', '                url = UrlConstants.NTP_URL;', '            } else {', '                // Migrate legacy NTP URLs (chrome://newtab) to the newer format', '                // (chrome-native://newtab)', '                if (UrlUtilities.isNTPUrl(url)) {', '                    url = UrlConstants.NTP_URL;', '                }', '            }', '', '            getTabCreator(false).launchUrl(url, TabLaunchType.FROM_STARTUP);', '        }', '', ""        // If we didn't call setInitialOverviewState() in onStartWithNative() because"", '        // mPendingInitialTabCreation was true then do so now.', '        if (hasStartWithNativeBeenCalled()) {', '            setInitialOverviewState();', '        }', '', '        mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '    }', '', '    @Override', '    public void onAccessibilityModeChanged(boolean enabled) {', '        onAccessibilityTabSwitcherModeChanged();', '    }', '', '    private void onAccessibilityTabSwitcherModeChanged() {', '        if (!mUIWithNativeInitialized) return;', '', '        boolean accessibilityTabSwitcherEnabled =', '                DeviceClassManager.enableAccessibilityLayout(this);', '        if (mOverviewModeController != null && mOverviewModeController.overviewVisible()', '                && (mIsAccessibilityTabSwitcherEnabled == null', '                        || mIsAccessibilityTabSwitcherEnabled', '                                != DeviceClassManager.enableAccessibilityLayout(this))) {', '            /**', '             * If Start surface homepage is showing and launching NTP will show the Start surface', '             * again, skips the calls of hideOverview() and launchNTP(). We need to check', '             * {@link ReturnToChromeExperimentsUtil#shouldShowStartSurfaceHomeAsNTP(Context,', '             * boolean, boolean)} to see whether Start surface can be shown when accessibility is', '             * enabled.', '             */', '            if (mStartSurfaceSupplier.get() == null', '                    || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                            != StartSurfaceState.SHOWN_HOMEPAGE', '                    || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                            this, getCurrentTabModel().isIncognito(), isTablet())) {', '                mOverviewModeController.hideOverview(true);', '                if (getTabModelSelector().getCurrentModel().getCount() == 0) {', '                    getCurrentTabCreator().launchNTP();', '                }', '            }', '        }', '        mIsAccessibilityTabSwitcherEnabled = accessibilityTabSwitcherEnabled;', '', '        if (ChromeAccessibilityUtil.get().isAccessibilityEnabled()) {', '            RecordHistogram.recordBooleanHistogram(', '                    ""Accessibility.Android.TabSwitcherPreferenceEnabled"",', '                    mIsAccessibilityTabSwitcherEnabled);', '        }', '    }', '', '    /**', '     * Internal class which performs the intent handling operations delegated by IntentHandler.', '     */', '    private class InternalIntentDelegate implements IntentHandler.IntentHandlerDelegate {', '        /**', '         * Processes a url view intent.', '         *', '         * @param url The url from the intent.', '         */', '        @Override', '        public void processUrlViewIntent(LoadUrlParams loadUrlParams, @TabOpenType int tabOpenType,', '                String externalAppId, int tabIdToBringToFront, Intent intent) {', '            if (isActivityFinishingOrDestroyed()) {', '                return;', '            }', '            if (isFromChrome(intent, externalAppId)) {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromChrome"");', '            } else {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromApp"");', '            }', '', '            final String url = loadUrlParams.getUrl();', '            boolean fromLauncherShortcut = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false);', '            boolean fromAppWidget = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false);', '            boolean focus = false;', '', '            TabModel tabModel = getCurrentTabModel();', '            switch (tabOpenType) {', '                case TabOpenType.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:', '                    mTabModelOrchestrator.tryToRestoreTabStateForUrl(url);', '                    int tabToBeClobberedIndex = TabModelUtils.getTabIndexByUrl(tabModel, url);', '                    Tab tabToBeClobbered = tabModel.getTabAt(tabToBeClobberedIndex);', '                    if (tabToBeClobbered != null) {', '                        TabModelUtils.setIndex(tabModel, tabToBeClobberedIndex);', '                        tabToBeClobbered.reload();', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    int shortcutSource = intent.getIntExtra(', '                            WebappConstants.EXTRA_SOURCE, ShortcutSource.UNKNOWN);', '                    LaunchMetrics.recordHomeScreenLaunchIntoTab(url, shortcutSource);', '                    if (fromAppWidget && url.startsWith(UrlConstants.CHROME_DINO_URL)) {', '                        RecordUserAction.record(""QuickActionSearchWidget.StartDinoGame"");', '                    }', '                    break;', '                case TabOpenType.BRING_TAB_TO_FRONT:', '                    mTabModelOrchestrator.tryToRestoreTabStateForId(tabIdToBringToFront);', '', '                    int tabIndex = TabModelUtils.getTabIndexById(tabModel, tabIdToBringToFront);', '                    if (tabIndex == TabModel.INVALID_TAB_INDEX) {', '                        TabModel otherModel =', '                                getTabModelSelector().getModel(!tabModel.isIncognito());', '                        tabIndex = TabModelUtils.getTabIndexById(otherModel, tabIdToBringToFront);', '                        if (tabIndex != TabModel.INVALID_TAB_INDEX) {', '                            getTabModelSelector().selectModel(otherModel.isIncognito());', '                            TabModelUtils.setIndex(otherModel, tabIndex);', '                        } else {', '                            Log.e(TAG, ""Failed to bring tab to front because it doesn\'t exist."");', '                            return;', '                        }', '                    } else {', '                        TabModelUtils.setIndex(tabModel, tabIndex);', '                    }', '                    break;', '                case TabOpenType.CLOBBER_CURRENT_TAB:', '                    // The browser triggered the intent. This happens when clicking links which', '                    // can be handled by other applications (e.g. www.youtube.com links).', '                    Tab currentTab = getActivityTab();', '                    if (currentTab != null) {', '                        RedirectHandlerTabHelper.updateIntentInTab(currentTab, intent);', '                        currentTab.loadUrl(loadUrlParams);', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    break;', '                case TabOpenType.REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:', '                    launchIntent(loadUrlParams, externalAppId, false, intent);', '                    break;', '                case TabOpenType.REUSE_TAB_MATCHING_ID_ELSE_NEW_TAB:', '                    int tabId = IntentUtils.safeGetIntExtra(', '                            intent, TabOpenType.REUSE_TAB_MATCHING_ID_STRING, Tab.INVALID_TAB_ID);', '                    if (tabId != Tab.INVALID_TAB_ID) {', '                        mTabModelOrchestrator.tryToRestoreTabStateForId(tabId);', '                        int matchingTabIndex = TabModelUtils.getTabIndexById(tabModel, tabId);', '                        boolean loaded = false;', '                        if (matchingTabIndex != TabModel.INVALID_TAB_INDEX) {', '                            Tab tab = tabModel.getTabAt(matchingTabIndex);', '                            if (tab.getUrl().getSpec().equals(url)', '                                    || tab.getUrl().getSpec().equals(IntentUtils.safeGetStringExtra(', '                                            intent, TabOpenType.REUSE_TAB_ORIGINAL_URL_STRING))) {', '                                tabModel.setIndex(matchingTabIndex, TabSelectionType.FROM_USER);', '                                tab.loadUrl(loadUrlParams);', '                                loaded = true;', '                            }', '                        }', '                        if (!loaded) {', '                            launchIntent(loadUrlParams, externalAppId, false, intent);', '                        }', '                    }', '                    break;', '                case TabOpenType.OPEN_NEW_TAB:', '                    if (fromLauncherShortcut) {', '                        recordLauncherShortcutAction(false);', '                        reportNewTabShortcutUsed(false);', '                    }', '', '                    launchIntent(loadUrlParams, externalAppId, true, intent);', '                    break;', '                case TabOpenType.OPEN_NEW_INCOGNITO_TAB:', '                    if (!TextUtils.equals(externalAppId, getPackageName())) {', '                        assert false : ""Only Chrome is allowed to open incognito tabs"";', '                        Log.e(TAG, ""Only Chrome is allowed to open incognito tabs"");', '                        return;', '                    }', '', '                    if (!IncognitoUtils.isIncognitoModeEnabled()) {', '                        // The incognito launcher shortcut is manipulated in #onDeferredStartup(),', ""                        // so it's possible for a user to invoke the shortcut before it's disabled."", '                        // Quick actions search widget is installed on the home screen and may', '                        // need to be updated before the incognito button is removed.', '                        // Opening an incognito tab while incognito mode is disabled from somewhere', '                        // besides the launcher shortcut of from quick action search widget is an', '                        // error.', '                        if (fromAppWidget || fromLauncherShortcut) {', '                            // We are using the message introduced for quick action search widget', '                            // for both the widget and the launcher shortcut here.', '                            Toast.makeText(ChromeTabbedActivity.this,', '                                         R.string.quick_action_search_widget_message_no_incognito,', '                                         Toast.LENGTH_LONG)', '                                    .show();', '                        } else {', '                            assert false : ""Tried to open incognito tab while incognito disabled"";', '                            Log.e(TAG, ""Tried to open incognito tab while incognito disabled"");', '                        }', '', '                        return;', '                    }', '', '                    if (url == null || url.equals(UrlConstants.NTP_URL)) {', '                        if (fromLauncherShortcut) {', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);', '                            recordLauncherShortcutAction(true);', '                            reportNewTabShortcutUsed(true);', '                        } else if (fromAppWidget) {', '                            RecordUserAction.record(""QuickActionSearchWidget.StartIncognito"");', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);', '                        } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);', '                            if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {', '                                // Since the Tab is created in the foreground, its View will gain', '                                // focus, and since the Tab and the URL bar are not yet in the same', ""                                // View hierarchy, setting the URL bar's focus here won't clear the"", ""                                // Tab's focus. When the Tab is added to the hierarchy, we want the"", ""                                // URL bar to retain focus, so we clear the Tab's focus here."", '                                tab.getView().clearFocus();', '                                focus = true;', '                            }', '', '                            IncognitoTabLauncher.recordUse();', '                        } else {', '                            // Used by the Account management screen to open a new incognito tab.', '                            // Account management screen collects its metrics separately.', '                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);', '                        }', '                    } else {', '                        @TabLaunchType', '                        Integer launchType = IntentHandler.getTabLaunchType(intent);', '                        if (launchType == null) launchType = TabLaunchType.FROM_LINK;', '                        getTabCreator(true).launchUrl(', '                                url, launchType, intent, mIntentHandlingTimeMs);', '                    }', '                    break;', '                default:', '                    assert false : ""Unknown TabOpenType: "" + tabOpenType;', '                    break;', '            }', '', '            getToolbarManager().setUrlBarFocusOnceNativeInitialized(focus,', '                    focus ? OmniboxFocusReason.LAUNCH_NEW_INCOGNITO_TAB', '                          : OmniboxFocusReason.UNFOCUS);', '', '            if (tabModel.getCount() > 0 && isInOverviewMode() && !isTablet()', '                    && !shouldShowOverviewPageOnStart()) {', '                mOverviewModeController.hideOverview(true);', '            }', '        }', '', '        @Override', '        public long getIntentHandlingTimeMs() {', '            return mIntentHandlingTimeMs;', '        }', '', '        @Override', '        public void processWebSearchIntent(String query) {', '            assert false;', '        }', '', '        @Override', '        public void processTranslateTabIntent(', '                @Nullable String targetLanguageCode, @Nullable String expectedUrl) {', '            TranslateIntentHandler.translateTab(getActivityTab(), targetLanguageCode, expectedUrl);', '        }', '', '        private boolean isFromChrome(Intent intent, String externalAppId) {', '            // To determine if the processed intent is from Chrome, check for any of the following:', '            // 1.) The authentication token that will be added to trusted intents.', '            // 2.) The app ID matches Chrome.  This value can be spoofed by other applications, but', '            //     in cases where we were not able to add the authentication token this is our only', '            //     indication the intent was from Chrome.', '            return IntentHandler.wasIntentSenderChrome(intent)', '                    || TextUtils.equals(externalAppId, getPackageName());', '        }', '    }', '', '    @Override', '    public void performPreInflationStartup() {', '        // Create JankTracker before invoking super, because the parent class will invoke', '        // createRootUiCoordinator(...), which in our case requires the JankTracker to already have', '        // been created.', '        mJankTracker = new JankTrackerImpl(this);', '', '        super.performPreInflationStartup();', '', '        // Decide whether to record startup UMA histograms. This is done  early in the main', '        // Activity.onCreate() to avoid recording navigation delays when they require user input to', '        // proceed. For example, FRE (First Run Experience) happens before the activity is created,', '        // and triggers initialization of the native library.', '        //', '        // An uninitialized native library is an indication of an application start that is followed', '        // by navigation immediately without user input.', '        if (!LibraryLoader.getInstance().isInitialized()) {', '            setTrackColdStartupMetrics(true);', '        }', '', '        supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);', '', '        IncognitoTabHostRegistry.getInstance().register(mIncognitoTabHost);', '', '        mStartupPaintPreviewHelperSupplier.attach(getWindowAndroid().getUnownedUserDataHost());', '    }', '', '    @Override', '    protected RootUiCoordinator createRootUiCoordinator() {', '        return new TabbedRootUiCoordinator(this, this::onOmniboxFocusChanged,', '                getShareDelegateSupplier(), getActivityTabProvider(), mTabModelProfileSupplier,', '                mBookmarkBridgeSupplier, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), mStartSurfaceSupplier,', '                mIntentMetadataOneshotSupplier, mLayoutStateProviderOneshotSupplier,', '                mStartSurfaceParentTabSupplier, getBrowserControlsManager(), getWindowAndroid(),', '                mJankTracker, getLifecycleDispatcher(), getLayoutManagerSupplier(),', '                /* menuOrKeyboardActionController= */ this, this::getActivityThemeColor,', '                getModalDialogManagerSupplier(), /* appMenuBlocker= */ this, this::supportsAppMenu,', '                this::supportsFindInPage, getTabCreatorManagerSupplier(), getFullscreenManager(),', '                getCompositorViewHolderSupplier(), getTabContentManagerSupplier(),', '                getOverviewModeBehaviorSupplier(), this::getSnackbarManager, getActivityType(),', '                this::isInOverviewMode, this::isWarmOnResume,', '                /* appMenuDelegate= */ this, /* statusBarColorProvider= */ this,', '                mEphemeralTabCoordinatorSupplier, getIntentRequestTracker(),', '                getControlContainerHeightResource(), this::getInsetObserverView,', '                this::backShouldCloseTab);', '    }', '', '    @Override', '    protected int getControlContainerLayoutId() {', '        return R.layout.control_container;', '    }', '', '    @Override', '    public int getControlContainerHeightResource() {', '        return R.dimen.control_container_height;', '    }', '', '    @Override', '    protected int getToolbarLayoutId() {', '        return isTablet() ? R.layout.toolbar_tablet : R.layout.toolbar_phone;', '    }', '', '    @Override', '    protected int getToolbarShadowResource() {', '        final boolean themeRefactorEnabled =', '                CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID);', '        return themeRefactorEnabled ? R.drawable.toolbar_hairline', '                                    : R.drawable.modern_toolbar_shadow;', '    }', '', '    @Override', '    protected int getToolbarShadowLayoutHeight() {', '        final int res = CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID)', '                ? R.dimen.toolbar_hairline_height', '                : R.dimen.toolbar_shadow_height;', '        return getResources().getDimensionPixelSize(res);', '    }', '', '    @Override', '    public void performPostInflationStartup() {', '        super.performPostInflationStartup();', '', '        FontPreloader.getInstance().onPostInflationStartupTabbedActivity();', '', '        TabModelSelector tabModelSelector = getTabModelSelector();', '        IncognitoProfileDestroyer.observeTabModelSelector(tabModelSelector);', '        IncognitoNotificationPresenceController.observeTabModelSelector(tabModelSelector);', '', '        // Critical path for startup. Create the minimum objects needed', '        // to allow a blank screen draw (without depending on any native code)', '        // and then yield ASAP.', '        if (isFinishing()) return;', '', ""        // Don't show the keyboard until user clicks in."", '        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN', '                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);', '', '        mContentContainer = (ViewGroup) findViewById(android.R.id.content);', '        mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);', '', '        Supplier<Boolean> dialogVisibilitySupplier = null;', '        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {', '            dialogVisibilitySupplier = () -> {', '                assert mStartSurfaceSupplier.get() != null;', '                assert getToolbarManager().getTabGroupUi() != null;', '                // Return true if dialog from either tab switcher or tab strip is visible.', '', '                ToolbarManager toolbarManager = getToolbarManager();', '                TabGroupUi tabGroupUi = toolbarManager.getTabGroupUi();', '                boolean isDialogVisible = tabGroupUi.isTabGridDialogVisible();', '', '                Supplier<Boolean> tabSwitcherDialogVisibilitySupplier =', '                        mStartSurfaceSupplier.get().getTabGridDialogVisibilitySupplier();', '', '                if (tabSwitcherDialogVisibilitySupplier != null) {', '                    isDialogVisible = isDialogVisible || tabSwitcherDialogVisibilitySupplier.get();', '                }', '                return isDialogVisible;', '            };', '        }', '', '        mUndoBarPopupController = new UndoBarController(this, mTabModelSelector,', '                this::getSnackbarManager, mOverviewModeBehaviorSupplier, dialogVisibilitySupplier);', '', '        mInactivityTracker = new ChromeInactivityTracker(', '                ChromePreferenceKeys.TABBED_ACTIVITY_LAST_BACKGROUNDED_TIME_MS_PREF);', '', '        assert getActivityTabStartupMetricsTracker() != null;', '        if (StartupPaintPreviewHelper.isEnabled()) {', '            StartupPaintPreviewHelper paintPreviewHelper = new StartupPaintPreviewHelper(', '                    getWindowAndroid(), getOnCreateTimestampMs(), getBrowserControlsManager(),', '                    getTabModelSelector(), shouldShowOverviewPageOnStart(), () -> {', '                        return getToolbarManager() == null', '                                ? null', '                                : getToolbarManager().getProgressBarCoordinator();', '                    });', '            mStartupPaintPreviewHelperSupplier.set(paintPreviewHelper);', '            getActivityTabStartupMetricsTracker().registerPaintPreviewObserver(paintPreviewHelper);', '        }', '    }', '', '    private boolean shouldIgnoreIntent() {', '        if (mShouldIgnoreIntent == null) {', '            // We call this only once because mIntentHandler#shouldIgnoreIntent has side effects.', '            mShouldIgnoreIntent =', '                    mIntentHandler.shouldIgnoreIntent(getIntent(), /*startedActivity=*/true);', '        }', '        return mShouldIgnoreIntent;', '    }', '', '    @Override', '    protected final void dispatchOnInflationComplete() {', '        super.dispatchOnInflationComplete();', '', '        // When the feature flag {@link ChromeFeatureList.INSTANT_START} turns on phones (not', '        // tablet), a view-only start page created on Java will be shown before native is', '        // initialized. The {@link prepareToShowStartPagePreNative()} is only called in a cold', '        // start.', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                && TabUiFeatureUtilities.supportInstantStart(isTablet(), this) && !hadWarmStart()) {', '            prepareToShowStartPagePreNative();', '        }', '    }', '', '    /**', '     * Prepares to show the start page before native is initialized. For example, create', '     * an LayoutManagerChrome object, add overview mode observer and so on.', '     */', '    private void prepareToShowStartPagePreNative() {', '        assert TabUiFeatureUtilities.supportInstantStart(isTablet() && !hadWarmStart(), this);', '        try (TraceEvent e =', '                        TraceEvent.scoped(""ChromeTabbedActivity.prepareToShowStartPagePreNative"")) {', '            setupCompositorContentPreNativeForPhone();', '            getCompositorViewHolderSupplier().get().setLayoutManager(mLayoutManager);', '', '            if (shouldShowOverviewPageOnStart()) {', '                mLayoutManager.setTabModelSelector(mTabModelSelector);', '                mIsAccessibilityTabSwitcherEnabled =', '                        DeviceClassManager.enableAccessibilityLayout(this);', '                assert !mHasDeterminedOverviewStateForCurrentSession;', '                setInitialOverviewState();', '            }', '        }', '    }', '', '    @Override', '    protected TabModelOrchestrator createTabModelOrchestrator() {', '        boolean tabMergingEnabled =', '                mMultiInstanceManager != null && mMultiInstanceManager.isTabModelMergingEnabled();', '        mTabModelOrchestrator = new TabbedModeTabModelOrchestrator(tabMergingEnabled);', '        return mTabModelOrchestrator;', '    }', '', '    @Override', '    protected void createTabModels() {', '        assert mTabModelSelector == null;', '        assert mWindowId != INVALID_WINDOW_ID;', '', '        Bundle savedInstanceState = getSavedInstanceState();', '', '        // We determine the model as soon as possible so every systems get initialized coherently.', '        boolean startIncognito = savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false);', '', '        mNextTabPolicySupplier = new ChromeNextTabPolicySupplier(mOverviewModeBehaviorSupplier);', '', '        boolean tabModelWasCreated = mTabModelOrchestrator.createTabModels(', '                this, this, mNextTabPolicySupplier, mWindowId);', '        if (!tabModelWasCreated) {', '            finish();', '            return;', '        }', '', '        if (mMultiInstanceManager != null) {', '            int assignedIndex = TabWindowManagerSingleton.getInstance().getIndexForWindow(this);', '            // The given index and the one computed by TabWindowManager should be one and the same.', '            assert !MultiWindowUtils.isMultiInstanceApi31Enabled() || assignedIndex == mWindowId;', '            mMultiInstanceManager.initialize(assignedIndex, getTaskId());', '        }', '', '        mTabModelSelector = mTabModelOrchestrator.getTabModelSelector();', '        mTabModelSelector.addObserver(new TabModelSelectorObserver() {', '            @Override', '            public void onTabStateInitialized() {', '                if (!mCreatedTabOnStartup) return;', '', '                TabModel model = mTabModelSelector.getModel(false);', '                TasksUma.recordTasksUma(model);', '            }', '        });', '', '        mTabModelSelectorTabObserver = new TabModelSelectorTabObserver(mTabModelSelector) {', '            @Override', '            public void onDidFinishNavigation(Tab tab, NavigationHandle navigation) {', '                if (!navigation.hasCommitted() || !navigation.isInPrimaryMainFrame()) {', '                    return;', '                }', '                DataReductionPromoInfoBar.maybeLaunchPromoInfoBar(ChromeTabbedActivity.this,', '                        tab.getWebContents(), navigation.getUrl(), tab.isShowingErrorPage(),', '                        navigation.isFragmentNavigation(), navigation.httpStatusCode());', '                if (SyncErrorPromptUtils.isMessageUiEnabled()) {', '                    SyncErrorMessage.maybeShowMessageUi(', '                            getWindowAndroid(), ChromeTabbedActivity.this);', '                } else {', '                    SyncErrorInfoBar.maybeLaunchSyncErrorInfoBar(tab.getWebContents());', '                }', '                SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());', '            }', '        };', '        mAppIndexingUtil = new AppIndexingUtil(mTabModelSelector);', '', '        if (startIncognito) mTabModelSelector.selectModel(true);', '    }', '', '    @Override', '    protected LaunchCauseMetrics createLaunchCauseMetrics() {', '        return new TabbedActivityLaunchCauseMetrics(this);', '    }', '', '    @Override', '    public AppMenuPropertiesDelegate createAppMenuPropertiesDelegate() {', '        return new TabbedAppMenuPropertiesDelegate(this, getActivityTabProvider(),', '                getMultiWindowModeStateDispatcher(), getTabModelSelector(), getToolbarManager(),', '                getWindow().getDecorView(), this, mOverviewModeBehaviorSupplier,', '                ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                        ? mStartSurfaceSupplier', '                        : null,', '                mBookmarkBridgeSupplier,', '                ()', '                        -> getTabCreator(/*incognito=*/false)', '                                   .launchUrl(NewTabPageUtils.encodeNtpUrl(', '                                                      NewTabPageLaunchOrigin.WEB_FEED),', '                                           TabLaunchType.FROM_CHROME_UI),', '                getModalDialogManager(), getSnackbarManager());', '    }', '', '    private TabDelegateFactory getTabDelegateFactory() {', '        if (mTabDelegateFactory == null) {', '            mTabDelegateFactory = new TabbedModeTabDelegateFactory(this,', '                    getAppBrowserControlsVisibilityDelegate(), getShareDelegateSupplier(),', '                    mEphemeralTabCoordinatorSupplier,', '                    ((TabbedRootUiCoordinator) mRootUiCoordinator)::onContextMenuCopyLink,', '                    mRootUiCoordinator.getBottomSheetController(),', '                    /* ChromeActivityNativeDelegate */ this, /* isCustomTab= */ false,', '                    getBrowserControlsManager(), getFullscreenManager(),', '                    /* TabCreatorManager */ this, getTabModelSelectorSupplier(),', '                    getCompositorViewHolderSupplier(), getModalDialogManagerSupplier(),', '                    this::getSnackbarManager, getBrowserControlsManager(), getActivityTabProvider(),', '                    getLifecycleDispatcher(), getWindowAndroid(), this::getLastUserInteractionTime,', '                    this::hadWarmStart, mJankTracker, getToolbarManager()::getToolbar);', '        }', '        return mTabDelegateFactory;', '    }', '', '    @Override', '    protected Pair<ChromeTabCreator, ChromeTabCreator> createTabCreators() {', '        ChromeTabCreator.OverviewNTPCreator overviewNTPCreator = null;', '', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '            overviewNTPCreator = new ChromeTabCreator.OverviewNTPCreator() {', '                @Override', '                public boolean handleCreateNTPIfNeeded(boolean isNTP, boolean incognito,', '                        Tab parentTab, @NewTabPageLaunchOrigin int launchOrigin) {', '                    boolean shouldShowStart =', '                            showStartSurfaceHomeForNTP(isNTP, incognito, parentTab, launchOrigin);', '                    if (shouldShowStart) {', '                        mStartSurfaceParentTabSupplier.set(parentTab);', '                    }', '                    return shouldShowStart;', '                }', '', '                @Override', '                public void preTabInitialization(Tab tab, String url) {', '                    StartSurfaceConfiguration.maySetUserDataForEmptyTab(tab, url);', '                }', '            };', '        }', '        return Pair.create(', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, false, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()),', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, true, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()));', '    }', '', '    @Override', '    protected void initDeferredStartupForActivity() {', '        super.initDeferredStartupForActivity();', '        DeferredStartupHandler.getInstance().addDeferredTask(() -> {', '            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);', '            RecordHistogram.recordSparseHistogram(', '                    ""MemoryAndroid.DeviceMemoryClass"", am.getMemoryClass());', '', '            LauncherShortcutActivity.updateIncognitoShortcut(ChromeTabbedActivity.this);', '', '            ChromeSurveyController.initialize(mTabModelSelector, getLifecycleDispatcher(),', '                    ChromeTabbedActivity.this, MessageDispatcherProvider.from(getWindowAndroid()));', '', '            if (mStartSurfaceSupplier.get() != null) {', '                mStartSurfaceSupplier.get().onOverviewShownAtLaunch(', '                        mOverviewShownOnStart, getOnCreateTimestampMs());', '            }', '        });', '    }', '', '    @Override', '    protected void recordIntentToCreationTime(long timeMs) {', '        super.recordIntentToCreationTime(timeMs);', '        RecordHistogram.recordCustomTimesHistogram(""MobileStartup.IntentToCreationTime.TabbedMode"",', '                timeMs, 1, DateUtils.SECOND_IN_MILLIS * 30, 50);', '    }', '', '    @Override', '    protected boolean isStartedUpCorrectly(Intent intent) {', '        mWindowId = 0;', '        Bundle savedInstanceState = getSavedInstanceState();', '        int windowId = getExtraWindowIdFromIntent(intent);', '        if (savedInstanceState != null && savedInstanceState.containsKey(WINDOW_INDEX)) {', '            // Activity is recreated after destruction. |windowId| must not be valid in this case.', '            assert windowId == INVALID_WINDOW_ID;', '            mWindowId = savedInstanceState.getInt(WINDOW_INDEX, 0);', '        } else if (mMultiInstanceManager != null) {', ""            // |allocInstanceId| doesn't do any disk I/O that would add a long-running task"", '            // to pre-inflation startup.', '            boolean preferNew = getExtraPreferNewFromIntent(intent);', '            mWindowId = mMultiInstanceManager.allocInstanceId(windowId, getTaskId(), preferNew);', '        }', '        if (mWindowId == INVALID_WINDOW_ID) {', '            Log.i(TAG, ""Window ID not allocated. Finishing the activity"");', '            Toast.makeText(this, R.string.max_number_of_windows, Toast.LENGTH_LONG).show();', '            return false;', '        }', '', '        if (mMultiInstanceManager != null', '                && !mMultiInstanceManager.isStartedUpCorrectly(getTaskId())) {', '            return false;', '        }', '', '        return super.isStartedUpCorrectly(intent);', '    }', '', '    private static int getExtraWindowIdFromIntent(Intent intent) {', '        int windowId = IntentUtils.safeGetIntExtra(', '                intent, IntentHandler.EXTRA_WINDOW_ID, INVALID_WINDOW_ID);', '        return IntentUtils.isTrustedIntentFromSelf(intent) ? windowId : INVALID_WINDOW_ID;', '    }', '', '    private static boolean getExtraPreferNewFromIntent(Intent intent) {', '        return IntentUtils.safeGetBooleanExtra(intent, IntentHandler.EXTRA_PREFER_NEW, false);', '    }', '', '    @Override', '    public void terminateIncognitoSession() {', '        getTabModelSelector().getModel(true).closeAllTabs();', '    }', '', '    @Override', '    public boolean onMenuOrKeyboardAction(final int id, boolean fromMenu) {', '        final Tab currentTab = getActivityTab();', '        boolean currentTabIsNtp = isTabNtp(currentTab);', '        if (id == R.id.new_tab_menu_id) {', '            getTabModelSelector().getModel(false).commitAllTabClosures();', '            RecordUserAction.record(""MobileMenuNewTab"");', '            RecordUserAction.record(""MobileNewTabOpened"");', '            ReturnToChromeExperimentsUtil.onNewTabOpened();', '            reportNewTabShortcutUsed(false);', '            if (fromMenu) RecordUserAction.record(""MobileMenuNewTab.AppMenu"");', '', '            getTabCreator(false).launchNTP();', '', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '        } else if (id == R.id.new_incognito_tab_menu_id) {', '            if (IncognitoUtils.isIncognitoModeEnabled()) {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This action must be recorded before opening the incognito tab since UMA actions', '                // are dropped when an incognito tab is open.', '                RecordUserAction.record(""MobileMenuNewIncognitoTab"");', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '                reportNewTabShortcutUsed(true);', '                if (fromMenu) RecordUserAction.record(""MobileMenuNewIncognitoTab.AppMenu"");', '                getTabCreator(true).launchNTP();', '            }', '        } else if (id == R.id.all_bookmarks_menu_id) {', ""            // Note that 'currentTab' could be null in overview mode when start surface is"", '            // enabled.', '            getCompositorViewHolderSupplier().get().hideKeyboard(() -> {', '                BookmarkUtils.showBookmarkManager(', '                        ChromeTabbedActivity.this, getCurrentTabModel().isIncognito());', '            });', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_BOOKMARKS_MANAGER);', '            }', '', '            @BrowserProfileType', '            int type = getCurrentTabModel().isIncognito() ? BrowserProfileType.INCOGNITO', '                                                          : BrowserProfileType.REGULAR;', '            RecordHistogram.recordEnumeratedHistogram(', '                    ""Bookmarks.OpenBookmarkManager.PerProfileType"", type,', '                    BrowserProfileType.MAX_VALUE + 1);', '', '            RecordUserAction.record(""MobileMenuAllBookmarks"");', '        } else if (id == R.id.recent_tabs_menu_id) {', '            LoadUrlParams params =', '                    new LoadUrlParams(UrlConstants.RECENT_TABS_URL, PageTransition.AUTO_BOOKMARK);', '            boolean isInOverviewMode = isInOverviewMode();', '            if (isInOverviewMode && !isTablet()', '                    && ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                // When tapping the ""Recent tabs"" menu item from the overview page (Start surface or', '                // GTS), we will create the tab with the launch type FROM_START_SURFACE. Thus, if', '                // the back button is tapped on this ""Recent tabs"" page, it can go back to the', '                // overview page.', '                ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurface(', '                        params, getCurrentTabModel().isIncognito(), null);', '            } else if (currentTab != null) {', '                currentTab.loadUrl(params);', '            } else {', '                getTabCreator(getCurrentTabModel().isIncognito())', '                        .createNewTab(params, TabLaunchType.FROM_CHROME_UI, null);', '            }', '            if (isInOverviewMode) {', '                mOverviewModeController.hideOverview(true);', '            }', '', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_RECENT_TABS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuRecentTabs"");', '            ReturnToChromeExperimentsUtil.onRecentTabsOpened();', '        } else if (id == R.id.close_tab) {', '            getCurrentTabModel().closeTab(currentTab, true, false, true);', '            RecordUserAction.record(""MobileTabClosed"");', '        } else if (id == R.id.close_all_tabs_menu_id) {', '            // Close both incognito and normal tabs', '            getTabModelSelector().closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllTabs"");', '        } else if (id == R.id.close_all_incognito_tabs_menu_id) {', '            // Close only incognito tabs', '            getTabModelSelector().getModel(true).closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllIncognitoTabs"");', '        } else if (id == R.id.focus_url_bar) {', '            boolean isUrlBarVisible = !mOverviewModeController.overviewVisible()', '                    && (!isTablet() || getCurrentTabModel().getCount() != 0);', '            if (isUrlBarVisible) {', '                getToolbarManager().setUrlBarFocus(', '                        true, OmniboxFocusReason.MENU_OR_KEYBOARD_ACTION);', '            }', '        } else if (id == R.id.downloads_menu_id) {', '            OTRProfileID otrProfileID = null;', '            if (currentTab != null && currentTab.getWebContents() != null) {', '                Profile profile = Profile.fromWebContents(currentTab.getWebContents());', '                otrProfileID = profile != null ? profile.getOTRProfileID() : null;', '            }', '            DownloadUtils.showDownloadManager(', '                    this, currentTab, otrProfileID, DownloadOpenSource.MENU);', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_DOWNLOADS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuDownloadManager"");', '        } else if (id == R.id.open_recently_closed_tab) {', '            TabModel currentModel = mTabModelSelector.getCurrentModel();', '            if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedTab();', '            RecordUserAction.record(""MobileTabClosedUndoShortCut"");', '        } else if (id == R.id.enter_vr_id) {', '            VrModuleProvider.getDelegate().enterVrIfNecessary();', '        } else {', '            return super.onMenuOrKeyboardAction(id, fromMenu);', '        }', '        return true;', '    }', '', '    private boolean isTabNtp(Tab tab) {', '        return tab != null && UrlUtilities.isNTPUrl(tab.getUrl());', '    }', '', '    private boolean isTabRegularNtp(Tab tab) {', '        return isTabNtp(tab) && !tab.isIncognito();', '    }', '', '    private void onOmniboxFocusChanged(boolean hasFocus) {', '        mTabModalHandler.onOmniboxFocusChanged(hasFocus);', '    }', '', '    private void recordLauncherShortcutAction(boolean isIncognito) {', '        if (isIncognito) {', '            RecordUserAction.record(""Android.LauncherShortcut.NewIncognitoTab"");', '        } else {', '            RecordUserAction.record(""Android.LauncherShortcut.NewTab"");', '        }', '    }', '', '    @Override', '    public boolean handleBackPressed() {', '        if (!mUIWithNativeInitialized) return false;', '', '        if (getManualFillingComponent().handleBackPress()) return true;', '', '        if (exitFullscreenIfShowing()) {', '            return true;', '        }', '', '        // TODO(1091411): Find a better mechanism for back-press handling for features.', '        if (mRootUiCoordinator.getBottomSheetController().handleBackPress()) return true;', '', '        if (mTabModalHandler.handleBackPress()) return true;', '', '        final Tab currentTab = getActivityTab();', '        if (currentTab == null) {', '            moveTaskToBack(true);', '            return true;', '        }', '', '        // If we are in the tab switcher mode (not in the Start surface homepage) and not a tablet,', '        // then leave tab switcher mode on back.', '        if (mOverviewModeController.overviewVisible() && !isTablet()', '                && (mStartSurfaceSupplier.get() == null', '                        || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                                == StartSurfaceState.SHOWN_TABSWITCHER)) {', '            mOverviewModeController.hideOverview(true);', '            return true;', '        }', '', '        final WebContents webContents = currentTab.getWebContents();', '        if (webContents != null) {', '            RenderFrameHost focusedFrame = webContents.getFocusedFrame();', '            if (focusedFrame != null && focusedFrame.signalCloseWatcherIfActive()) return true;', '        }', '', '        if (getToolbarManager().back()) return true;', '', '        // If the current tab url is HELP_URL, then the back button should close the tab to', '        // get back to the previous state. The reason for startsWith check is that the', '        // actual redirected URL is a different system language based help url.', '        final @TabLaunchType int type = currentTab.getLaunchType();', '        final boolean helpUrl = currentTab.getUrl().getSpec().startsWith(HELP_URL_PREFIX);', '        if (type == TabLaunchType.FROM_CHROME_UI && helpUrl) {', '            getCurrentTabModel().closeTab(currentTab);', '            return true;', '        }', '', ""        // If we aren't in the overview mode, we handle the Tab with launchType"", '        // TabLaunchType.FROM_START_SURFACE or has ""OpenedFromStart"" property.', '        if (!mOverviewModeController.overviewVisible()', '                && (type == TabLaunchType.FROM_START_SURFACE', '                        || StartSurfaceUserData.isOpenedFromStart(currentTab))) {', '            if (StartSurfaceUserData.getKeepTab(currentTab)', '                    || StartSurfaceUserData.isOpenedFromStart(currentTab)) {', '                // If the current tab is created from the start surface with the keepTab property,']}, {'a': ['                // shows the Start surface non-incognito homepage to prevent a loop between the', '                // current tab and previous overview mode. Once in the Start surface, it will close', '                // Chrome if back button is tapped again.'], 'b': ['                // shows the Start surface Homepage to prevent a loop between the current tab and', '                // previous overview mode. Once in the Start surface, it will close Chrome if back', '                // button is tapped again.']}, {'ab': ['                if (currentTab.isIncognito()) {', '                    if (!currentTab.isClosing()) {', '                        getCurrentTabModel().closeTab(currentTab);', '                    }']}, {'a': ['                    mTabModelSelector.selectModel(/*incognito=*/false);'], 'b': ['                    mTabModelSelector.selectModel(false);']}, {'ab': ['                }', '                showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '            } else {', '                // Otherwise, clicking the back button should close the tab and go back to the', '                // previous overview mode.', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS);', '                if (!currentTab.isClosing()) {', '                    getCurrentTabModel().closeTab(currentTab);', '                }', '            }', '            return true;', '        }', '', '        final boolean shouldCloseTab = backShouldCloseTab(currentTab);', '', '        // Minimize the app if either:', '        // - we decided not to close the tab', '        // - we decided to close the tab, but it was opened by an external app, so we will go', '        //   exit Chrome on top of closing the tab', '        final boolean minimizeApp =', '                !shouldCloseTab || TabAssociatedApp.isOpenedFromExternalApp(currentTab);', '        if (minimizeApp) {', '            if (shouldCloseTab) {', '                sendToBackground(currentTab);', '                return true;', '            } else {', '                sendToBackground(null);', '                return true;', '            }', '        } else if (shouldCloseTab) {', '            currentTab.getWebContents().dispatchBeforeUnload(false);', '            return true;', '        }', '', '        assert false : ""The back button should have already been handled by this point"";', '        return false;', '    }', '', '    /**', '     * [true]: Reached the bottom of the back stack on a tab the user did not explicitly', '     * create (i.e. it was created by an external app or opening a link in background, etc).', '     * [false]: Reached the bottom of the back stack on a tab that the user explicitly', '     * created (e.g. selecting ""new tab"" from menu).', '     *', '     * @return Whether pressing the back button on the provided Tab should close the Tab.', '     */', '    @Override', '    public boolean backShouldCloseTab(Tab tab) {', '        if (!tab.isInitialized()) {', '            return false;', '        }', '        @TabLaunchType', '        int type = tab.getLaunchType();', '', '        return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_EXTERNAL_APP', '                || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND', '                || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                || (type == TabLaunchType.FROM_RESTORE', '                        && CriticalPersistedTabData.from(tab).getParentId() != Tab.INVALID_TAB_ID);', '    }', '', '    /**', '     * Sends this Activity to the background.', '     *', '     * @param tabToClose Tab that will be closed once the app is not visible.', '     */', '    private void sendToBackground(@Nullable final Tab tabToClose) {', '        Log.i(TAG, ""sendToBackground(): "" + tabToClose);', '        moveTaskToBack(true);', '        if (tabToClose != null) {', ""            // In the case of closing a tab upon minimization, don't allow the close action to"", ""            // happen until after our app is minimized to make sure we don't get a brief glimpse of"", '            // the newly active tab before we exit Chrome.', '            //', ""            // If the runnable doesn't run before the Activity dies, Chrome won't crash but the tab"", ""            // won't be closed (crbug.com/587565)."", '            mHandler.postDelayed(() -> {', '                boolean hasNextTab =', '                        getCurrentTabModel().getNextTabIfClosed(tabToClose.getId()) != null;', '                getCurrentTabModel().closeTab(tabToClose, false, true, false);', '', '                // If there is no next tab to open, enter overview mode.', '                if (!hasNextTab) showOverview(StartSurfaceState.SHOWING_START);', '            }, CLOSE_TAB_ON_MINIMIZE_DELAY_MS);', '        }', '    }', '', '    @Override', '    public boolean moveTaskToBack(boolean nonRoot) {', '        try {', '            return super.moveTaskToBack(nonRoot);', '        } catch (NullPointerException e) {', '            // Work around framework bug described in https://crbug.com/817567.', '            finish();', '            return true;', '        }', '    }', '', '    /**', '     * Launch a URL from an intent.', '     *', '     * @param url           The url from the intent.', '     * @param referer       Optional referer URL to be used.', '     * @param headers       Optional headers to be sent when opening the URL.', '     * @param externalAppId External app id.', '     * @param forceNewTab   Whether to force the URL to be launched in a new tab or to fall', '     *                      back to the default behavior for making that determination.', '     * @param isRendererInitiated Whether the intent is originally from browser renderer process.', '     * @param initiatorOrigin Origin that initiates the intent.', '     * @param intent        The original intent.', '     */', '    private Tab launchIntent(', '            LoadUrlParams loadUrlParams, String externalAppId, boolean forceNewTab, Intent intent) {', '        if (mUIWithNativeInitialized && !UrlUtilities.isNTPUrl(loadUrlParams.getUrl())) {', '            mOverviewModeController.hideOverview(false);', '            getToolbarManager().finishAnimations();', '        }', '        if (IntentHandler.wasIntentSenderChrome(intent)) {', '            // If the intent was launched by chrome, open the new tab in the appropriate model.', '            boolean isIncognito = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB, false);', '            @TabLaunchType', '            Integer launchType = IntentHandler.getTabLaunchType(intent);', '            if (launchType == null) {', '                if (IntentUtils.safeGetBooleanExtra(', '                            intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false)) {', '                    launchType = TabLaunchType.FROM_LAUNCHER_SHORTCUT;', '                } else if (IntentUtils.safeGetBooleanExtra(', '                                   intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false)) {', '                    launchType = TabLaunchType.FROM_APP_WIDGET;', '                } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                    launchType = TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB;', '                } else {', '                    // Using FROM_LINK ensures the tab is parented to the current tab, which allows', '                    // the back button to close these tabs and restore selection to the previous', '                    // tab.', '                    launchType = TabLaunchType.FROM_LINK;', '                }', '            }', '            return getTabCreator(isIncognito).createNewTab(loadUrlParams, launchType, null, intent);', '        }', '', '        // Check if the tab is being created from a Reader Mode navigation.', '        if (ReaderModeManager.isEnabled() && ReaderModeManager.isReaderModeCreatedIntent(intent)) {', '            Bundle extras = intent.getExtras();', '            int readerParentId = IntentUtils.safeGetInt(', '                    extras, ReaderModeManager.EXTRA_READER_MODE_PARENT, Tab.INVALID_TAB_ID);', '            extras.remove(ReaderModeManager.EXTRA_READER_MODE_PARENT);', '            // Set the parent tab to the tab that Reader Mode started from.', '            if (readerParentId != Tab.INVALID_TAB_ID && mTabModelSelector != null) {', '                return getCurrentTabCreator().createNewTab(', '                        new LoadUrlParams(loadUrlParams.getUrl(), PageTransition.LINK),', '                        TabLaunchType.FROM_LINK, mTabModelSelector.getTabById(readerParentId));', '            }', '        }', '', '        return getTabCreator(false).launchUrlFromExternalApp(', '                loadUrlParams, externalAppId, forceNewTab, intent);', '    }', '', '    private void showOverview(@StartSurfaceState int state) {', '        showOverview(state, NewTabPageLaunchOrigin.UNKNOWN);', '    }', '', '    // TODO(crbug.com/1115757): After crrev.com/c/2315823, Overview state and Startsurface state are', '    // two different things, we actual can split this into two methods: showOverview() and', ""    // showStartSurface(state). Let's do some auditing and clean up before perform the actual split."", '    private void showOverview(', '            @StartSurfaceState int state, @NewTabPageLaunchOrigin int launchOrigin) {', '        assert (state == StartSurfaceState.SHOWING_TABSWITCHER', '                || state == StartSurfaceState.SHOWING_HOMEPAGE', '                || state == StartSurfaceState.SHOWING_PREVIOUS', '                || state == StartSurfaceState.SHOWING_START);', '        if (mIsAccessibilityTabSwitcherEnabled != null && mIsAccessibilityTabSwitcherEnabled', '                && mOverviewModeController != null) {', '            // TODO(1200727): This is a temporary fix that should be removed once grid tab switcher', '            //                is completely launched. The ""start surface"" is now created regardless', '            //                of the state of accessibility, so we check that mode first and try', '            //                showing the overview list before going to the start surface.', '            mOverviewModeController.showOverview(false);', '        } else if (mStartSurfaceSupplier.get() != null) {', '            if (ReturnToChromeExperimentsUtil.shouldHideStartSurfaceWithAccessibilityOn(this)', '                    || !HomepageManager.isHomepageEnabled()) {', '                state = StartSurfaceState.SHOWING_TABSWITCHER;', '            }', '            mStartSurfaceSupplier.get().getController().setOverviewState(state, launchOrigin);', '        }', '', '        if (mOverviewModeController == null) return;', '', '        if (mOverviewModeController.overviewVisible()) {', '            if (didFinishNativeInitialization()) {', '                getCompositorViewHolderSupplier().get().hideKeyboard(() -> {});', '            }', '            return;', '        }', '', '        Tab currentTab = getActivityTab();', ""        // If we don't have a current tab, show the overview mode."", '        if (currentTab == null) {', '            mOverviewModeController.showOverview(false);', '        } else {', '            getCompositorViewHolderSupplier().get().hideKeyboard(', '                    () -> mOverviewModeController.showOverview(true));', '            updateAccessibilityState(false);', '            TasksUma.recordTabLaunchType(getCurrentTabModel());', '        }', '    }', '', '    private void hideOverview() {', '        assert (mOverviewModeController.overviewVisible());', '        if (getCurrentTabModel().getCount() != 0) {', ""            // Don't hide overview if current tab stack is empty()"", '            mOverviewModeController.hideOverview(true);', '            updateAccessibilityState(true);', '        }', '    }', '', '    /**', '     * @return Whether opening a new tab is handled by the Start surface. It may show the Start', '     * surface, or open a new tab with the omnibox get focused, depending on the value of', '     * {@link StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB}.', '     */', '    private boolean showStartSurfaceHomeForNTP(boolean isNTP, boolean incognito, Tab parentTab,', '            @NewTabPageLaunchOrigin int launchOrigin) {', '        if (!isNTP', '                || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                        this, incognito, isTablet())) {', '            return false;', '        }', '', '        getTabModelSelector().selectModel(incognito);', '        if (StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB.getValue()', '                && launchOrigin != NewTabPageLaunchOrigin.WEB_FEED) {', '            Runnable emptyTabCloseCallback = isInOverviewMode() ? () -> {', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS, launchOrigin);', '            } : null;', '            ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurfaceAsNewTab(null,', '                    PageTransition.AUTO_TOPLEVEL, incognito, parentTab, getCurrentTabModel(),', '                    emptyTabCloseCallback);', '        } else if (TabUiFeatureUtilities.supportInstantStart(isTablet(), this)', '                || (getTabModelSelector().isTabStateInitialized() && isLayoutManagerCreated())) {', '            showOverview(StartSurfaceState.SHOWING_HOMEPAGE, launchOrigin);', '        }', '        return true;', '    }', '', '    private void updateAccessibilityState(boolean enabled) {', '        Tab currentTab = getActivityTab();', '        WebContents webContents = currentTab != null ? currentTab.getWebContents() : null;', '        if (webContents != null) {', '            WebContentsAccessibility.fromWebContents(webContents).setState(enabled);', '        }', '    }', '', '    @Override', '    public void onSaveInstanceState(Bundle outState) {', '        super.onSaveInstanceState(outState);', '        CipherFactory.getInstance().saveToBundle(outState);', '        outState.putInt(', '                WINDOW_INDEX, TabWindowManagerSingleton.getInstance().getIndexForWindow(this));', '        Boolean is_incognito = getCurrentTabModel().isIncognito();', '        outState.putBoolean(IS_INCOGNITO_SELECTED, is_incognito);', ""        // If it's Incognito and native is initialized and profile exists, serialize duration"", '        // service state.', '        if (is_incognito && ProfileManager.isInitialized()) {', '            AndroidSessionDurationsServiceState.serializeFromNative(', '                    outState, getCurrentTabModel().getProfile());', '        }', '    }', '', '    @Override', '    public void onDestroyInternal() {', '        if (mCallbackController != null) {', '            mCallbackController.destroy();', '            mCallbackController = null;', '        }', '', '        if (mTabModelSelectorTabObserver != null) {', '            mTabModelSelectorTabObserver.destroy();', '            mTabModelSelectorTabObserver = null;', '        }', '', '        if (mTabModelObserver != null) mTabModelObserver.destroy();', '', '        if (mUndoBarPopupController != null) {', '            mUndoBarPopupController.destroy();', '            mUndoBarPopupController = null;', '        }', '', '        if (mAppIndexingUtil != null) {', '            mAppIndexingUtil.destroy();', '            mAppIndexingUtil = null;', '        }', '', '        if (mStartSurfaceSupplier.get() != null) {', '            mStartSurfaceSupplier.get().destroy();', '        }', '', '        if (mStartupPaintPreviewHelperSupplier != null) {', '            mStartupPaintPreviewHelperSupplier.destroy();', '        }', '', '        if (mJankTracker != null) {', '            mJankTracker.destroy();', '            mJankTracker = null;', '        }', '', '        IncognitoTabHostRegistry.getInstance().unregister(mIncognitoTabHost);', '', '        TabObscuringHandler tabObscuringHandler = getTabObscuringHandler();', '        if (tabObscuringHandler != null) {', '            getTabObscuringHandler().removeObserver(mCompositorViewHolder);', '            getTabObscuringHandler().removeObserver(mOverviewListLayout);', '        }', '', '        if (isTablet()) ChromeAccessibilityUtil.get().removeObserver(mCompositorViewHolder);', '        ChromeAccessibilityUtil.get().removeObserver(this);', '        ChromeAccessibilityUtil.get().removeObserver(mLayoutManager);', '', '        if (mTabDelegateFactory != null) mTabDelegateFactory.destroy();', '', '        mAppLaunchDrawBlocker.destroy();', '', '        super.onDestroyInternal();', '    }', '', '    @Override', '    protected void destroyTabModels() {', '        if (mTabModelOrchestrator != null) {', '            mTabModelOrchestrator.destroy();', '        }', '    }', '', '    @Override', '    public void onTrimMemory(int level) {', '        super.onTrimMemory(level);', '        if (ChromeApplicationImpl.isSevereMemorySignal(level)) {', '            NativePageAssassin.getInstance().freezeAllHiddenPages();', '        }', '    }', '', '    @Override', '    public boolean dispatchKeyEvent(KeyEvent event) {', '        Boolean result = KeyboardShortcuts.dispatchKeyEvent(event, mUIWithNativeInitialized,', '                getFullscreenManager(), /* menuOrKeyboardActionController= */ this);', '        return result != null ? result : super.dispatchKeyEvent(event);', '    }', '', '    @Override', '    public boolean onKeyDown(int keyCode, KeyEvent event) {', '        if (!mUIWithNativeInitialized) {', '            return super.onKeyDown(keyCode, event);', '        }', '        // Detecting a long press of the back button via onLongPress is broken in Android N.', '        // To work around this, use a postDelayed, which is supported in all versions.', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()', '                && !getFullscreenManager().getPersistentFullscreenMode()) {', '            if (mShowHistoryRunnable == null) mShowHistoryRunnable = this::showFullHistorySheet;', '            mHandler.postDelayed(mShowHistoryRunnable, ViewConfiguration.getLongPressTimeout());', '            return super.onKeyDown(keyCode, event);', '        }', '        boolean isCurrentTabVisible = !mOverviewModeController.overviewVisible()', '                && (!isTablet() || getCurrentTabModel().getCount() != 0);', '        return KeyboardShortcuts.onKeyDown(event, isCurrentTabVisible, true, getTabModelSelector(),', '                       /* menuOrKeyboardActionController= */ this, getToolbarManager())', '                || super.onKeyDown(keyCode, event);', '    }', '', '    private void showFullHistorySheet() {', '        ((TabbedRootUiCoordinator) mRootUiCoordinator).showFullHistorySheet();', '    }', '', '    @Override', '    public boolean onKeyUp(int keyCode, KeyEvent event) {', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()) {', '            mHandler.removeCallbacks(mShowHistoryRunnable);', '            mShowHistoryRunnable = null;', '            if (event.getEventTime() - event.getDownTime()', '                            >= ViewConfiguration.getLongPressTimeout()', '                    && NavigationSheet.isInstanceShowing(', '                            mRootUiCoordinator.getBottomSheetController())) {', '                // If tab history popup is showing, do not process the keyUp event', '                // which will dismiss it immediately.', '                return true;', '            }', '        }', '        return super.onKeyUp(keyCode, event);', '    }', '', '    @VisibleForTesting', '    public boolean hasPendingNavigationRunnableForTesting() {', '        ThreadUtils.assertOnUiThread();', '        return mShowHistoryRunnable != null;', '    }', '', '    @Override', '    public void onProvideKeyboardShortcuts(', '            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {', '        data.addAll(KeyboardShortcuts.createShortcutGroup(this));', '    }', '', '    @VisibleForTesting', '    public View getTabsView() {', '        return getCompositorViewHolderSupplier().get();', '    }', '', '    @VisibleForTesting', '    public LayoutManagerChrome getLayoutManager() {', '        return (LayoutManagerChrome) getCompositorViewHolderSupplier().get().getLayoutManager();', '    }', '', '    @VisibleForTesting', '    public Layout getOverviewListLayout() {', '        return getLayoutManager().getOverviewListLayout();', '    }', '', '    @VisibleForTesting', '    public StartSurface getStartSurface() {', '        return mStartSurfaceSupplier.get();', '    }', '', '    private ComposedBrowserControlsVisibilityDelegate getAppBrowserControlsVisibilityDelegate() {', '        // TODO(jinsukkim): Move this to RootUiCoordinator.', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getAppBrowserControlsVisibilityDelegate();', '    }', '', '    @Override', '    protected ModalDialogManager createModalDialogManager() {', '        ModalDialogManager manager = super.createModalDialogManager();', '        // TODO(crbug.com/1157310): Transition this::method refs to dedicated suppliers.', '        mTabModalHandler = new TabModalLifetimeHandler(this, getLifecycleDispatcher(), manager,', '                this::getAppBrowserControlsVisibilityDelegate, this::getTabObscuringHandler,', '                this::getToolbarManager, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), this::getBrowserControlsManager,', '                this::getFullscreenManager);', '        return manager;', '    }', '', '    // App Menu related code -----------------------------------------------------------------------', '', '    @Override', '    public boolean canShowAppMenu() {', '        // The popup menu relies on the model created during the full UI initialization, so do not', '        // attempt to show the menu until the UI creation has finished.', '        if (!mUIWithNativeInitialized) return false;', '', ""        // If the current active tab is showing a tab modal dialog, an app menu shouldn't be shown"", '        // in any cases, e.g. when a hardware menu button is clicked.', '        Tab tab = getActivityTab();', '        if (tab != null && ChromeTabModalPresenter.isDialogShowing(tab)) return false;', '', '        return super.canShowAppMenu();', '    }', '', '    @Override', '    public boolean isInOverviewMode() {', '        return mOverviewModeController != null && mOverviewModeController.overviewVisible();', '    }', '', '    @Override', '    protected IntentHandlerDelegate createIntentHandlerDelegate() {', '        return new InternalIntentDelegate();', '    }', '', '    @Override', '    public void onSceneChange(Layout layout) {', '        super.onSceneChange(layout);', '        if (!layout.shouldDisplayContentOverlay()) mTabModelSelector.onTabsViewShown();', '    }', '', '    /**', '     * Writes the tab state to disk.', '     */', '    @VisibleForTesting', '    public void saveState() {', '        mTabModelOrchestrator.saveState();', '    }', '', '    @Override', '    public void onEnterVr() {', '        super.onEnterVr();', '        mControlContainer.setVisibility(View.INVISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate == null) {', '            mVrBrowserControlsVisibilityDelegate =', '                    new BrowserControlsVisibilityDelegate(BrowserControlsState.BOTH);', '            getAppBrowserControlsVisibilityDelegate().addDelegate(', '                    mVrBrowserControlsVisibilityDelegate);', '        }', '        mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.HIDDEN);', '    }', '', '    @Override', '    public void onExitVr() {', '        super.onExitVr();', '        mControlContainer.setVisibility(View.VISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate != null) {', '            mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.BOTH);', '        }', '    }', '', '    @Override', '    protected void applyThemeOverlays() {', '        super.applyThemeOverlays();', '', '        if (TabManagementModuleProvider.getDelegate() != null) {', '            TabManagementModuleProvider.getDelegate().applyThemeOverlays(this);', '        }', '    }', '', '    @Override', '    protected boolean supportsDynamicColors() {', '        return CachedFeatureFlags.isEnabled(ChromeFeatureList.DYNAMIC_COLOR_ANDROID);', '    }', '', '    /**', '     * Reports that a new tab launcher shortcut was selected or an action equivalent to a shortcut', '     * was performed.', '     * @param isIncognito Whether the shortcut or action created a new incognito tab.', '     */', '    @TargetApi(Build.VERSION_CODES.N_MR1)', '    private void reportNewTabShortcutUsed(boolean isIncognito) {', '        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) return;', '', '        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);', '        shortcutManager.reportShortcutUsed(', '                isIncognito ? ""new-incognito-tab-shortcut"" : ""new-tab-shortcut"");', '    }', '', '    @VisibleForTesting', '    public MultiInstanceManager getMultiInstanceMangerForTesting() {', '        return mMultiInstanceManager;', '    }', '', '    @VisibleForTesting', '    public ChromeNextTabPolicySupplier getNextTabPolicySupplier() {', '        return (ChromeNextTabPolicySupplier) mNextTabPolicySupplier;', '    }', '}', '']}]",chromium%2Fsrc~main~Ib63fff1d02f6696a61891dd6449012e0c7a5d027,8731f872fe833f2c64a8604ff02ad616355d9fed,chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java,140fa212_552b55e6_before.java,140fa212_552b55e6_after.java,ChromeTabbedActivity::handleBackPressed,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } VAR_785 ( false ) ; } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }","We could also review this closing VAR_255 check. That way, the VAR_251 VAR_255 is VAR_229 closed when clicking VAR_906 button, to be consistent with normal VAR_255 logic. WDYT?"
1,7fa9753f_9d8ef123,2168.0,I think it is fine to close the Tab.,,,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser;', '', 'import android.annotation.TargetApi;', 'import android.app.ActivityManager;', 'import android.content.ComponentName;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.content.pm.ApplicationInfo;', 'import android.content.pm.ShortcutManager;', 'import android.os.Build;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.text.TextUtils;', 'import android.text.format.DateUtils;', 'import android.util.Pair;', 'import android.view.KeyEvent;', 'import android.view.KeyboardShortcutGroup;', 'import android.view.Menu;', 'import android.view.View;', 'import android.view.View.OnClickListener;', 'import android.view.ViewConfiguration;', 'import android.view.ViewGroup;', 'import android.view.Window;', 'import android.view.WindowManager;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', 'import androidx.lifecycle.Lifecycle;', 'import androidx.lifecycle.LifecycleObserver;', 'import androidx.lifecycle.LifecycleRegistry;', '', 'import org.chromium.base.CallbackController;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.MemoryPressureListener;', 'import org.chromium.base.ThreadUtils;', 'import org.chromium.base.TraceEvent;', 'import org.chromium.base.annotations.UsedByReflection;', 'import org.chromium.base.jank_tracker.JankTrackerImpl;', 'import org.chromium.base.library_loader.LibraryLoader;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.supplier.ObservableSupplierImpl;', 'import org.chromium.base.supplier.OneShotCallback;', 'import org.chromium.base.supplier.OneshotSupplier;', 'import org.chromium.base.supplier.OneshotSupplierImpl;', 'import org.chromium.base.supplier.Supplier;', 'import org.chromium.base.supplier.UnownedUserDataSupplier;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.cc.input.BrowserControlsState;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.IntentHandler.IntentHandlerDelegate;', 'import org.chromium.chrome.browser.IntentHandler.TabOpenType;', 'import org.chromium.chrome.browser.accessibility_tab_switcher.OverviewListLayout;', 'import org.chromium.chrome.browser.app.ChromeActivity;', 'import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.metrics.TabbedActivityLaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.ChromeNextTabPolicySupplier;', 'import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;', 'import org.chromium.chrome.browser.app.tabmodel.TabWindowManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.TabbedModeTabModelOrchestrator;', 'import org.chromium.chrome.browser.bookmarks.BookmarkUtils;', 'import org.chromium.chrome.browser.browserservices.intents.WebappConstants;', 'import org.chromium.chrome.browser.compositor.CompositorViewHolder;', 'import org.chromium.chrome.browser.compositor.bottombar.ephemeraltab.EphemeralTabCoordinator;', 'import org.chromium.chrome.browser.compositor.layouts.Layout;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChrome;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromePhone;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromeTablet;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeBehavior;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeController;', 'import org.chromium.chrome.browser.cookies.CookiesFetcher;', 'import org.chromium.chrome.browser.crypto.CipherFactory;', 'import org.chromium.chrome.browser.dependency_injection.ChromeActivityComponent;', 'import org.chromium.chrome.browser.device.DeviceClassManager;', 'import org.chromium.chrome.browser.dom_distiller.ReaderModeManager;', 'import org.chromium.chrome.browser.download.DownloadNotificationService;', 'import org.chromium.chrome.browser.download.DownloadOpenSource;', 'import org.chromium.chrome.browser.download.DownloadUtils;', 'import org.chromium.chrome.browser.feature_engagement.TrackerFactory;', 'import org.chromium.chrome.browser.feed.FeedSurfaceTracker;', 'import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;', 'import org.chromium.chrome.browser.flags.ActivityType;', 'import org.chromium.chrome.browser.flags.CachedFeatureFlags;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.fonts.FontPreloader;', 'import org.chromium.chrome.browser.gesturenav.NavigationSheet;', 'import org.chromium.chrome.browser.homepage.HomepageManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationPresenceController;', 'import org.chromium.chrome.browser.incognito.IncognitoProfileDestroyer;', 'import org.chromium.chrome.browser.incognito.IncognitoStartup;', 'import org.chromium.chrome.browser.incognito.IncognitoTabLauncher;', 'import org.chromium.chrome.browser.incognito.IncognitoTabSnapshotController;', 'import org.chromium.chrome.browser.incognito.IncognitoUtils;', 'import org.chromium.chrome.browser.infobar.DataReductionPromoInfoBar;', 'import org.chromium.chrome.browser.infobar.SyncErrorInfoBar;', 'import org.chromium.chrome.browser.layouts.LayoutStateProvider;', 'import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.metrics.AndroidSessionDurationsServiceState;', 'import org.chromium.chrome.browser.metrics.LaunchMetrics;', 'import org.chromium.chrome.browser.metrics.MainIntentBehaviorMetrics;', 'import org.chromium.chrome.browser.modaldialog.ChromeTabModalPresenter;', 'import org.chromium.chrome.browser.modaldialog.TabModalLifetimeHandler;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceChromeTabbedActivity;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceManager;', 'import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;', 'import org.chromium.chrome.browser.native_page.NativePageAssassin;', 'import org.chromium.chrome.browser.navigation_predictor.NavigationPredictorBridge;', 'import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;', 'import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;', 'import org.chromium.chrome.browser.ntp.NewTabPageUma;', 'import org.chromium.chrome.browser.ntp.NewTabPageUtils;', 'import org.chromium.chrome.browser.omnibox.OmniboxFocusReason;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelper;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelperSupplier;', 'import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.profiles.OTRProfileID;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.profiles.ProfileManager;', 'import org.chromium.chrome.browser.reengagement.ReengagementNotificationController;', 'import org.chromium.chrome.browser.search_engines.SearchEngineChoiceNotification;', 'import org.chromium.chrome.browser.settings.SettingsLauncherImpl;', 'import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;', 'import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;', 'import org.chromium.chrome.browser.survey.ChromeSurveyController;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorPromptUtils;', 'import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.tab.TabAssociatedApp;', 'import org.chromium.chrome.browser.tab.TabCreationState;', 'import org.chromium.chrome.browser.tab.TabDelegateFactory;', 'import org.chromium.chrome.browser.tab.TabLaunchType;', 'import org.chromium.chrome.browser.tab.TabSelectionType;', 'import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedAppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedRootUiCoordinator;', 'import org.chromium.chrome.browser.tabmodel.ChromeTabCreator;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHost;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostRegistry;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostUtils;', 'import org.chromium.chrome.browser.tabmodel.NextTabPolicy.NextTabPolicySupplier;', 'import org.chromium.chrome.browser.tabmodel.TabModel;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelector;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorBase;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabModelObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelUtils;', 'import org.chromium.chrome.browser.tabmodel.TabWindowManager;', 'import org.chromium.chrome.browser.tasks.ConditionalTabStripUtils;', 'import org.chromium.chrome.browser.tasks.EngagementTimeUtil;', 'import org.chromium.chrome.browser.tasks.JourneyManager;', 'import org.chromium.chrome.browser.tasks.ReturnToChromeExperimentsUtil;', 'import org.chromium.chrome.browser.tasks.TasksUma;', 'import org.chromium.chrome.browser.tasks.tab_management.TabGroupUi;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementDelegate;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementModuleProvider;', 'import org.chromium.chrome.browser.tasks.tab_management.TabUiFeatureUtilities;', 'import org.chromium.chrome.browser.toolbar.ToolbarButtonInProductHelpController;', 'import org.chromium.chrome.browser.toolbar.ToolbarIntentMetadata;', 'import org.chromium.chrome.browser.toolbar.ToolbarManager;', 'import org.chromium.chrome.browser.toolbar.top.ToolbarControlContainer;', 'import org.chromium.chrome.browser.translate.TranslateIntentHandler;', 'import org.chromium.chrome.browser.ui.AppLaunchDrawBlocker;', 'import org.chromium.chrome.browser.ui.RootUiCoordinator;', 'import org.chromium.chrome.browser.ui.TabObscuringHandler;', 'import org.chromium.chrome.browser.ui.appmenu.AppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.undo_tab_close_snackbar.UndoBarController;', 'import org.chromium.chrome.browser.usage_stats.UsageStatsService;', 'import org.chromium.chrome.browser.util.ChromeAccessibilityUtil;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.chrome.features.start_surface.StartSurface;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.chrome.features.start_surface.StartSurfaceState;', 'import org.chromium.chrome.features.start_surface.StartSurfaceUserData;', 'import org.chromium.components.browser_ui.settings.SettingsLauncher;', 'import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;', 'import org.chromium.components.browser_ui.util.ComposedBrowserControlsVisibilityDelegate;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.embedder_support.util.UrlUtilities;', 'import org.chromium.components.feature_engagement.EventConstants;', 'import org.chromium.components.messages.MessageDispatcherProvider;', 'import org.chromium.components.profile_metrics.BrowserProfileType;', 'import org.chromium.components.webapps.ShortcutSource;', 'import org.chromium.content_public.browser.LoadUrlParams;', 'import org.chromium.content_public.browser.NavigationHandle;', 'import org.chromium.content_public.browser.RenderFrameHost;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.content_public.browser.WebContents;', 'import org.chromium.content_public.browser.WebContentsAccessibility;', 'import org.chromium.content_public.common.ContentSwitches;', 'import org.chromium.ui.base.PageTransition;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.widget.Toast;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.HashSet;', 'import java.util.List;', 'import java.util.Locale;', '', '/**', ' * This is the main activity for ChromeMobile when not running in document mode.  All the tabs', ' * are accessible via a chrome specific tab switching UI.', ' */', 'public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>', '        implements ChromeAccessibilityUtil.Observer {', '    private static final String TAG = ""ChromeTabbedActivity"";', '', '    private static final String HELP_URL_PREFIX = ""https://support.google.com/chrome/"";', '', '    protected static final String WINDOW_INDEX = ""window_index"";', '', '    private static final String IS_INCOGNITO_SELECTED = ""is_incognito_selected"";', '', '    private static final int INVALID_WINDOW_ID = TabWindowManager.INVALID_WINDOW_INDEX;', '', '    // How long to delay closing the current tab when our app is minimized.  Have to delay this', ""    // so that we don't show the contents of the next tab while minimizing."", '    private static final long CLOSE_TAB_ON_MINIMIZE_DELAY_MS = 500;', '', '    // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs', '    // restore. This is needed because we do not know when reading PartnerBrowserCustomizations', '    // provider will be finished.', '    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;', '', '    /**', '     * Sending an intent with this action to Chrome will cause it to close all tabs', '     * (iff the --enable-test-intents command line flag is set). If a URL is supplied in the', '     * intent data, this will be loaded and unaffected by the close all action.', '     */', '    private static final String ACTION_CLOSE_TABS =', '            ""com.google.android.apps.chrome.ACTION_CLOSE_TABS"";', '', '    @VisibleForTesting', '    public static final String STARTUP_UMA_HISTOGRAM_SUFFIX = "".Tabbed"";', '', '    // Name of the ChromeTabbedActivity alias that handles MAIN intents.', '    public static final String MAIN_LAUNCHER_ACTIVITY_NAME = ""com.google.android.apps.chrome.Main"";', '', '    public static final SettingsLauncher SETTINGS_LAUNCHER = new SettingsLauncherImpl();', '', '    public static final HashSet<String> TABBED_MODE_COMPONENT_NAMES = new HashSet<String>() {', '        {', '            add(ChromeTabbedActivity.class.getName());', '            add(MultiInstanceChromeTabbedActivity.class.getName());', '            add(ChromeTabbedActivity2.class.getName());', '            add(MAIN_LAUNCHER_ACTIVITY_NAME);', '        }', '    };', '', '    /**', '     * Identifies a histogram to use in {@link #maybeDispatchExplicitMainViewIntent(Intent, int)}.', '     */', '    @IntDef({DispatchedBy.ON_CREATE, DispatchedBy.ON_NEW_INTENT})', '    @Retention(RetentionPolicy.SOURCE)', '    private @interface DispatchedBy {', '        int ON_CREATE = 1;', '        int ON_NEW_INTENT = 2;', '    }', '', '    // Count histogram used to track number of tabs when we show the Overview on Return to Chrome.', '    private static final String TAB_COUNT_ON_RETURN = ""Tabs.TabCountOnStartScreenShown"";', '', '    private final MainIntentBehaviorMetrics mMainIntentMetrics;', '    private @Nullable MultiInstanceManager mMultiInstanceManager;', '', '    private UndoBarController mUndoBarPopupController;', '', '    private LayoutManagerChrome mLayoutManager;', '', '    private ViewGroup mContentContainer;', '', '    private ToolbarControlContainer mControlContainer;', '', '    private TabbedModeTabModelOrchestrator mTabModelOrchestrator;', '    private TabModelSelectorBase mTabModelSelector;', '    private TabModelSelectorTabObserver mTabModelSelectorTabObserver;', '    private TabModelSelectorTabModelObserver mTabModelObserver;', '', '    private BrowserControlsVisibilityDelegate mVrBrowserControlsVisibilityDelegate;', '    private TabModalLifetimeHandler mTabModalHandler;', '', '    private boolean mUIWithNativeInitialized;', '', '    private Boolean mIsAccessibilityTabSwitcherEnabled;', '', '    private LocaleManager mLocaleManager;', '', '    private AppIndexingUtil mAppIndexingUtil;', '', '    private Runnable mShowHistoryRunnable;', '', '    private CompositorViewHolder mCompositorViewHolder;', '    private OverviewListLayout mOverviewListLayout;', '    /**', '     * Keeps track of whether or not a specific tab was created based on the startup intent.', '     */', '    private boolean mCreatedTabOnStartup;', '', '    // Whether or not the initial tab is being created.', '    private boolean mPendingInitialTabCreation;', '', '    // Whether {@link setInitialOverviewState()} has been called within the current onStart/onStop', '    // session.', '    private boolean mHasDeterminedOverviewStateForCurrentSession;', '    /**', '     *  Keeps track of the pref for the last time since this activity was stopped.', '     */', '    private ChromeInactivityTracker mInactivityTracker;', '', ""    // This is the cached value of mIntentHandler#shouldIgnoreIntent and shouldn't be read directly."", '    // Use #shouldIgnoreIntent instead.', '    private Boolean mShouldIgnoreIntent;', '    /*', '     *  Listens to FrameMetrics and records jank metrics.', '     */', '    private JankTrackerImpl mJankTracker;', '', '    // Supplier for a dependency to inform about the type of intent used to launch Chrome.', '    private OneshotSupplierImpl<ToolbarIntentMetadata> mIntentMetadataOneshotSupplier =', '            new OneshotSupplierImpl<>();', '', '    // Time at which an intent was received and handled.', '    private long mIntentHandlingTimeMs;', '', '    /**', '     * Whether the StartSurface is shown when Chrome is launched.', '     */', '    private boolean mOverviewShownOnStart;', '', '    private NextTabPolicySupplier mNextTabPolicySupplier;', '', '    private final UnownedUserDataSupplier<StartupPaintPreviewHelper>', '            mStartupPaintPreviewHelperSupplier = new StartupPaintPreviewHelperSupplier();', '', '    private final OneshotSupplierImpl<LayoutStateProvider> mLayoutStateProviderOneshotSupplier =', '            new OneshotSupplierImpl<>();', '    // TODO(crbug.com/1108496): Removed after all usages has been migrated to LayoutStateProvider.', '    private final OneshotSupplierImpl<OverviewModeBehavior> mOverviewModeBehaviorSupplier =', '            new OneshotSupplierImpl<>();', '    private OverviewModeController mOverviewModeController;', '', '    private ObservableSupplierImpl<EphemeralTabCoordinator> mEphemeralTabCoordinatorSupplier =', '            new ObservableSupplierImpl<>();', '    private final OneshotSupplierImpl<StartSurface> mStartSurfaceSupplier =', '            new OneshotSupplierImpl<>();', '    private ObservableSupplierImpl<Tab> mStartSurfaceParentTabSupplier =', '            new ObservableSupplierImpl<>();', '', '    private CallbackController mCallbackController = new CallbackController();', '    private TabbedModeTabDelegateFactory mTabDelegateFactory;', '', '    private final AppLaunchDrawBlocker mAppLaunchDrawBlocker;', '', '    // ID assigned to each ChromeTabbedActivity instance in Android S+ where multi-instance feature', '    // is supported. This can be explicitly set in the incoming Intent or internally assigned.', '    private int mWindowId;', '', '    private final IncognitoTabHost mIncognitoTabHost = new IncognitoTabHost() {', '        @Override', '        public boolean hasIncognitoTabs() {', '            return getTabModelSelector().getModel(true).getCount() > 0;', '        }', '', '        @Override', '        public void closeAllIncognitoTabs() {', '            if (isActivityFinishingOrDestroyed()) return;', '', '            // If the tabbed activity has not yet initialized, then finish the activity to avoid', '            // timing issues with clearing the incognito tab state in the background.', '            if (!areTabModelsInitialized() || !didFinishNativeInitialization()) {', '                finish();', '                return;', '            }', '', '            getTabModelSelector().getModel(true).closeAllTabs(false, false);', '        }', '', '        @Override', '        public boolean isActiveModel() {', '            return getTabModelSelector().getModel(true).isActiveModel();', '        }', '    };', '', '    /**', '     * This class is used to warm up the chrome split ClassLoader. See SplitChromeApplication for', '     * more info', '     */', '    @UsedByReflection(""SplitChromeApplication.java"")', '    public static class Preload extends ChromeTabbedActivity {', '        private LifecycleRegistry mLifecycleRegistry;', '', '        @UsedByReflection(""SplitChromeApplication.java"")', '        public Preload() {}', '', '        @Override', '        public Lifecycle getLifecycle() {', '            if (mLifecycleRegistry == null) {', '                // LifecycleRegistry normally enforces it is called on the main thread, but this', '                // class will be preloaded in a background thread. The only method that gets called', '                // in the activity constructor is addObserver(), so just override that.', '                mLifecycleRegistry = new LifecycleRegistry(null) {', '                    @Override', '                    public void addObserver(LifecycleObserver observer) {}', '                };', '            }', '            return mLifecycleRegistry;', '        }', '    }', '', '    /**', '     * Specify the proper non-.Main-aliased Chrome Activity for the given component.', '     *', '     * @param intent The intent to set the component for.', '     * @param component The client generated component to be validated.', '     */', '    public static void setNonAliasedComponent(Intent intent, ComponentName component) {', '        assert component != null;', '        Context appContext = ContextUtils.getApplicationContext();', '        if (!TextUtils.equals(component.getPackageName(), appContext.getPackageName())) {', '            return;', '        }', '        if (component.getClassName() != null', '                && TextUtils.equals(component.getClassName(),', '                        ChromeTabbedActivity.MAIN_LAUNCHER_ACTIVITY_NAME)) {', '            // Keep in sync with the activities that the .Main alias points to in', '            // AndroidManifest.xml.', '            intent.setClass(appContext, ChromeTabbedActivity.class);', '        } else {', '            intent.setComponent(component);', '        }', '    }', '', '    /**', '     * Constructs a ChromeTabbedActivity.', '     */', '    public ChromeTabbedActivity() {', '        mMainIntentMetrics = new MainIntentBehaviorMetrics();', '', '        // AppLaunchDrawBlocker may block drawing the Activity content until the initial tab is', '        // available.', '        // clang-format off', '        mAppLaunchDrawBlocker = new AppLaunchDrawBlocker(getLifecycleDispatcher(),', '                () -> findViewById(android.R.id.content),', '                this::getIntent, this::shouldIgnoreIntent, this::isTablet,', '                this::shouldShowOverviewPageOnStart);', '        // clang-format on', '    }', '', '    @Override', '    protected void onPreCreate() {', '        super.onPreCreate();', '        mMultiInstanceManager = MultiInstanceManager.create(this, getTabModelOrchestratorSupplier(),', '                getMultiWindowModeStateDispatcher(), getLifecycleDispatcher(),', '                getModalDialogManagerSupplier(), this);', '    }', '', '    @Override', '    protected @LaunchIntentDispatcher.Action int maybeDispatchLaunchIntent(', '            Intent intent, Bundle savedInstanceState) {', '        // Detect if incoming intent is a result of Chrome recreating itself. For now, restrict this', ""        // path to reparenting to ensure the launching logic isn't disrupted."", ""        // TODO(crbug.com/1065491): Unlock this codepath for all incoming intents once it's"", '        // confirmed working and stable.', '        if (savedInstanceState != null', '                && AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()) {', '            return LaunchIntentDispatcher.Action.CONTINUE;', '        }', '', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_MAIN.equals(intent.getAction())) {', '            // Call dispatchToTabbedActivity() for MAIN intents to activate proper multi-window', '            // TabbedActivity (i.e. if CTA2 is currently running and Chrome is started, CTA2', ""            // should be brought to front). Don't call dispatchToTabbedActivity() for non-MAIN"", '            // intents to avoid breaking cases where CTA is started explicitly (e.g. to handle', ""            // 'Move to other window' command from CTA2)."", '            return LaunchIntentDispatcher.dispatchToTabbedActivity(this, intent);', '        }', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(intent, DispatchedBy.ON_CREATE);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            return action;', '        }', '        return super.maybeDispatchLaunchIntent(intent, savedInstanceState);', '    }', '', '    // We know of at least one app that explicitly specifies .Main activity in custom tab', ""    // intents. The app shouldn't be doing that, but until it's updated, we need to support"", '    // such use case.', '    //', '    // This method attempts to treat VIEW intents explicitly sent to .Main as custom tab', '    // intents, and dispatch them accordingly. If the intent was not dispatched, the method', '    // returns Action.CONTINUE.', '    //', '    // The method also updates the supplied boolean histogram with the dispatching result,', '    // but only if the intent is a VIEW intent sent explicitly to .Main activity.', '    private @LaunchIntentDispatcher.Action int maybeDispatchExplicitMainViewIntent(', '            Intent intent, @DispatchedBy int dispatchedBy) {', ""        // The first check ensures that this is .Main activity alias (we can't check exactly, but"", '        // this gets us sufficiently close).', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getComponent() != null', '                && MAIN_LAUNCHER_ACTIVITY_NAME.equals(intent.getComponent().getClassName())) {', '            @LaunchIntentDispatcher.Action', '            int action = LaunchIntentDispatcher.dispatchToCustomTabActivity(this, intent);', '            switch (dispatchedBy) {', '                case DispatchedBy.ON_CREATE:', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnCreate"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                case DispatchedBy.ON_NEW_INTENT:', '', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnNewIntent"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                default:', '                    assert false : ""Unknown dispatchedBy value "" + dispatchedBy;', '            }', '            if (action == LaunchIntentDispatcher.Action.CONTINUE) {', '                // Intent was not dispatched, record its source.', '                @IntentHandler.ExternalAppId', '                int externalId = IntentHandler.determineExternalIntentSource(intent);', '                RecordHistogram.recordEnumeratedHistogram(', '                        ""Android.MainActivity.UndispatchedExplicitMainViewIntentSource"", externalId,', '                        IntentHandler.ExternalAppId.NUM_ENTRIES);', '', ""                // Crash if intent came from us, but only in debug builds and only if we weren't"", ""                // explicitly told not to. Hopefully we'll get enough reports to find where"", '                // these intents come from.', '                if (externalId == IntentHandler.ExternalAppId.CHROME', '                        && 0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)', '                        && !CommandLine.getInstance().hasSwitch(', '                                ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS)) {', '                    String intentInfo = intent.toString();', '                    Bundle extras = intent.getExtras();', '                    if (extras != null) {', '                        intentInfo +=', '                                "", extras.keySet = ["" + TextUtils.join("", "", extras.keySet()) + ""]"";', '                    }', '                    String message = String.format((Locale) null,', '                            ""VIEW intent sent to .Main activity alias was not dispatched. PLEASE ""', '                                    + ""report the following info to crbug.com/789732: \\""%s\\"". Use ""', '                                    + ""--%s flag to disable this check."",', '                            intentInfo, ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS);', '                    throw new IllegalStateException(message);', '                }', '            }', '            return action;', '        }', '        return LaunchIntentDispatcher.Action.CONTINUE;', '    }', '', '    @Override', '    public void initializeCompositor() {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeCompositor"");', '            super.initializeCompositor();', '', '            // LocaleManager can only function after the native library is loaded.', '            mLocaleManager = LocaleManager.getInstance();', '            mLocaleManager.setSettingsLauncher(SETTINGS_LAUNCHER);', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '', '            mTabModelOrchestrator.onNativeLibraryReady(getTabContentManager());', '', '            mTabModelObserver = new TabModelSelectorTabModelObserver(mTabModelSelector) {', '                @Override', '                public void didCloseTab(int tabId, boolean incognito) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                @Override', '                public void tabPendingClosure(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(true);', '                }', '', '                @Override', '                public void tabRemoved(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                private void closeIfNoTabsAndHomepageEnabled(boolean isPendingClosure) {', '                    if (getTabModelSelector().getTotalTabCount() == 0) {', '                        // If the last tab is closed, and homepage is enabled, then exit Chrome.', '                        if (HomepageManager.shouldCloseAppWithZeroTabs()) {', '                            finish();', '                        } else if (isPendingClosure) {', '                            NewTabPageUma.recordNTPImpression(', '                                    NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                        }', '                    }', '', '                    // TODO(960196) : remove this when the associated bug fix. This is a band-aid', '                    //  fix for TabGrid and closing tabs with TabGroupUi.', '                    //  If one of the following is true, then exit Chrome when TabGroupsAndroid is', '                    //  enabled, and tab switcher is not shown:', '                    //   1. If the very last tab is closed.', '                    //   2. If normal tab model is selected and no normal tabs.', '                    if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(ChromeTabbedActivity.this)', '                            && !mOverviewModeController.overviewVisible()) {', '                        if (getTabModelSelector().getTotalTabCount() == 0', '                                || (!getTabModelSelector().isIncognitoSelected()', '                                        && getTabModelSelector().getModel(false).getCount() == 0)) {', '                            finish();', '                        }', '                    }', '                }', '', '                @Override', '                public void didAddTab(', '                        Tab tab, @TabLaunchType int type, @TabCreationState int creationState) {', '                    if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                            && !DeviceClassManager.enableAnimations()) {', '                        Toast.makeText(ChromeTabbedActivity.this, R.string.open_in_new_tab_toast,', '                                     Toast.LENGTH_SHORT)', '                                .show();', '                    }', '                }', '', '                @Override', '                public void multipleTabsPendingClosure(List<Tab> tabs, boolean isAllTabs) {', '                    if (!isAllTabs) return;', '                    NewTabPageUma.recordNTPImpression(NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                }', '            };', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeCompositor"");', '        }', '    }', '', '    private void refreshSignIn() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.refreshSignIn"")) {', '            FirstRunSignInProcessor.start(this);', '        }', '    }', '', '    private void setupCompositorContentPreNativeForPhone() {', '        if (isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForPhone"")) {', '            CompositorViewHolder compositorViewHolder = getCompositorViewHolderSupplier().get();', '', '            // TODO(1169205): Remove all GTS enabled checks after M5 is default.', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {', '                TabManagementDelegate tabManagementDelegate =', '                        TabManagementModuleProvider.getDelegate();', '                if (tabManagementDelegate != null) {', '                    StartSurface startSurface = tabManagementDelegate.createStartSurface(this,', '                            mRootUiCoordinator.getScrimCoordinator(),', '                            mRootUiCoordinator.getBottomSheetController(), mStartSurfaceSupplier,', '                            mStartSurfaceParentTabSupplier, hadWarmStart(), getWindowAndroid(),', '                            compositorViewHolder, compositorViewHolder::getDynamicResourceLoader,', '                            getTabModelSelector(), getBrowserControlsManager(),', '                            getSnackbarManager(), getShareDelegateSupplier(),', '                            getToolbarManager()::getOmniboxStub, getTabContentManager(),', '                            getModalDialogManager(),', '                            /* chromeActivityNativeDelegate= */ this, getLifecycleDispatcher(),', '                            getTabCreatorManagerSupplier().get(),', '                            getMenuOrKeyboardActionController(),', '                            getMultiWindowModeStateDispatcher(), mJankTracker,', '                            getToolbarManager()::getToolbar);', '                }', '            }', '', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,', '                    mStartSurfaceSupplier.get(), getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPreNativeForTablet() {', '        if (!isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForTablet"")) {', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromeTablet(getCompositorViewHolderSupplier().get(),', '                    mContentContainer, getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPostNative() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPostNative"")) {', '            if (!isLayoutManagerCreated()) {', '                if (isTablet()) {', '                    setupCompositorContentPreNativeForTablet();', '                } else {', '                    setupCompositorContentPreNativeForPhone();', '                }', '            }', '', '            mLayoutManager.setEnableAnimations(DeviceClassManager.enableAnimations());', '', '            // TODO(yusufo): get rid of findViewById(R.id.url_bar).', '            initializeCompositorContent(mLayoutManager, findViewById(R.id.url_bar),', '                    mContentContainer, mControlContainer);', '        }', '    }', '', '    private boolean isLayoutManagerCreated() {', '        return mLayoutManager != null;', '    }', '', '    private void initializeToolbarManager() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initializeToolbarManager"")) {', '            mUndoBarPopupController.initialize();', '', '            OnClickListener tabSwitcherClickHandler = v -> {', '                if (ChromeFeatureList.isEnabled(ChromeFeatureList.TOOLBAR_IPH_ANDROID)) {', '                    Profile profile = mTabModelProfileSupplier.get();', '                    if (profile != null) {', '                        TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                EventConstants.TAB_SWITCHER_BUTTON_CLICKED);', '                    }', '                }', '', '                if (getFullscreenManager().getPersistentFullscreenMode()) {', '                    return;', '                }', '', '                if (isInOverviewMode()', '                        && !ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                    hideOverview();', '                } else {', '                    showOverview(StartSurfaceState.SHOWING_TABSWITCHER);', '                }', '            };', '            OnClickListener newTabClickHandler = v -> {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This assumes that the keyboard can not be seen at the same time as the', '                // newtab button on the toolbar.', '                getCurrentTabCreator().launchNTP();', '                mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);', '                if (getTabModelSelector().isIncognitoSelected()) {', '                    RecordUserAction.record(""MobileToolbarStackViewNewIncognitoTab"");', '                } else {', '                    RecordUserAction.record(""MobileToolbarStackViewNewTab"");', '                }', '                RecordUserAction.record(""MobileTopToolbarNewTabButton"");', '', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '            };', '            OnClickListener bookmarkClickHandler = v -> addOrEditBookmark(getActivityTab());', '', '            Supplier<Boolean> showStartSurfaceSupplier = () -> {', '                // If incognito is selected, tapping the home button stays on the current incognito', '                // tab.', '                if (ReturnToChromeExperimentsUtil.shouldShowStartSurfaceAsTheHomePageOnPhone(', '                            this, isTablet())', '                        && !mTabModelSelector.isIncognitoSelected()) {', '                    StartSurfaceUserData.setKeepTab(getActivityTab(), true);', '                    showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '                    return true;', '                }', '                return false;', '            };', '', '            getToolbarManager().initializeWithNative(mLayoutManager, tabSwitcherClickHandler,', '                    newTabClickHandler, bookmarkClickHandler, null, showStartSurfaceSupplier);', '', '            if (!TabUiFeatureUtilities.supportInstantStart(isTablet(), this)) {', '                assert !(mOverviewModeController != null', '                        && mOverviewModeController.overviewVisible());', '            }', '        }', '    }', '', '    private void maybeCreateIncognitoTabSnapshotController() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.maybeCreateIncognitoTabSnapshotController"")) {', '            if (!CommandLine.getInstance().hasSwitch(', '                        ChromeSwitches.ENABLE_INCOGNITO_SNAPSHOTS_IN_ANDROID_RECENTS)) {', '                IncognitoTabSnapshotController.createIncognitoTabSnapshotController(', '                        this, getWindow(), mLayoutManager, mTabModelSelector);', '            }', '', '            mUIWithNativeInitialized = true;', '            onAccessibilityTabSwitcherModeChanged();', '', '            // The dataset has already been created, we need to initialize our state.', '            mTabModelSelector.notifyChanged();', '', '            // Check for incognito tabs to handle the case where Chrome was swiped away in the', '            // background.', '            if (!IncognitoTabHostUtils.doIncognitoTabsExist()) {', '                IncognitoNotificationManager.dismissIncognitoNotification();', '                DownloadNotificationService.getInstance().cancelOffTheRecordDownloads();', '            }', '        }', '    }', '', '    private void maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.""', '                     + ""maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver"")) {', '            FeedSurfaceTracker.getInstance().startup();', '', '            if (UsageStatsService.isEnabled()) {', '                UsageStatsService.getInstance().createPageViewObserver(', '                        this, getActivityTabProvider(), getTabContentManagerSupplier());', '            }', '        }', '    }', '', '    private void initJourneyManager() {', '        assert mOverviewModeController != null;', '', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initJourneyManager"")) {', '            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TAB_ENGAGEMENT_REPORTING_ANDROID)) {', '                // The lifecycle of this object is managed by the lifecycle dispatcher.', '                new JourneyManager(getTabModelSelector(), getLifecycleDispatcher(),', '                        mOverviewModeController, new EngagementTimeUtil());', '            }', '        }', '    }', '', '    @Override', '    public void onNewIntent(Intent intent) {', ""        // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly"", '        // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,', '        // and not Chrome', '        Intent intentForDispatching = new Intent(intent);', '        intentForDispatching.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(', '                intentForDispatching, DispatchedBy.ON_NEW_INTENT);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            // Pressing back button in CCT should bring user to the caller activity.', '            moveTaskToBack(true);', '            // Intent was dispatched to CustomTabActivity, consume it.', '            return;', '        }', '', '        mIntentHandlingTimeMs = SystemClock.uptimeMillis();', '        super.onNewIntent(intent);', '    }', '', '    @Override', '    public void startNativeInitialization() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.startNativeInitialization"")) {', ""            // This is on the critical path so don't delay."", '            if (ChromeFeatureList.isEnabled(', '                        ChromeFeatureList.DARKEN_WEBSITES_CHECKBOX_IN_THEMES_SETTING)) {', '                WebContentsDarkModeController.createInstance();', '            }', '            setupCompositorContentPostNative();', '', ""            // All this initialization can be expensive so it's split into multiple tasks."", '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::refreshSignIn));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initializeToolbarManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeCreateIncognitoTabSnapshotController));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::onAccessibilityTabSwitcherModeChanged));', '', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initJourneyManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::finishNativeInitialization));', '            ChromeAccessibilityUtil.get().addObserver(this);', '        }', '    }', '', '    @Override', '    public void finishNativeInitialization() {', '        super.finishNativeInitialization();', '', '        // TODO(jinsukkim): Let these classes handle the registration by themselves.', '        mCompositorViewHolder = getCompositorViewHolderSupplier().get();', '        mOverviewListLayout = (OverviewListLayout) mLayoutManager.getOverviewListLayout();', '        getTabObscuringHandler().addObserver(mCompositorViewHolder);', '        getTabObscuringHandler().addObserver(mOverviewListLayout);', '', '        ChromeAccessibilityUtil.get().addObserver(mLayoutManager);', '        if (isTablet()) ChromeAccessibilityUtil.get().addObserver(mCompositorViewHolder);', '    }', '', '    @Override', '    public void onResumeWithNative() {', '        super.onResumeWithNative();', '', '        IncognitoStartup.onResumeWithNative(', '                getTabModelSelectorSupplier(), TABBED_MODE_COMPONENT_NAMES);', '', '        mLocaleManager.setSnackbarManager(getSnackbarManager());', '        mLocaleManager.startObservingPhoneChanges();', '', '        if (isWarmOnResume()) {', '            NavigationPredictorBridge.onActivityWarmResumed();', '        } else {', '            NavigationPredictorBridge.onColdStart();', '        }', '', '        // This call is not guarded by a feature flag.', '        SearchEngineChoiceNotification.handleSearchEngineChoice(', '                this, getSnackbarManager(), SETTINGS_LAUNCHER);', '', '        if (!isWarmOnResume()) {', '            SuggestionsMetrics.recordArticlesListVisible();', '        }', '    }', '', '    @Override', '    public void onPauseWithNative() {', '        mTabModelSelector.commitAllTabClosures();', '        CookiesFetcher.persistCookies();', '', '        mLocaleManager.setSnackbarManager(null);', '        mLocaleManager.stopObservingPhoneChanges();', '', '        NavigationPredictorBridge.onPause();', '', '        super.onPauseWithNative();', '    }', '', '    @Override', '    public void onStopWithNative() {', '        super.onStopWithNative();', '', '        mTabModelOrchestrator.saveState();', '        mHasDeterminedOverviewStateForCurrentSession = false;', '    }', '', '    @Override', '    public void onStartWithNative() {', '        mMainIntentMetrics.logLaunchBehavior();', '        super.onStartWithNative();', '', ""        // Don't call setInitialOverviewState if we're waiting for the tab's creation or we risk"", '        // showing a glimpse of the tab selector during start up.', '        if (!mPendingInitialTabCreation) {', '            setInitialOverviewState();', '        }', '', '        if (TabUiFeatureUtilities.isConditionalTabStripEnabled()', '                || ConditionalTabStripUtils.getOptOutIndicator()) {', '            ConditionalTabStripUtils.updateFeatureExpiration(', '                    mInactivityTracker.getLastBackgroundedTimeMs());', '        }', '', '        Bundle savedInstanceState = getSavedInstanceState();', '        if (savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false)) {', '            // This will be executed only once since SavedInstanceState will be reset a few lines', '            // later.', '            AndroidSessionDurationsServiceState.restoreNativeFromSerialized(savedInstanceState,', '                    getCurrentTabModel().getProfile().getPrimaryOTRProfile(', '                            /* createIfNeeded= */ true));', '        }', '', '        resetSavedInstanceState();', '        StartSurfaceConfiguration.addFeedVisibilityObserver();', '        BookmarkUtils.maybeExpireLastBookmarkLocationForReadLater(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    @Override', '    public void onNewIntentWithNative(Intent intent) {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.onNewIntentWithNative"");', '', '            super.onNewIntentWithNative(intent);', '            if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                logMainIntentBehavior(intent);', '            }', '', '            if (CommandLine.getInstance().hasSwitch(ContentSwitches.ENABLE_TEST_INTENTS)) {', '                handleDebugIntent(intent);', '            }', '', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.onNewIntentWithNative"");', '        }', '    }', '', '    @Override', '    public @ActivityType int getActivityType() {', '        return ActivityType.TABBED;', '    }', '', '    @Override', '    public ChromeTabCreator getTabCreator(boolean incognito) {', '        return (ChromeTabCreator) super.getTabCreator(incognito);', '    }', '', '    @Override', '    public ChromeTabCreator getCurrentTabCreator() {', '        return (ChromeTabCreator) super.getCurrentTabCreator();', '    }', '', '    @Override', '    public OverviewModeBehavior getOverviewModeBehavior() {', '        return mOverviewModeController;', '    }', '', '    @Override', '    public @Nullable OneshotSupplier<OverviewModeBehavior> getOverviewModeBehaviorSupplier() {', '        return mOverviewModeBehaviorSupplier;', '    }', '', '    /**', '     * @return The toolbar button in-product help controller for this activity.', '     * TODO(pnoland, https://crbug.com/865801): remove this in favor', ""     *        of injecting the controller directly where it's needed."", '     */', '    public ToolbarButtonInProductHelpController getToolbarButtonInProductHelpController() {', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getToolbarButtonInProductHelpController();', '    }', '', '    private void handleDebugIntent(Intent intent) {', '        if (ACTION_CLOSE_TABS.equals(intent.getAction())) {', '            getTabModelSelector().closeAllTabs();', '        } else if (MemoryPressureListener.handleDebugIntent(', '                           ChromeTabbedActivity.this, intent.getAction())) {', '            // Handled.', '        }', '    }', '', '    private void setTrackColdStartupMetrics(boolean shouldTrackColdStartupMetrics) {', '        assert getActivityTabStartupMetricsTracker() != null;', '', '        if (shouldTrackColdStartupMetrics) {', '            getActivityTabStartupMetricsTracker().trackStartupMetrics(STARTUP_UMA_HISTOGRAM_SUFFIX);', '        } else {', '            getActivityTabStartupMetricsTracker().cancelTrackingStartupMetrics();', '        }', '', '        // Paint Preview should follow the same logic as startup UMA histograms as the feature', '        // should only run on cold startup of Chrome when the user is unable to interact before', '        // entering a tab.', '        StartupPaintPreviewHelper.setShouldShowOnRestore(shouldTrackColdStartupMetrics);', '    }', '', '    private void setInitialOverviewState() {', '        if (mHasDeterminedOverviewStateForCurrentSession) return;', '', '        mHasDeterminedOverviewStateForCurrentSession = true;', '        boolean isOverviewVisible = mOverviewModeController.overviewVisible();', '', '        if (shouldRefreshAndShowOverview(isOverviewVisible)) {', '            if (getCurrentTabModel() != null) {', '                RecordHistogram.recordCountHistogram(', '                        TAB_COUNT_ON_RETURN, getCurrentTabModel().getCount());', '            }', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this) && !isTablet()) {', '                mStartSurfaceSupplier.get().getController().enableRecordingFirstMeaningfulPaint(', '                        getOnCreateTimestampMs());', '            }', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '            return;', '        }', '', '        if (getActivityTab() == null && !isOverviewVisible) {', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '        }', '', '        if (IntentUtils.isMainIntentFromLauncher(getIntent())', '                && mOverviewModeController.overviewVisible()) {', '            RecordUserAction.record(""MobileStartup.UserEnteredTabSwitcher"");', '        }', '    }', '', '    private boolean shouldRefreshAndShowOverview(boolean isOverviewVisible) {', '        // If StartSurfaceConfiguration.NEW_SURFACE_FROM_HOME_BUTTON is turned on, MV tiles and', '        // carousels may be hidden before Chrome is brought to the background. If overview should be', '        // shown, no matter overview was already visible or not, we should call', '        // showOverview(StartSurfaceState.SHOWING_START) to show MV tiles and carousels again.', '        return shouldShowOverviewPageOnStart()', '                && (!isOverviewVisible', '                        || StartSurfaceConfiguration.shouldShowNewSurfaceFromHomeButton());', '    }', '', '    /**', '     * Returns whether grid Tab switcher or the Start surface should be shown at startup.', '     */', '    private boolean shouldShowOverviewPageOnStart() {', '        return ReturnToChromeExperimentsUtil.shouldShowOverviewPageOnStart(', '                this, getIntent(), getTabModelSelector(), mInactivityTracker);', '    }', '', '    private void logMainIntentBehavior(Intent intent) {', '        assert IntentUtils.isMainIntentFromLauncher(intent);', '        // TODO(tedchoc): We should cache the last visible time and reuse it to avoid different', '        //                values of this depending on when it is called after the activity was', '        //                shown.', '', '        // Temporary safety check to make sure none of this code runs if the feature is', '        // disabled.', '        if (ReengagementNotificationController.isEnabled()) {', '            if (mCallbackController != null) {', '                new OneShotCallback<>(', '                        mTabModelProfileSupplier, mCallbackController.makeCancelable(profile -> {', '                            assert profile != null : ""Unexpectedly null profile from TabModel."";', '                            if (profile == null) return;', '', '                            TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                    EventConstants.STARTED_FROM_MAIN_INTENT);', '                        }));', '            }', '        }', '', '        mMainIntentMetrics.onMainIntentWithNative(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    /** Access the main intent metrics for test validation. */', '    @VisibleForTesting', '    public MainIntentBehaviorMetrics getMainIntentBehaviorMetricsForTesting() {', '        return mMainIntentMetrics;', '    }', '', '    @VisibleForTesting', '    public ChromeInactivityTracker getInactivityTrackerForTesting() {', '        return mInactivityTracker;', '    }', '', '    @Override', '    public void initializeState() {', '        // This method goes through 3 steps:', ""        // 1. Load the saved tab state (but don't start restoring the tabs yet)."", '        // 2. Process the Intent that this activity received and if that should result in any', '        //    new tabs, create them.  This is done after step 1 so that the new tab gets', '        //    created after previous tab state was restored.', '        // 3. If no tabs were created in any of the above steps, create an NTP, otherwise', '        //    start asynchronous tab restore (loading the previously active tab synchronously', '        //    if no new tabs created in step 2).', '', '        // Only look at the original intent if this is not a ""restoration"" and we are allowed to', '        // process intents. Any subsequent intents are carried through onNewIntent.', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeState"");', '', '            super.initializeState();', '            Log.i(TAG, ""#initializeState"");', '            Intent intent = getIntent();', '', '            boolean hadCipherData =', '                    CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());', '', '            boolean noRestoreState =', '                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);', '            if (noRestoreState) {', '                // Clear the state files because they are inconsistent and useless from now on.', '                mTabModelOrchestrator.clearState();', '            } else {', '                // State should be clear when we start first run and hence we do not need to load', '                // a previous state. This may change the current Model, watch out for initialization', '                // based on the model.', '                // Never attempt to restore incognito tabs when this activity was previously swiped', '                // away in Recents. http://crbug.com/626629', '                boolean ignoreIncognitoFiles = !hadCipherData;', '                mTabModelOrchestrator.loadState(ignoreIncognitoFiles);', '            }', '', '            mInactivityTracker.register(this.getLifecycleDispatcher());', '            boolean isIntentWithEffect = false;', '            boolean isMainIntentFromLauncher = false;', '            if (getSavedInstanceState() == null && intent != null) {', '                if (!shouldIgnoreIntent()) {', '                    isIntentWithEffect = mIntentHandler.onNewIntent(intent);', '                }', '', '                if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                    isMainIntentFromLauncher = true;', '                    logMainIntentBehavior(intent);', '                }', '            }', '', '            mIntentMetadataOneshotSupplier.set(', '                    new ToolbarIntentMetadata(isMainIntentFromLauncher, isIntentWithEffect));', '', '            // If we have tabs to reparent and getSavedInstanceState() is non-null, then the tabs', '            // are coming from night mode tab reparenting. In this case, reparenting happens', '            // synchronously along with tab restoration so there are no tabs waiting for', '            // reparenting like there are for other tab reparenting operations.', '            boolean hasTabWaitingForReparenting =', '                    AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()', '                    && getSavedInstanceState() == null;', '            mCreatedTabOnStartup = getCurrentTabModel().getCount() > 0', '                    || mTabModelOrchestrator.getRestoredTabCount() > 0 || isIntentWithEffect', '                    || hasTabWaitingForReparenting;', '', '            // We always need to try to restore tabs. The set of tabs might be empty, but at least', '            // it will trigger the notification that tab restore is complete which is needed by', '            // other parts of Chrome such as sync.', '            boolean activeTabBeingRestored = !isIntentWithEffect', '                    || (shouldShowOverviewPageOnStart()', '                            && !mTabModelSelector.isIncognitoSelected());', '', '            mTabModelOrchestrator.restoreTabs(activeTabBeingRestored);', '', '            // Only create an initial tab if no tabs were restored and no intent was handled.', '            // Also, check whether the active tab was supposed to be restored and that the total', '            // tab count is now non zero.  If this is not the case, tab restore failed and we need', '            // to create a new tab as well.', '            if (!mCreatedTabOnStartup', '                    || (!hasTabWaitingForReparenting && activeTabBeingRestored', '                            && getTabModelSelector().getTotalTabCount() == 0)) {', '                // If homepage URI is not determined, due to PartnerBrowserCustomizations provider', '                // async reading, then create a tab at the async reading finished. If it takes', '                // too long, just create NTP.', '', '                mPendingInitialTabCreation = true;', '                PartnerBrowserCustomizations.getInstance().setOnInitializeAsyncFinished(() -> {', '                    if (!isActivityFinishingOrDestroyed()) {', '                        createInitialTab();', '                    }', '                }, INITIAL_TAB_CREATION_TIMEOUT_MS);', '            }', '', '            // If initial tab creation is pending, this will instead be handled when we create the', '            // initial tab in #createInitialTab.', '            if (!mPendingInitialTabCreation) {', '                mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '            }', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeState"");', '        }', '    }', '', '    private boolean hasStartWithNativeBeenCalled() {', '        int activity_state = getLifecycleDispatcher().getCurrentActivityState();', '        return activity_state == ActivityLifecycleDispatcher.ActivityState.STARTED_WITH_NATIVE', '                || activity_state == ActivityLifecycleDispatcher.ActivityState.RESUMED_WITH_NATIVE;', '    }', '', '    /**', '     * Create an initial tab for cold start without restored tabs.', '     */', '    private void createInitialTab() {', '        Log.i(TAG, ""#createInitialTab executed."");', '        mPendingInitialTabCreation = false;', '', '        // If the start surface or grid tab switcher will be shown on start, do not create a new', '        // tab.', '        if (!shouldShowOverviewPageOnStart()) {', '            String url = HomepageManager.getHomepageUri();', '            if (TextUtils.isEmpty(url)) {', '                url = UrlConstants.NTP_URL;', '            } else {', '                // Migrate legacy NTP URLs (chrome://newtab) to the newer format', '                // (chrome-native://newtab)', '                if (UrlUtilities.isNTPUrl(url)) {', '                    url = UrlConstants.NTP_URL;', '                }', '            }', '', '            getTabCreator(false).launchUrl(url, TabLaunchType.FROM_STARTUP);', '        }', '', ""        // If we didn't call setInitialOverviewState() in onStartWithNative() because"", '        // mPendingInitialTabCreation was true then do so now.', '        if (hasStartWithNativeBeenCalled()) {', '            setInitialOverviewState();', '        }', '', '        mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '    }', '', '    @Override', '    public void onAccessibilityModeChanged(boolean enabled) {', '        onAccessibilityTabSwitcherModeChanged();', '    }', '', '    private void onAccessibilityTabSwitcherModeChanged() {', '        if (!mUIWithNativeInitialized) return;', '', '        boolean accessibilityTabSwitcherEnabled =', '                DeviceClassManager.enableAccessibilityLayout(this);', '        if (mOverviewModeController != null && mOverviewModeController.overviewVisible()', '                && (mIsAccessibilityTabSwitcherEnabled == null', '                        || mIsAccessibilityTabSwitcherEnabled', '                                != DeviceClassManager.enableAccessibilityLayout(this))) {', '            /**', '             * If Start surface homepage is showing and launching NTP will show the Start surface', '             * again, skips the calls of hideOverview() and launchNTP(). We need to check', '             * {@link ReturnToChromeExperimentsUtil#shouldShowStartSurfaceHomeAsNTP(Context,', '             * boolean, boolean)} to see whether Start surface can be shown when accessibility is', '             * enabled.', '             */', '            if (mStartSurfaceSupplier.get() == null', '                    || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                            != StartSurfaceState.SHOWN_HOMEPAGE', '                    || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                            this, getCurrentTabModel().isIncognito(), isTablet())) {', '                mOverviewModeController.hideOverview(true);', '                if (getTabModelSelector().getCurrentModel().getCount() == 0) {', '                    getCurrentTabCreator().launchNTP();', '                }', '            }', '        }', '        mIsAccessibilityTabSwitcherEnabled = accessibilityTabSwitcherEnabled;', '', '        if (ChromeAccessibilityUtil.get().isAccessibilityEnabled()) {', '            RecordHistogram.recordBooleanHistogram(', '                    ""Accessibility.Android.TabSwitcherPreferenceEnabled"",', '                    mIsAccessibilityTabSwitcherEnabled);', '        }', '    }', '', '    /**', '     * Internal class which performs the intent handling operations delegated by IntentHandler.', '     */', '    private class InternalIntentDelegate implements IntentHandler.IntentHandlerDelegate {', '        /**', '         * Processes a url view intent.', '         *', '         * @param url The url from the intent.', '         */', '        @Override', '        public void processUrlViewIntent(LoadUrlParams loadUrlParams, @TabOpenType int tabOpenType,', '                String externalAppId, int tabIdToBringToFront, Intent intent) {', '            if (isActivityFinishingOrDestroyed()) {', '                return;', '            }', '            if (isFromChrome(intent, externalAppId)) {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromChrome"");', '            } else {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromApp"");', '            }', '', '            final String url = loadUrlParams.getUrl();', '            boolean fromLauncherShortcut = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false);', '            boolean fromAppWidget = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false);', '            boolean focus = false;', '', '            TabModel tabModel = getCurrentTabModel();', '            switch (tabOpenType) {', '                case TabOpenType.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:', '                    mTabModelOrchestrator.tryToRestoreTabStateForUrl(url);', '                    int tabToBeClobberedIndex = TabModelUtils.getTabIndexByUrl(tabModel, url);', '                    Tab tabToBeClobbered = tabModel.getTabAt(tabToBeClobberedIndex);', '                    if (tabToBeClobbered != null) {', '                        TabModelUtils.setIndex(tabModel, tabToBeClobberedIndex);', '                        tabToBeClobbered.reload();', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    int shortcutSource = intent.getIntExtra(', '                            WebappConstants.EXTRA_SOURCE, ShortcutSource.UNKNOWN);', '                    LaunchMetrics.recordHomeScreenLaunchIntoTab(url, shortcutSource);', '                    if (fromAppWidget && url.startsWith(UrlConstants.CHROME_DINO_URL)) {', '                        RecordUserAction.record(""QuickActionSearchWidget.StartDinoGame"");', '                    }', '                    break;', '                case TabOpenType.BRING_TAB_TO_FRONT:', '                    mTabModelOrchestrator.tryToRestoreTabStateForId(tabIdToBringToFront);', '', '                    int tabIndex = TabModelUtils.getTabIndexById(tabModel, tabIdToBringToFront);', '                    if (tabIndex == TabModel.INVALID_TAB_INDEX) {', '                        TabModel otherModel =', '                                getTabModelSelector().getModel(!tabModel.isIncognito());', '                        tabIndex = TabModelUtils.getTabIndexById(otherModel, tabIdToBringToFront);', '                        if (tabIndex != TabModel.INVALID_TAB_INDEX) {', '                            getTabModelSelector().selectModel(otherModel.isIncognito());', '                            TabModelUtils.setIndex(otherModel, tabIndex);', '                        } else {', '                            Log.e(TAG, ""Failed to bring tab to front because it doesn\'t exist."");', '                            return;', '                        }', '                    } else {', '                        TabModelUtils.setIndex(tabModel, tabIndex);', '                    }', '                    break;', '                case TabOpenType.CLOBBER_CURRENT_TAB:', '                    // The browser triggered the intent. This happens when clicking links which', '                    // can be handled by other applications (e.g. www.youtube.com links).', '                    Tab currentTab = getActivityTab();', '                    if (currentTab != null) {', '                        RedirectHandlerTabHelper.updateIntentInTab(currentTab, intent);', '                        currentTab.loadUrl(loadUrlParams);', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    break;', '                case TabOpenType.REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:', '                    launchIntent(loadUrlParams, externalAppId, false, intent);', '                    break;', '                case TabOpenType.REUSE_TAB_MATCHING_ID_ELSE_NEW_TAB:', '                    int tabId = IntentUtils.safeGetIntExtra(', '                            intent, TabOpenType.REUSE_TAB_MATCHING_ID_STRING, Tab.INVALID_TAB_ID);', '                    if (tabId != Tab.INVALID_TAB_ID) {', '                        mTabModelOrchestrator.tryToRestoreTabStateForId(tabId);', '                        int matchingTabIndex = TabModelUtils.getTabIndexById(tabModel, tabId);', '                        boolean loaded = false;', '                        if (matchingTabIndex != TabModel.INVALID_TAB_INDEX) {', '                            Tab tab = tabModel.getTabAt(matchingTabIndex);', '                            if (tab.getUrl().getSpec().equals(url)', '                                    || tab.getUrl().getSpec().equals(IntentUtils.safeGetStringExtra(', '                                            intent, TabOpenType.REUSE_TAB_ORIGINAL_URL_STRING))) {', '                                tabModel.setIndex(matchingTabIndex, TabSelectionType.FROM_USER);', '                                tab.loadUrl(loadUrlParams);', '                                loaded = true;', '                            }', '                        }', '                        if (!loaded) {', '                            launchIntent(loadUrlParams, externalAppId, false, intent);', '                        }', '                    }', '                    break;', '                case TabOpenType.OPEN_NEW_TAB:', '                    if (fromLauncherShortcut) {', '                        recordLauncherShortcutAction(false);', '                        reportNewTabShortcutUsed(false);', '                    }', '', '                    launchIntent(loadUrlParams, externalAppId, true, intent);', '                    break;', '                case TabOpenType.OPEN_NEW_INCOGNITO_TAB:', '                    if (!TextUtils.equals(externalAppId, getPackageName())) {', '                        assert false : ""Only Chrome is allowed to open incognito tabs"";', '                        Log.e(TAG, ""Only Chrome is allowed to open incognito tabs"");', '                        return;', '                    }', '', '                    if (!IncognitoUtils.isIncognitoModeEnabled()) {', '                        // The incognito launcher shortcut is manipulated in #onDeferredStartup(),', ""                        // so it's possible for a user to invoke the shortcut before it's disabled."", '                        // Quick actions search widget is installed on the home screen and may', '                        // need to be updated before the incognito button is removed.', '                        // Opening an incognito tab while incognito mode is disabled from somewhere', '                        // besides the launcher shortcut of from quick action search widget is an', '                        // error.', '                        if (fromAppWidget || fromLauncherShortcut) {', '                            // We are using the message introduced for quick action search widget', '                            // for both the widget and the launcher shortcut here.', '                            Toast.makeText(ChromeTabbedActivity.this,', '                                         R.string.quick_action_search_widget_message_no_incognito,', '                                         Toast.LENGTH_LONG)', '                                    .show();', '                        } else {', '                            assert false : ""Tried to open incognito tab while incognito disabled"";', '                            Log.e(TAG, ""Tried to open incognito tab while incognito disabled"");', '                        }', '', '                        return;', '                    }', '', '                    if (url == null || url.equals(UrlConstants.NTP_URL)) {', '                        if (fromLauncherShortcut) {', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);', '                            recordLauncherShortcutAction(true);', '                            reportNewTabShortcutUsed(true);', '                        } else if (fromAppWidget) {', '                            RecordUserAction.record(""QuickActionSearchWidget.StartIncognito"");', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);', '                        } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);', '                            if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {', '                                // Since the Tab is created in the foreground, its View will gain', '                                // focus, and since the Tab and the URL bar are not yet in the same', ""                                // View hierarchy, setting the URL bar's focus here won't clear the"", ""                                // Tab's focus. When the Tab is added to the hierarchy, we want the"", ""                                // URL bar to retain focus, so we clear the Tab's focus here."", '                                tab.getView().clearFocus();', '                                focus = true;', '                            }', '', '                            IncognitoTabLauncher.recordUse();', '                        } else {', '                            // Used by the Account management screen to open a new incognito tab.', '                            // Account management screen collects its metrics separately.', '                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);', '                        }', '                    } else {', '                        @TabLaunchType', '                        Integer launchType = IntentHandler.getTabLaunchType(intent);', '                        if (launchType == null) launchType = TabLaunchType.FROM_LINK;', '                        getTabCreator(true).launchUrl(', '                                url, launchType, intent, mIntentHandlingTimeMs);', '                    }', '                    break;', '                default:', '                    assert false : ""Unknown TabOpenType: "" + tabOpenType;', '                    break;', '            }', '', '            getToolbarManager().setUrlBarFocusOnceNativeInitialized(focus,', '                    focus ? OmniboxFocusReason.LAUNCH_NEW_INCOGNITO_TAB', '                          : OmniboxFocusReason.UNFOCUS);', '', '            if (tabModel.getCount() > 0 && isInOverviewMode() && !isTablet()', '                    && !shouldShowOverviewPageOnStart()) {', '                mOverviewModeController.hideOverview(true);', '            }', '        }', '', '        @Override', '        public long getIntentHandlingTimeMs() {', '            return mIntentHandlingTimeMs;', '        }', '', '        @Override', '        public void processWebSearchIntent(String query) {', '            assert false;', '        }', '', '        @Override', '        public void processTranslateTabIntent(', '                @Nullable String targetLanguageCode, @Nullable String expectedUrl) {', '            TranslateIntentHandler.translateTab(getActivityTab(), targetLanguageCode, expectedUrl);', '        }', '', '        private boolean isFromChrome(Intent intent, String externalAppId) {', '            // To determine if the processed intent is from Chrome, check for any of the following:', '            // 1.) The authentication token that will be added to trusted intents.', '            // 2.) The app ID matches Chrome.  This value can be spoofed by other applications, but', '            //     in cases where we were not able to add the authentication token this is our only', '            //     indication the intent was from Chrome.', '            return IntentHandler.wasIntentSenderChrome(intent)', '                    || TextUtils.equals(externalAppId, getPackageName());', '        }', '    }', '', '    @Override', '    public void performPreInflationStartup() {', '        // Create JankTracker before invoking super, because the parent class will invoke', '        // createRootUiCoordinator(...), which in our case requires the JankTracker to already have', '        // been created.', '        mJankTracker = new JankTrackerImpl(this);', '', '        super.performPreInflationStartup();', '', '        // Decide whether to record startup UMA histograms. This is done  early in the main', '        // Activity.onCreate() to avoid recording navigation delays when they require user input to', '        // proceed. For example, FRE (First Run Experience) happens before the activity is created,', '        // and triggers initialization of the native library.', '        //', '        // An uninitialized native library is an indication of an application start that is followed', '        // by navigation immediately without user input.', '        if (!LibraryLoader.getInstance().isInitialized()) {', '            setTrackColdStartupMetrics(true);', '        }', '', '        supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);', '', '        IncognitoTabHostRegistry.getInstance().register(mIncognitoTabHost);', '', '        mStartupPaintPreviewHelperSupplier.attach(getWindowAndroid().getUnownedUserDataHost());', '    }', '', '    @Override', '    protected RootUiCoordinator createRootUiCoordinator() {', '        return new TabbedRootUiCoordinator(this, this::onOmniboxFocusChanged,', '                getShareDelegateSupplier(), getActivityTabProvider(), mTabModelProfileSupplier,', '                mBookmarkBridgeSupplier, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), mStartSurfaceSupplier,', '                mIntentMetadataOneshotSupplier, mLayoutStateProviderOneshotSupplier,', '                mStartSurfaceParentTabSupplier, getBrowserControlsManager(), getWindowAndroid(),', '                mJankTracker, getLifecycleDispatcher(), getLayoutManagerSupplier(),', '                /* menuOrKeyboardActionController= */ this, this::getActivityThemeColor,', '                getModalDialogManagerSupplier(), /* appMenuBlocker= */ this, this::supportsAppMenu,', '                this::supportsFindInPage, getTabCreatorManagerSupplier(), getFullscreenManager(),', '                getCompositorViewHolderSupplier(), getTabContentManagerSupplier(),', '                getOverviewModeBehaviorSupplier(), this::getSnackbarManager, getActivityType(),', '                this::isInOverviewMode, this::isWarmOnResume,', '                /* appMenuDelegate= */ this, /* statusBarColorProvider= */ this,', '                mEphemeralTabCoordinatorSupplier, getIntentRequestTracker(),', '                getControlContainerHeightResource(), this::getInsetObserverView,', '                this::backShouldCloseTab);', '    }', '', '    @Override', '    protected int getControlContainerLayoutId() {', '        return R.layout.control_container;', '    }', '', '    @Override', '    public int getControlContainerHeightResource() {', '        return R.dimen.control_container_height;', '    }', '', '    @Override', '    protected int getToolbarLayoutId() {', '        return isTablet() ? R.layout.toolbar_tablet : R.layout.toolbar_phone;', '    }', '', '    @Override', '    protected int getToolbarShadowResource() {', '        final boolean themeRefactorEnabled =', '                CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID);', '        return themeRefactorEnabled ? R.drawable.toolbar_hairline', '                                    : R.drawable.modern_toolbar_shadow;', '    }', '', '    @Override', '    protected int getToolbarShadowLayoutHeight() {', '        final int res = CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID)', '                ? R.dimen.toolbar_hairline_height', '                : R.dimen.toolbar_shadow_height;', '        return getResources().getDimensionPixelSize(res);', '    }', '', '    @Override', '    public void performPostInflationStartup() {', '        super.performPostInflationStartup();', '', '        FontPreloader.getInstance().onPostInflationStartupTabbedActivity();', '', '        TabModelSelector tabModelSelector = getTabModelSelector();', '        IncognitoProfileDestroyer.observeTabModelSelector(tabModelSelector);', '        IncognitoNotificationPresenceController.observeTabModelSelector(tabModelSelector);', '', '        // Critical path for startup. Create the minimum objects needed', '        // to allow a blank screen draw (without depending on any native code)', '        // and then yield ASAP.', '        if (isFinishing()) return;', '', ""        // Don't show the keyboard until user clicks in."", '        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN', '                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);', '', '        mContentContainer = (ViewGroup) findViewById(android.R.id.content);', '        mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);', '', '        Supplier<Boolean> dialogVisibilitySupplier = null;', '        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {', '            dialogVisibilitySupplier = () -> {', '                assert mStartSurfaceSupplier.get() != null;', '                assert getToolbarManager().getTabGroupUi() != null;', '                // Return true if dialog from either tab switcher or tab strip is visible.', '', '                ToolbarManager toolbarManager = getToolbarManager();', '                TabGroupUi tabGroupUi = toolbarManager.getTabGroupUi();', '                boolean isDialogVisible = tabGroupUi.isTabGridDialogVisible();', '', '                Supplier<Boolean> tabSwitcherDialogVisibilitySupplier =', '                        mStartSurfaceSupplier.get().getTabGridDialogVisibilitySupplier();', '', '                if (tabSwitcherDialogVisibilitySupplier != null) {', '                    isDialogVisible = isDialogVisible || tabSwitcherDialogVisibilitySupplier.get();', '                }', '                return isDialogVisible;', '            };', '        }', '', '        mUndoBarPopupController = new UndoBarController(this, mTabModelSelector,', '                this::getSnackbarManager, mOverviewModeBehaviorSupplier, dialogVisibilitySupplier);', '', '        mInactivityTracker = new ChromeInactivityTracker(', '                ChromePreferenceKeys.TABBED_ACTIVITY_LAST_BACKGROUNDED_TIME_MS_PREF);', '', '        assert getActivityTabStartupMetricsTracker() != null;', '        if (StartupPaintPreviewHelper.isEnabled()) {', '            StartupPaintPreviewHelper paintPreviewHelper = new StartupPaintPreviewHelper(', '                    getWindowAndroid(), getOnCreateTimestampMs(), getBrowserControlsManager(),', '                    getTabModelSelector(), shouldShowOverviewPageOnStart(), () -> {', '                        return getToolbarManager() == null', '                                ? null', '                                : getToolbarManager().getProgressBarCoordinator();', '                    });', '            mStartupPaintPreviewHelperSupplier.set(paintPreviewHelper);', '            getActivityTabStartupMetricsTracker().registerPaintPreviewObserver(paintPreviewHelper);', '        }', '    }', '', '    private boolean shouldIgnoreIntent() {', '        if (mShouldIgnoreIntent == null) {', '            // We call this only once because mIntentHandler#shouldIgnoreIntent has side effects.', '            mShouldIgnoreIntent =', '                    mIntentHandler.shouldIgnoreIntent(getIntent(), /*startedActivity=*/true);', '        }', '        return mShouldIgnoreIntent;', '    }', '', '    @Override', '    protected final void dispatchOnInflationComplete() {', '        super.dispatchOnInflationComplete();', '', '        // When the feature flag {@link ChromeFeatureList.INSTANT_START} turns on phones (not', '        // tablet), a view-only start page created on Java will be shown before native is', '        // initialized. The {@link prepareToShowStartPagePreNative()} is only called in a cold', '        // start.', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                && TabUiFeatureUtilities.supportInstantStart(isTablet(), this) && !hadWarmStart()) {', '            prepareToShowStartPagePreNative();', '        }', '    }', '', '    /**', '     * Prepares to show the start page before native is initialized. For example, create', '     * an LayoutManagerChrome object, add overview mode observer and so on.', '     */', '    private void prepareToShowStartPagePreNative() {', '        assert TabUiFeatureUtilities.supportInstantStart(isTablet() && !hadWarmStart(), this);', '        try (TraceEvent e =', '                        TraceEvent.scoped(""ChromeTabbedActivity.prepareToShowStartPagePreNative"")) {', '            setupCompositorContentPreNativeForPhone();', '            getCompositorViewHolderSupplier().get().setLayoutManager(mLayoutManager);', '', '            if (shouldShowOverviewPageOnStart()) {', '                mLayoutManager.setTabModelSelector(mTabModelSelector);', '                mIsAccessibilityTabSwitcherEnabled =', '                        DeviceClassManager.enableAccessibilityLayout(this);', '                assert !mHasDeterminedOverviewStateForCurrentSession;', '                setInitialOverviewState();', '            }', '        }', '    }', '', '    @Override', '    protected TabModelOrchestrator createTabModelOrchestrator() {', '        boolean tabMergingEnabled =', '                mMultiInstanceManager != null && mMultiInstanceManager.isTabModelMergingEnabled();', '        mTabModelOrchestrator = new TabbedModeTabModelOrchestrator(tabMergingEnabled);', '        return mTabModelOrchestrator;', '    }', '', '    @Override', '    protected void createTabModels() {', '        assert mTabModelSelector == null;', '        assert mWindowId != INVALID_WINDOW_ID;', '', '        Bundle savedInstanceState = getSavedInstanceState();', '', '        // We determine the model as soon as possible so every systems get initialized coherently.', '        boolean startIncognito = savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false);', '', '        mNextTabPolicySupplier = new ChromeNextTabPolicySupplier(mOverviewModeBehaviorSupplier);', '', '        boolean tabModelWasCreated = mTabModelOrchestrator.createTabModels(', '                this, this, mNextTabPolicySupplier, mWindowId);', '        if (!tabModelWasCreated) {', '            finish();', '            return;', '        }', '', '        if (mMultiInstanceManager != null) {', '            int assignedIndex = TabWindowManagerSingleton.getInstance().getIndexForWindow(this);', '            // The given index and the one computed by TabWindowManager should be one and the same.', '            assert !MultiWindowUtils.isMultiInstanceApi31Enabled() || assignedIndex == mWindowId;', '            mMultiInstanceManager.initialize(assignedIndex, getTaskId());', '        }', '', '        mTabModelSelector = mTabModelOrchestrator.getTabModelSelector();', '        mTabModelSelector.addObserver(new TabModelSelectorObserver() {', '            @Override', '            public void onTabStateInitialized() {', '                if (!mCreatedTabOnStartup) return;', '', '                TabModel model = mTabModelSelector.getModel(false);', '                TasksUma.recordTasksUma(model);', '            }', '        });', '', '        mTabModelSelectorTabObserver = new TabModelSelectorTabObserver(mTabModelSelector) {', '            @Override', '            public void onDidFinishNavigation(Tab tab, NavigationHandle navigation) {', '                if (!navigation.hasCommitted() || !navigation.isInPrimaryMainFrame()) {', '                    return;', '                }', '                DataReductionPromoInfoBar.maybeLaunchPromoInfoBar(ChromeTabbedActivity.this,', '                        tab.getWebContents(), navigation.getUrl(), tab.isShowingErrorPage(),', '                        navigation.isFragmentNavigation(), navigation.httpStatusCode());', '                if (SyncErrorPromptUtils.isMessageUiEnabled()) {', '                    SyncErrorMessage.maybeShowMessageUi(', '                            getWindowAndroid(), ChromeTabbedActivity.this);', '                } else {', '                    SyncErrorInfoBar.maybeLaunchSyncErrorInfoBar(tab.getWebContents());', '                }', '                SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());', '            }', '        };', '        mAppIndexingUtil = new AppIndexingUtil(mTabModelSelector);', '', '        if (startIncognito) mTabModelSelector.selectModel(true);', '    }', '', '    @Override', '    protected LaunchCauseMetrics createLaunchCauseMetrics() {', '        return new TabbedActivityLaunchCauseMetrics(this);', '    }', '', '    @Override', '    public AppMenuPropertiesDelegate createAppMenuPropertiesDelegate() {', '        return new TabbedAppMenuPropertiesDelegate(this, getActivityTabProvider(),', '                getMultiWindowModeStateDispatcher(), getTabModelSelector(), getToolbarManager(),', '                getWindow().getDecorView(), this, mOverviewModeBehaviorSupplier,', '                ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                        ? mStartSurfaceSupplier', '                        : null,', '                mBookmarkBridgeSupplier,', '                ()', '                        -> getTabCreator(/*incognito=*/false)', '                                   .launchUrl(NewTabPageUtils.encodeNtpUrl(', '                                                      NewTabPageLaunchOrigin.WEB_FEED),', '                                           TabLaunchType.FROM_CHROME_UI),', '                getModalDialogManager(), getSnackbarManager());', '    }', '', '    private TabDelegateFactory getTabDelegateFactory() {', '        if (mTabDelegateFactory == null) {', '            mTabDelegateFactory = new TabbedModeTabDelegateFactory(this,', '                    getAppBrowserControlsVisibilityDelegate(), getShareDelegateSupplier(),', '                    mEphemeralTabCoordinatorSupplier,', '                    ((TabbedRootUiCoordinator) mRootUiCoordinator)::onContextMenuCopyLink,', '                    mRootUiCoordinator.getBottomSheetController(),', '                    /* ChromeActivityNativeDelegate */ this, /* isCustomTab= */ false,', '                    getBrowserControlsManager(), getFullscreenManager(),', '                    /* TabCreatorManager */ this, getTabModelSelectorSupplier(),', '                    getCompositorViewHolderSupplier(), getModalDialogManagerSupplier(),', '                    this::getSnackbarManager, getBrowserControlsManager(), getActivityTabProvider(),', '                    getLifecycleDispatcher(), getWindowAndroid(), this::getLastUserInteractionTime,', '                    this::hadWarmStart, mJankTracker, getToolbarManager()::getToolbar);', '        }', '        return mTabDelegateFactory;', '    }', '', '    @Override', '    protected Pair<ChromeTabCreator, ChromeTabCreator> createTabCreators() {', '        ChromeTabCreator.OverviewNTPCreator overviewNTPCreator = null;', '', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '            overviewNTPCreator = new ChromeTabCreator.OverviewNTPCreator() {', '                @Override', '                public boolean handleCreateNTPIfNeeded(boolean isNTP, boolean incognito,', '                        Tab parentTab, @NewTabPageLaunchOrigin int launchOrigin) {', '                    boolean shouldShowStart =', '                            showStartSurfaceHomeForNTP(isNTP, incognito, parentTab, launchOrigin);', '                    if (shouldShowStart) {', '                        mStartSurfaceParentTabSupplier.set(parentTab);', '                    }', '                    return shouldShowStart;', '                }', '', '                @Override', '                public void preTabInitialization(Tab tab, String url) {', '                    StartSurfaceConfiguration.maySetUserDataForEmptyTab(tab, url);', '                }', '            };', '        }', '        return Pair.create(', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, false, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()),', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, true, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()));', '    }', '', '    @Override', '    protected void initDeferredStartupForActivity() {', '        super.initDeferredStartupForActivity();', '        DeferredStartupHandler.getInstance().addDeferredTask(() -> {', '            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);', '            RecordHistogram.recordSparseHistogram(', '                    ""MemoryAndroid.DeviceMemoryClass"", am.getMemoryClass());', '', '            LauncherShortcutActivity.updateIncognitoShortcut(ChromeTabbedActivity.this);', '', '            ChromeSurveyController.initialize(mTabModelSelector, getLifecycleDispatcher(),', '                    ChromeTabbedActivity.this, MessageDispatcherProvider.from(getWindowAndroid()));', '', '            if (mStartSurfaceSupplier.get() != null) {', '                mStartSurfaceSupplier.get().onOverviewShownAtLaunch(', '                        mOverviewShownOnStart, getOnCreateTimestampMs());', '            }', '        });', '    }', '', '    @Override', '    protected void recordIntentToCreationTime(long timeMs) {', '        super.recordIntentToCreationTime(timeMs);', '        RecordHistogram.recordCustomTimesHistogram(""MobileStartup.IntentToCreationTime.TabbedMode"",', '                timeMs, 1, DateUtils.SECOND_IN_MILLIS * 30, 50);', '    }', '', '    @Override', '    protected boolean isStartedUpCorrectly(Intent intent) {', '        mWindowId = 0;', '        Bundle savedInstanceState = getSavedInstanceState();', '        int windowId = getExtraWindowIdFromIntent(intent);', '        if (savedInstanceState != null && savedInstanceState.containsKey(WINDOW_INDEX)) {', '            // Activity is recreated after destruction. |windowId| must not be valid in this case.', '            assert windowId == INVALID_WINDOW_ID;', '            mWindowId = savedInstanceState.getInt(WINDOW_INDEX, 0);', '        } else if (mMultiInstanceManager != null) {', ""            // |allocInstanceId| doesn't do any disk I/O that would add a long-running task"", '            // to pre-inflation startup.', '            boolean preferNew = getExtraPreferNewFromIntent(intent);', '            mWindowId = mMultiInstanceManager.allocInstanceId(windowId, getTaskId(), preferNew);', '        }', '        if (mWindowId == INVALID_WINDOW_ID) {', '            Log.i(TAG, ""Window ID not allocated. Finishing the activity"");', '            Toast.makeText(this, R.string.max_number_of_windows, Toast.LENGTH_LONG).show();', '            return false;', '        }', '', '        if (mMultiInstanceManager != null', '                && !mMultiInstanceManager.isStartedUpCorrectly(getTaskId())) {', '            return false;', '        }', '', '        return super.isStartedUpCorrectly(intent);', '    }', '', '    private static int getExtraWindowIdFromIntent(Intent intent) {', '        int windowId = IntentUtils.safeGetIntExtra(', '                intent, IntentHandler.EXTRA_WINDOW_ID, INVALID_WINDOW_ID);', '        return IntentUtils.isTrustedIntentFromSelf(intent) ? windowId : INVALID_WINDOW_ID;', '    }', '', '    private static boolean getExtraPreferNewFromIntent(Intent intent) {', '        return IntentUtils.safeGetBooleanExtra(intent, IntentHandler.EXTRA_PREFER_NEW, false);', '    }', '', '    @Override', '    public void terminateIncognitoSession() {', '        getTabModelSelector().getModel(true).closeAllTabs();', '    }', '', '    @Override', '    public boolean onMenuOrKeyboardAction(final int id, boolean fromMenu) {', '        final Tab currentTab = getActivityTab();', '        boolean currentTabIsNtp = isTabNtp(currentTab);', '        if (id == R.id.new_tab_menu_id) {', '            getTabModelSelector().getModel(false).commitAllTabClosures();', '            RecordUserAction.record(""MobileMenuNewTab"");', '            RecordUserAction.record(""MobileNewTabOpened"");', '            ReturnToChromeExperimentsUtil.onNewTabOpened();', '            reportNewTabShortcutUsed(false);', '            if (fromMenu) RecordUserAction.record(""MobileMenuNewTab.AppMenu"");', '', '            getTabCreator(false).launchNTP();', '', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '        } else if (id == R.id.new_incognito_tab_menu_id) {', '            if (IncognitoUtils.isIncognitoModeEnabled()) {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This action must be recorded before opening the incognito tab since UMA actions', '                // are dropped when an incognito tab is open.', '                RecordUserAction.record(""MobileMenuNewIncognitoTab"");', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '                reportNewTabShortcutUsed(true);', '                if (fromMenu) RecordUserAction.record(""MobileMenuNewIncognitoTab.AppMenu"");', '                getTabCreator(true).launchNTP();', '            }', '        } else if (id == R.id.all_bookmarks_menu_id) {', ""            // Note that 'currentTab' could be null in overview mode when start surface is"", '            // enabled.', '            getCompositorViewHolderSupplier().get().hideKeyboard(() -> {', '                BookmarkUtils.showBookmarkManager(', '                        ChromeTabbedActivity.this, getCurrentTabModel().isIncognito());', '            });', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_BOOKMARKS_MANAGER);', '            }', '', '            @BrowserProfileType', '            int type = getCurrentTabModel().isIncognito() ? BrowserProfileType.INCOGNITO', '                                                          : BrowserProfileType.REGULAR;', '            RecordHistogram.recordEnumeratedHistogram(', '                    ""Bookmarks.OpenBookmarkManager.PerProfileType"", type,', '                    BrowserProfileType.MAX_VALUE + 1);', '', '            RecordUserAction.record(""MobileMenuAllBookmarks"");', '        } else if (id == R.id.recent_tabs_menu_id) {', '            LoadUrlParams params =', '                    new LoadUrlParams(UrlConstants.RECENT_TABS_URL, PageTransition.AUTO_BOOKMARK);', '            boolean isInOverviewMode = isInOverviewMode();', '            if (isInOverviewMode && !isTablet()', '                    && ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                // When tapping the ""Recent tabs"" menu item from the overview page (Start surface or', '                // GTS), we will create the tab with the launch type FROM_START_SURFACE. Thus, if', '                // the back button is tapped on this ""Recent tabs"" page, it can go back to the', '                // overview page.', '                ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurface(', '                        params, getCurrentTabModel().isIncognito(), null);', '            } else if (currentTab != null) {', '                currentTab.loadUrl(params);', '            } else {', '                getTabCreator(getCurrentTabModel().isIncognito())', '                        .createNewTab(params, TabLaunchType.FROM_CHROME_UI, null);', '            }', '            if (isInOverviewMode) {', '                mOverviewModeController.hideOverview(true);', '            }', '', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_RECENT_TABS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuRecentTabs"");', '            ReturnToChromeExperimentsUtil.onRecentTabsOpened();', '        } else if (id == R.id.close_tab) {', '            getCurrentTabModel().closeTab(currentTab, true, false, true);', '            RecordUserAction.record(""MobileTabClosed"");', '        } else if (id == R.id.close_all_tabs_menu_id) {', '            // Close both incognito and normal tabs', '            getTabModelSelector().closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllTabs"");', '        } else if (id == R.id.close_all_incognito_tabs_menu_id) {', '            // Close only incognito tabs', '            getTabModelSelector().getModel(true).closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllIncognitoTabs"");', '        } else if (id == R.id.focus_url_bar) {', '            boolean isUrlBarVisible = !mOverviewModeController.overviewVisible()', '                    && (!isTablet() || getCurrentTabModel().getCount() != 0);', '            if (isUrlBarVisible) {', '                getToolbarManager().setUrlBarFocus(', '                        true, OmniboxFocusReason.MENU_OR_KEYBOARD_ACTION);', '            }', '        } else if (id == R.id.downloads_menu_id) {', '            OTRProfileID otrProfileID = null;', '            if (currentTab != null && currentTab.getWebContents() != null) {', '                Profile profile = Profile.fromWebContents(currentTab.getWebContents());', '                otrProfileID = profile != null ? profile.getOTRProfileID() : null;', '            }', '            DownloadUtils.showDownloadManager(', '                    this, currentTab, otrProfileID, DownloadOpenSource.MENU);', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_DOWNLOADS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuDownloadManager"");', '        } else if (id == R.id.open_recently_closed_tab) {', '            TabModel currentModel = mTabModelSelector.getCurrentModel();', '            if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedTab();', '            RecordUserAction.record(""MobileTabClosedUndoShortCut"");', '        } else if (id == R.id.enter_vr_id) {', '            VrModuleProvider.getDelegate().enterVrIfNecessary();', '        } else {', '            return super.onMenuOrKeyboardAction(id, fromMenu);', '        }', '        return true;', '    }', '', '    private boolean isTabNtp(Tab tab) {', '        return tab != null && UrlUtilities.isNTPUrl(tab.getUrl());', '    }', '', '    private boolean isTabRegularNtp(Tab tab) {', '        return isTabNtp(tab) && !tab.isIncognito();', '    }', '', '    private void onOmniboxFocusChanged(boolean hasFocus) {', '        mTabModalHandler.onOmniboxFocusChanged(hasFocus);', '    }', '', '    private void recordLauncherShortcutAction(boolean isIncognito) {', '        if (isIncognito) {', '            RecordUserAction.record(""Android.LauncherShortcut.NewIncognitoTab"");', '        } else {', '            RecordUserAction.record(""Android.LauncherShortcut.NewTab"");', '        }', '    }', '', '    @Override', '    public boolean handleBackPressed() {', '        if (!mUIWithNativeInitialized) return false;', '', '        if (getManualFillingComponent().handleBackPress()) return true;', '', '        if (exitFullscreenIfShowing()) {', '            return true;', '        }', '', '        // TODO(1091411): Find a better mechanism for back-press handling for features.', '        if (mRootUiCoordinator.getBottomSheetController().handleBackPress()) return true;', '', '        if (mTabModalHandler.handleBackPress()) return true;', '', '        final Tab currentTab = getActivityTab();', '        if (currentTab == null) {', '            moveTaskToBack(true);', '            return true;', '        }', '', '        // If we are in the tab switcher mode (not in the Start surface homepage) and not a tablet,', '        // then leave tab switcher mode on back.', '        if (mOverviewModeController.overviewVisible() && !isTablet()', '                && (mStartSurfaceSupplier.get() == null', '                        || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                                == StartSurfaceState.SHOWN_TABSWITCHER)) {', '            mOverviewModeController.hideOverview(true);', '            return true;', '        }', '', '        final WebContents webContents = currentTab.getWebContents();', '        if (webContents != null) {', '            RenderFrameHost focusedFrame = webContents.getFocusedFrame();', '            if (focusedFrame != null && focusedFrame.signalCloseWatcherIfActive()) return true;', '        }', '', '        if (getToolbarManager().back()) return true;', '', '        // If the current tab url is HELP_URL, then the back button should close the tab to', '        // get back to the previous state. The reason for startsWith check is that the', '        // actual redirected URL is a different system language based help url.', '        final @TabLaunchType int type = currentTab.getLaunchType();', '        final boolean helpUrl = currentTab.getUrl().getSpec().startsWith(HELP_URL_PREFIX);', '        if (type == TabLaunchType.FROM_CHROME_UI && helpUrl) {', '            getCurrentTabModel().closeTab(currentTab);', '            return true;', '        }', '', ""        // If we aren't in the overview mode, we handle the Tab with launchType"", '        // TabLaunchType.FROM_START_SURFACE or has ""OpenedFromStart"" property.', '        if (!mOverviewModeController.overviewVisible()', '                && (type == TabLaunchType.FROM_START_SURFACE', '                        || StartSurfaceUserData.isOpenedFromStart(currentTab))) {', '            if (StartSurfaceUserData.getKeepTab(currentTab)', '                    || StartSurfaceUserData.isOpenedFromStart(currentTab)) {', '                // If the current tab is created from the start surface with the keepTab property,']}, {'a': ['                // shows the Start surface non-incognito homepage to prevent a loop between the', '                // current tab and previous overview mode. Once in the Start surface, it will close', '                // Chrome if back button is tapped again.'], 'b': ['                // shows the Start surface Homepage to prevent a loop between the current tab and', '                // previous overview mode. Once in the Start surface, it will close Chrome if back', '                // button is tapped again.']}, {'ab': ['                if (currentTab.isIncognito()) {', '                    if (!currentTab.isClosing()) {', '                        getCurrentTabModel().closeTab(currentTab);', '                    }']}, {'a': ['                    mTabModelSelector.selectModel(/*incognito=*/false);'], 'b': ['                    mTabModelSelector.selectModel(false);']}, {'ab': ['                }', '                showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '            } else {', '                // Otherwise, clicking the back button should close the tab and go back to the', '                // previous overview mode.', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS);', '                if (!currentTab.isClosing()) {', '                    getCurrentTabModel().closeTab(currentTab);', '                }', '            }', '            return true;', '        }', '', '        final boolean shouldCloseTab = backShouldCloseTab(currentTab);', '', '        // Minimize the app if either:', '        // - we decided not to close the tab', '        // - we decided to close the tab, but it was opened by an external app, so we will go', '        //   exit Chrome on top of closing the tab', '        final boolean minimizeApp =', '                !shouldCloseTab || TabAssociatedApp.isOpenedFromExternalApp(currentTab);', '        if (minimizeApp) {', '            if (shouldCloseTab) {', '                sendToBackground(currentTab);', '                return true;', '            } else {', '                sendToBackground(null);', '                return true;', '            }', '        } else if (shouldCloseTab) {', '            currentTab.getWebContents().dispatchBeforeUnload(false);', '            return true;', '        }', '', '        assert false : ""The back button should have already been handled by this point"";', '        return false;', '    }', '', '    /**', '     * [true]: Reached the bottom of the back stack on a tab the user did not explicitly', '     * create (i.e. it was created by an external app or opening a link in background, etc).', '     * [false]: Reached the bottom of the back stack on a tab that the user explicitly', '     * created (e.g. selecting ""new tab"" from menu).', '     *', '     * @return Whether pressing the back button on the provided Tab should close the Tab.', '     */', '    @Override', '    public boolean backShouldCloseTab(Tab tab) {', '        if (!tab.isInitialized()) {', '            return false;', '        }', '        @TabLaunchType', '        int type = tab.getLaunchType();', '', '        return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_EXTERNAL_APP', '                || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND', '                || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                || (type == TabLaunchType.FROM_RESTORE', '                        && CriticalPersistedTabData.from(tab).getParentId() != Tab.INVALID_TAB_ID);', '    }', '', '    /**', '     * Sends this Activity to the background.', '     *', '     * @param tabToClose Tab that will be closed once the app is not visible.', '     */', '    private void sendToBackground(@Nullable final Tab tabToClose) {', '        Log.i(TAG, ""sendToBackground(): "" + tabToClose);', '        moveTaskToBack(true);', '        if (tabToClose != null) {', ""            // In the case of closing a tab upon minimization, don't allow the close action to"", ""            // happen until after our app is minimized to make sure we don't get a brief glimpse of"", '            // the newly active tab before we exit Chrome.', '            //', ""            // If the runnable doesn't run before the Activity dies, Chrome won't crash but the tab"", ""            // won't be closed (crbug.com/587565)."", '            mHandler.postDelayed(() -> {', '                boolean hasNextTab =', '                        getCurrentTabModel().getNextTabIfClosed(tabToClose.getId()) != null;', '                getCurrentTabModel().closeTab(tabToClose, false, true, false);', '', '                // If there is no next tab to open, enter overview mode.', '                if (!hasNextTab) showOverview(StartSurfaceState.SHOWING_START);', '            }, CLOSE_TAB_ON_MINIMIZE_DELAY_MS);', '        }', '    }', '', '    @Override', '    public boolean moveTaskToBack(boolean nonRoot) {', '        try {', '            return super.moveTaskToBack(nonRoot);', '        } catch (NullPointerException e) {', '            // Work around framework bug described in https://crbug.com/817567.', '            finish();', '            return true;', '        }', '    }', '', '    /**', '     * Launch a URL from an intent.', '     *', '     * @param url           The url from the intent.', '     * @param referer       Optional referer URL to be used.', '     * @param headers       Optional headers to be sent when opening the URL.', '     * @param externalAppId External app id.', '     * @param forceNewTab   Whether to force the URL to be launched in a new tab or to fall', '     *                      back to the default behavior for making that determination.', '     * @param isRendererInitiated Whether the intent is originally from browser renderer process.', '     * @param initiatorOrigin Origin that initiates the intent.', '     * @param intent        The original intent.', '     */', '    private Tab launchIntent(', '            LoadUrlParams loadUrlParams, String externalAppId, boolean forceNewTab, Intent intent) {', '        if (mUIWithNativeInitialized && !UrlUtilities.isNTPUrl(loadUrlParams.getUrl())) {', '            mOverviewModeController.hideOverview(false);', '            getToolbarManager().finishAnimations();', '        }', '        if (IntentHandler.wasIntentSenderChrome(intent)) {', '            // If the intent was launched by chrome, open the new tab in the appropriate model.', '            boolean isIncognito = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB, false);', '            @TabLaunchType', '            Integer launchType = IntentHandler.getTabLaunchType(intent);', '            if (launchType == null) {', '                if (IntentUtils.safeGetBooleanExtra(', '                            intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false)) {', '                    launchType = TabLaunchType.FROM_LAUNCHER_SHORTCUT;', '                } else if (IntentUtils.safeGetBooleanExtra(', '                                   intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false)) {', '                    launchType = TabLaunchType.FROM_APP_WIDGET;', '                } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                    launchType = TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB;', '                } else {', '                    // Using FROM_LINK ensures the tab is parented to the current tab, which allows', '                    // the back button to close these tabs and restore selection to the previous', '                    // tab.', '                    launchType = TabLaunchType.FROM_LINK;', '                }', '            }', '            return getTabCreator(isIncognito).createNewTab(loadUrlParams, launchType, null, intent);', '        }', '', '        // Check if the tab is being created from a Reader Mode navigation.', '        if (ReaderModeManager.isEnabled() && ReaderModeManager.isReaderModeCreatedIntent(intent)) {', '            Bundle extras = intent.getExtras();', '            int readerParentId = IntentUtils.safeGetInt(', '                    extras, ReaderModeManager.EXTRA_READER_MODE_PARENT, Tab.INVALID_TAB_ID);', '            extras.remove(ReaderModeManager.EXTRA_READER_MODE_PARENT);', '            // Set the parent tab to the tab that Reader Mode started from.', '            if (readerParentId != Tab.INVALID_TAB_ID && mTabModelSelector != null) {', '                return getCurrentTabCreator().createNewTab(', '                        new LoadUrlParams(loadUrlParams.getUrl(), PageTransition.LINK),', '                        TabLaunchType.FROM_LINK, mTabModelSelector.getTabById(readerParentId));', '            }', '        }', '', '        return getTabCreator(false).launchUrlFromExternalApp(', '                loadUrlParams, externalAppId, forceNewTab, intent);', '    }', '', '    private void showOverview(@StartSurfaceState int state) {', '        showOverview(state, NewTabPageLaunchOrigin.UNKNOWN);', '    }', '', '    // TODO(crbug.com/1115757): After crrev.com/c/2315823, Overview state and Startsurface state are', '    // two different things, we actual can split this into two methods: showOverview() and', ""    // showStartSurface(state). Let's do some auditing and clean up before perform the actual split."", '    private void showOverview(', '            @StartSurfaceState int state, @NewTabPageLaunchOrigin int launchOrigin) {', '        assert (state == StartSurfaceState.SHOWING_TABSWITCHER', '                || state == StartSurfaceState.SHOWING_HOMEPAGE', '                || state == StartSurfaceState.SHOWING_PREVIOUS', '                || state == StartSurfaceState.SHOWING_START);', '        if (mIsAccessibilityTabSwitcherEnabled != null && mIsAccessibilityTabSwitcherEnabled', '                && mOverviewModeController != null) {', '            // TODO(1200727): This is a temporary fix that should be removed once grid tab switcher', '            //                is completely launched. The ""start surface"" is now created regardless', '            //                of the state of accessibility, so we check that mode first and try', '            //                showing the overview list before going to the start surface.', '            mOverviewModeController.showOverview(false);', '        } else if (mStartSurfaceSupplier.get() != null) {', '            if (ReturnToChromeExperimentsUtil.shouldHideStartSurfaceWithAccessibilityOn(this)', '                    || !HomepageManager.isHomepageEnabled()) {', '                state = StartSurfaceState.SHOWING_TABSWITCHER;', '            }', '            mStartSurfaceSupplier.get().getController().setOverviewState(state, launchOrigin);', '        }', '', '        if (mOverviewModeController == null) return;', '', '        if (mOverviewModeController.overviewVisible()) {', '            if (didFinishNativeInitialization()) {', '                getCompositorViewHolderSupplier().get().hideKeyboard(() -> {});', '            }', '            return;', '        }', '', '        Tab currentTab = getActivityTab();', ""        // If we don't have a current tab, show the overview mode."", '        if (currentTab == null) {', '            mOverviewModeController.showOverview(false);', '        } else {', '            getCompositorViewHolderSupplier().get().hideKeyboard(', '                    () -> mOverviewModeController.showOverview(true));', '            updateAccessibilityState(false);', '            TasksUma.recordTabLaunchType(getCurrentTabModel());', '        }', '    }', '', '    private void hideOverview() {', '        assert (mOverviewModeController.overviewVisible());', '        if (getCurrentTabModel().getCount() != 0) {', ""            // Don't hide overview if current tab stack is empty()"", '            mOverviewModeController.hideOverview(true);', '            updateAccessibilityState(true);', '        }', '    }', '', '    /**', '     * @return Whether opening a new tab is handled by the Start surface. It may show the Start', '     * surface, or open a new tab with the omnibox get focused, depending on the value of', '     * {@link StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB}.', '     */', '    private boolean showStartSurfaceHomeForNTP(boolean isNTP, boolean incognito, Tab parentTab,', '            @NewTabPageLaunchOrigin int launchOrigin) {', '        if (!isNTP', '                || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                        this, incognito, isTablet())) {', '            return false;', '        }', '', '        getTabModelSelector().selectModel(incognito);', '        if (StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB.getValue()', '                && launchOrigin != NewTabPageLaunchOrigin.WEB_FEED) {', '            Runnable emptyTabCloseCallback = isInOverviewMode() ? () -> {', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS, launchOrigin);', '            } : null;', '            ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurfaceAsNewTab(null,', '                    PageTransition.AUTO_TOPLEVEL, incognito, parentTab, getCurrentTabModel(),', '                    emptyTabCloseCallback);', '        } else if (TabUiFeatureUtilities.supportInstantStart(isTablet(), this)', '                || (getTabModelSelector().isTabStateInitialized() && isLayoutManagerCreated())) {', '            showOverview(StartSurfaceState.SHOWING_HOMEPAGE, launchOrigin);', '        }', '        return true;', '    }', '', '    private void updateAccessibilityState(boolean enabled) {', '        Tab currentTab = getActivityTab();', '        WebContents webContents = currentTab != null ? currentTab.getWebContents() : null;', '        if (webContents != null) {', '            WebContentsAccessibility.fromWebContents(webContents).setState(enabled);', '        }', '    }', '', '    @Override', '    public void onSaveInstanceState(Bundle outState) {', '        super.onSaveInstanceState(outState);', '        CipherFactory.getInstance().saveToBundle(outState);', '        outState.putInt(', '                WINDOW_INDEX, TabWindowManagerSingleton.getInstance().getIndexForWindow(this));', '        Boolean is_incognito = getCurrentTabModel().isIncognito();', '        outState.putBoolean(IS_INCOGNITO_SELECTED, is_incognito);', ""        // If it's Incognito and native is initialized and profile exists, serialize duration"", '        // service state.', '        if (is_incognito && ProfileManager.isInitialized()) {', '            AndroidSessionDurationsServiceState.serializeFromNative(', '                    outState, getCurrentTabModel().getProfile());', '        }', '    }', '', '    @Override', '    public void onDestroyInternal() {', '        if (mCallbackController != null) {', '            mCallbackController.destroy();', '            mCallbackController = null;', '        }', '', '        if (mTabModelSelectorTabObserver != null) {', '            mTabModelSelectorTabObserver.destroy();', '            mTabModelSelectorTabObserver = null;', '        }', '', '        if (mTabModelObserver != null) mTabModelObserver.destroy();', '', '        if (mUndoBarPopupController != null) {', '            mUndoBarPopupController.destroy();', '            mUndoBarPopupController = null;', '        }', '', '        if (mAppIndexingUtil != null) {', '            mAppIndexingUtil.destroy();', '            mAppIndexingUtil = null;', '        }', '', '        if (mStartSurfaceSupplier.get() != null) {', '            mStartSurfaceSupplier.get().destroy();', '        }', '', '        if (mStartupPaintPreviewHelperSupplier != null) {', '            mStartupPaintPreviewHelperSupplier.destroy();', '        }', '', '        if (mJankTracker != null) {', '            mJankTracker.destroy();', '            mJankTracker = null;', '        }', '', '        IncognitoTabHostRegistry.getInstance().unregister(mIncognitoTabHost);', '', '        TabObscuringHandler tabObscuringHandler = getTabObscuringHandler();', '        if (tabObscuringHandler != null) {', '            getTabObscuringHandler().removeObserver(mCompositorViewHolder);', '            getTabObscuringHandler().removeObserver(mOverviewListLayout);', '        }', '', '        if (isTablet()) ChromeAccessibilityUtil.get().removeObserver(mCompositorViewHolder);', '        ChromeAccessibilityUtil.get().removeObserver(this);', '        ChromeAccessibilityUtil.get().removeObserver(mLayoutManager);', '', '        if (mTabDelegateFactory != null) mTabDelegateFactory.destroy();', '', '        mAppLaunchDrawBlocker.destroy();', '', '        super.onDestroyInternal();', '    }', '', '    @Override', '    protected void destroyTabModels() {', '        if (mTabModelOrchestrator != null) {', '            mTabModelOrchestrator.destroy();', '        }', '    }', '', '    @Override', '    public void onTrimMemory(int level) {', '        super.onTrimMemory(level);', '        if (ChromeApplicationImpl.isSevereMemorySignal(level)) {', '            NativePageAssassin.getInstance().freezeAllHiddenPages();', '        }', '    }', '', '    @Override', '    public boolean dispatchKeyEvent(KeyEvent event) {', '        Boolean result = KeyboardShortcuts.dispatchKeyEvent(event, mUIWithNativeInitialized,', '                getFullscreenManager(), /* menuOrKeyboardActionController= */ this);', '        return result != null ? result : super.dispatchKeyEvent(event);', '    }', '', '    @Override', '    public boolean onKeyDown(int keyCode, KeyEvent event) {', '        if (!mUIWithNativeInitialized) {', '            return super.onKeyDown(keyCode, event);', '        }', '        // Detecting a long press of the back button via onLongPress is broken in Android N.', '        // To work around this, use a postDelayed, which is supported in all versions.', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()', '                && !getFullscreenManager().getPersistentFullscreenMode()) {', '            if (mShowHistoryRunnable == null) mShowHistoryRunnable = this::showFullHistorySheet;', '            mHandler.postDelayed(mShowHistoryRunnable, ViewConfiguration.getLongPressTimeout());', '            return super.onKeyDown(keyCode, event);', '        }', '        boolean isCurrentTabVisible = !mOverviewModeController.overviewVisible()', '                && (!isTablet() || getCurrentTabModel().getCount() != 0);', '        return KeyboardShortcuts.onKeyDown(event, isCurrentTabVisible, true, getTabModelSelector(),', '                       /* menuOrKeyboardActionController= */ this, getToolbarManager())', '                || super.onKeyDown(keyCode, event);', '    }', '', '    private void showFullHistorySheet() {', '        ((TabbedRootUiCoordinator) mRootUiCoordinator).showFullHistorySheet();', '    }', '', '    @Override', '    public boolean onKeyUp(int keyCode, KeyEvent event) {', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()) {', '            mHandler.removeCallbacks(mShowHistoryRunnable);', '            mShowHistoryRunnable = null;', '            if (event.getEventTime() - event.getDownTime()', '                            >= ViewConfiguration.getLongPressTimeout()', '                    && NavigationSheet.isInstanceShowing(', '                            mRootUiCoordinator.getBottomSheetController())) {', '                // If tab history popup is showing, do not process the keyUp event', '                // which will dismiss it immediately.', '                return true;', '            }', '        }', '        return super.onKeyUp(keyCode, event);', '    }', '', '    @VisibleForTesting', '    public boolean hasPendingNavigationRunnableForTesting() {', '        ThreadUtils.assertOnUiThread();', '        return mShowHistoryRunnable != null;', '    }', '', '    @Override', '    public void onProvideKeyboardShortcuts(', '            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {', '        data.addAll(KeyboardShortcuts.createShortcutGroup(this));', '    }', '', '    @VisibleForTesting', '    public View getTabsView() {', '        return getCompositorViewHolderSupplier().get();', '    }', '', '    @VisibleForTesting', '    public LayoutManagerChrome getLayoutManager() {', '        return (LayoutManagerChrome) getCompositorViewHolderSupplier().get().getLayoutManager();', '    }', '', '    @VisibleForTesting', '    public Layout getOverviewListLayout() {', '        return getLayoutManager().getOverviewListLayout();', '    }', '', '    @VisibleForTesting', '    public StartSurface getStartSurface() {', '        return mStartSurfaceSupplier.get();', '    }', '', '    private ComposedBrowserControlsVisibilityDelegate getAppBrowserControlsVisibilityDelegate() {', '        // TODO(jinsukkim): Move this to RootUiCoordinator.', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getAppBrowserControlsVisibilityDelegate();', '    }', '', '    @Override', '    protected ModalDialogManager createModalDialogManager() {', '        ModalDialogManager manager = super.createModalDialogManager();', '        // TODO(crbug.com/1157310): Transition this::method refs to dedicated suppliers.', '        mTabModalHandler = new TabModalLifetimeHandler(this, getLifecycleDispatcher(), manager,', '                this::getAppBrowserControlsVisibilityDelegate, this::getTabObscuringHandler,', '                this::getToolbarManager, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), this::getBrowserControlsManager,', '                this::getFullscreenManager);', '        return manager;', '    }', '', '    // App Menu related code -----------------------------------------------------------------------', '', '    @Override', '    public boolean canShowAppMenu() {', '        // The popup menu relies on the model created during the full UI initialization, so do not', '        // attempt to show the menu until the UI creation has finished.', '        if (!mUIWithNativeInitialized) return false;', '', ""        // If the current active tab is showing a tab modal dialog, an app menu shouldn't be shown"", '        // in any cases, e.g. when a hardware menu button is clicked.', '        Tab tab = getActivityTab();', '        if (tab != null && ChromeTabModalPresenter.isDialogShowing(tab)) return false;', '', '        return super.canShowAppMenu();', '    }', '', '    @Override', '    public boolean isInOverviewMode() {', '        return mOverviewModeController != null && mOverviewModeController.overviewVisible();', '    }', '', '    @Override', '    protected IntentHandlerDelegate createIntentHandlerDelegate() {', '        return new InternalIntentDelegate();', '    }', '', '    @Override', '    public void onSceneChange(Layout layout) {', '        super.onSceneChange(layout);', '        if (!layout.shouldDisplayContentOverlay()) mTabModelSelector.onTabsViewShown();', '    }', '', '    /**', '     * Writes the tab state to disk.', '     */', '    @VisibleForTesting', '    public void saveState() {', '        mTabModelOrchestrator.saveState();', '    }', '', '    @Override', '    public void onEnterVr() {', '        super.onEnterVr();', '        mControlContainer.setVisibility(View.INVISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate == null) {', '            mVrBrowserControlsVisibilityDelegate =', '                    new BrowserControlsVisibilityDelegate(BrowserControlsState.BOTH);', '            getAppBrowserControlsVisibilityDelegate().addDelegate(', '                    mVrBrowserControlsVisibilityDelegate);', '        }', '        mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.HIDDEN);', '    }', '', '    @Override', '    public void onExitVr() {', '        super.onExitVr();', '        mControlContainer.setVisibility(View.VISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate != null) {', '            mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.BOTH);', '        }', '    }', '', '    @Override', '    protected void applyThemeOverlays() {', '        super.applyThemeOverlays();', '', '        if (TabManagementModuleProvider.getDelegate() != null) {', '            TabManagementModuleProvider.getDelegate().applyThemeOverlays(this);', '        }', '    }', '', '    @Override', '    protected boolean supportsDynamicColors() {', '        return CachedFeatureFlags.isEnabled(ChromeFeatureList.DYNAMIC_COLOR_ANDROID);', '    }', '', '    /**', '     * Reports that a new tab launcher shortcut was selected or an action equivalent to a shortcut', '     * was performed.', '     * @param isIncognito Whether the shortcut or action created a new incognito tab.', '     */', '    @TargetApi(Build.VERSION_CODES.N_MR1)', '    private void reportNewTabShortcutUsed(boolean isIncognito) {', '        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) return;', '', '        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);', '        shortcutManager.reportShortcutUsed(', '                isIncognito ? ""new-incognito-tab-shortcut"" : ""new-tab-shortcut"");', '    }', '', '    @VisibleForTesting', '    public MultiInstanceManager getMultiInstanceMangerForTesting() {', '        return mMultiInstanceManager;', '    }', '', '    @VisibleForTesting', '    public ChromeNextTabPolicySupplier getNextTabPolicySupplier() {', '        return (ChromeNextTabPolicySupplier) mNextTabPolicySupplier;', '    }', '}', '']}]",chromium%2Fsrc~main~Ib63fff1d02f6696a61891dd6449012e0c7a5d027,8731f872fe833f2c64a8604ff02ad616355d9fed,chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java,7fa9753f_9d8ef123_before.java,7fa9753f_9d8ef123_after.java,ChromeTabbedActivity::handleBackPressed,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } VAR_785 ( false ) ; } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }",I think it is fine to close the VAR_254.
2,b5ea4309_819de63f,2168.0,Ack,,,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser;', '', 'import android.annotation.TargetApi;', 'import android.app.ActivityManager;', 'import android.content.ComponentName;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.content.pm.ApplicationInfo;', 'import android.content.pm.ShortcutManager;', 'import android.os.Build;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.text.TextUtils;', 'import android.text.format.DateUtils;', 'import android.util.Pair;', 'import android.view.KeyEvent;', 'import android.view.KeyboardShortcutGroup;', 'import android.view.Menu;', 'import android.view.View;', 'import android.view.View.OnClickListener;', 'import android.view.ViewConfiguration;', 'import android.view.ViewGroup;', 'import android.view.Window;', 'import android.view.WindowManager;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', 'import androidx.lifecycle.Lifecycle;', 'import androidx.lifecycle.LifecycleObserver;', 'import androidx.lifecycle.LifecycleRegistry;', '', 'import org.chromium.base.CallbackController;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.MemoryPressureListener;', 'import org.chromium.base.ThreadUtils;', 'import org.chromium.base.TraceEvent;', 'import org.chromium.base.annotations.UsedByReflection;', 'import org.chromium.base.jank_tracker.JankTrackerImpl;', 'import org.chromium.base.library_loader.LibraryLoader;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.supplier.ObservableSupplierImpl;', 'import org.chromium.base.supplier.OneShotCallback;', 'import org.chromium.base.supplier.OneshotSupplier;', 'import org.chromium.base.supplier.OneshotSupplierImpl;', 'import org.chromium.base.supplier.Supplier;', 'import org.chromium.base.supplier.UnownedUserDataSupplier;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.cc.input.BrowserControlsState;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.IntentHandler.IntentHandlerDelegate;', 'import org.chromium.chrome.browser.IntentHandler.TabOpenType;', 'import org.chromium.chrome.browser.accessibility_tab_switcher.OverviewListLayout;', 'import org.chromium.chrome.browser.app.ChromeActivity;', 'import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.metrics.TabbedActivityLaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.ChromeNextTabPolicySupplier;', 'import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;', 'import org.chromium.chrome.browser.app.tabmodel.TabWindowManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.TabbedModeTabModelOrchestrator;', 'import org.chromium.chrome.browser.bookmarks.BookmarkUtils;', 'import org.chromium.chrome.browser.browserservices.intents.WebappConstants;', 'import org.chromium.chrome.browser.compositor.CompositorViewHolder;', 'import org.chromium.chrome.browser.compositor.bottombar.ephemeraltab.EphemeralTabCoordinator;', 'import org.chromium.chrome.browser.compositor.layouts.Layout;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChrome;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromePhone;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromeTablet;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeBehavior;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeController;', 'import org.chromium.chrome.browser.cookies.CookiesFetcher;', 'import org.chromium.chrome.browser.crypto.CipherFactory;', 'import org.chromium.chrome.browser.dependency_injection.ChromeActivityComponent;', 'import org.chromium.chrome.browser.device.DeviceClassManager;', 'import org.chromium.chrome.browser.dom_distiller.ReaderModeManager;', 'import org.chromium.chrome.browser.download.DownloadNotificationService;', 'import org.chromium.chrome.browser.download.DownloadOpenSource;', 'import org.chromium.chrome.browser.download.DownloadUtils;', 'import org.chromium.chrome.browser.feature_engagement.TrackerFactory;', 'import org.chromium.chrome.browser.feed.FeedSurfaceTracker;', 'import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;', 'import org.chromium.chrome.browser.flags.ActivityType;', 'import org.chromium.chrome.browser.flags.CachedFeatureFlags;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.fonts.FontPreloader;', 'import org.chromium.chrome.browser.gesturenav.NavigationSheet;', 'import org.chromium.chrome.browser.homepage.HomepageManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationPresenceController;', 'import org.chromium.chrome.browser.incognito.IncognitoProfileDestroyer;', 'import org.chromium.chrome.browser.incognito.IncognitoStartup;', 'import org.chromium.chrome.browser.incognito.IncognitoTabLauncher;', 'import org.chromium.chrome.browser.incognito.IncognitoTabSnapshotController;', 'import org.chromium.chrome.browser.incognito.IncognitoUtils;', 'import org.chromium.chrome.browser.infobar.DataReductionPromoInfoBar;', 'import org.chromium.chrome.browser.infobar.SyncErrorInfoBar;', 'import org.chromium.chrome.browser.layouts.LayoutStateProvider;', 'import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.metrics.AndroidSessionDurationsServiceState;', 'import org.chromium.chrome.browser.metrics.LaunchMetrics;', 'import org.chromium.chrome.browser.metrics.MainIntentBehaviorMetrics;', 'import org.chromium.chrome.browser.modaldialog.ChromeTabModalPresenter;', 'import org.chromium.chrome.browser.modaldialog.TabModalLifetimeHandler;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceChromeTabbedActivity;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceManager;', 'import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;', 'import org.chromium.chrome.browser.native_page.NativePageAssassin;', 'import org.chromium.chrome.browser.navigation_predictor.NavigationPredictorBridge;', 'import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;', 'import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;', 'import org.chromium.chrome.browser.ntp.NewTabPageUma;', 'import org.chromium.chrome.browser.ntp.NewTabPageUtils;', 'import org.chromium.chrome.browser.omnibox.OmniboxFocusReason;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelper;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelperSupplier;', 'import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.profiles.OTRProfileID;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.profiles.ProfileManager;', 'import org.chromium.chrome.browser.reengagement.ReengagementNotificationController;', 'import org.chromium.chrome.browser.search_engines.SearchEngineChoiceNotification;', 'import org.chromium.chrome.browser.settings.SettingsLauncherImpl;', 'import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;', 'import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;', 'import org.chromium.chrome.browser.survey.ChromeSurveyController;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorPromptUtils;', 'import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.tab.TabAssociatedApp;', 'import org.chromium.chrome.browser.tab.TabCreationState;', 'import org.chromium.chrome.browser.tab.TabDelegateFactory;', 'import org.chromium.chrome.browser.tab.TabLaunchType;', 'import org.chromium.chrome.browser.tab.TabSelectionType;', 'import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedAppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedRootUiCoordinator;', 'import org.chromium.chrome.browser.tabmodel.ChromeTabCreator;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHost;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostRegistry;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostUtils;', 'import org.chromium.chrome.browser.tabmodel.NextTabPolicy.NextTabPolicySupplier;', 'import org.chromium.chrome.browser.tabmodel.TabModel;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelector;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorBase;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabModelObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelUtils;', 'import org.chromium.chrome.browser.tabmodel.TabWindowManager;', 'import org.chromium.chrome.browser.tasks.ConditionalTabStripUtils;', 'import org.chromium.chrome.browser.tasks.EngagementTimeUtil;', 'import org.chromium.chrome.browser.tasks.JourneyManager;', 'import org.chromium.chrome.browser.tasks.ReturnToChromeExperimentsUtil;', 'import org.chromium.chrome.browser.tasks.TasksUma;', 'import org.chromium.chrome.browser.tasks.tab_management.TabGroupUi;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementDelegate;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementModuleProvider;', 'import org.chromium.chrome.browser.tasks.tab_management.TabUiFeatureUtilities;', 'import org.chromium.chrome.browser.toolbar.ToolbarButtonInProductHelpController;', 'import org.chromium.chrome.browser.toolbar.ToolbarIntentMetadata;', 'import org.chromium.chrome.browser.toolbar.ToolbarManager;', 'import org.chromium.chrome.browser.toolbar.top.ToolbarControlContainer;', 'import org.chromium.chrome.browser.translate.TranslateIntentHandler;', 'import org.chromium.chrome.browser.ui.AppLaunchDrawBlocker;', 'import org.chromium.chrome.browser.ui.RootUiCoordinator;', 'import org.chromium.chrome.browser.ui.TabObscuringHandler;', 'import org.chromium.chrome.browser.ui.appmenu.AppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.undo_tab_close_snackbar.UndoBarController;', 'import org.chromium.chrome.browser.usage_stats.UsageStatsService;', 'import org.chromium.chrome.browser.util.ChromeAccessibilityUtil;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.chrome.features.start_surface.StartSurface;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.chrome.features.start_surface.StartSurfaceState;', 'import org.chromium.chrome.features.start_surface.StartSurfaceUserData;', 'import org.chromium.components.browser_ui.settings.SettingsLauncher;', 'import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;', 'import org.chromium.components.browser_ui.util.ComposedBrowserControlsVisibilityDelegate;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.embedder_support.util.UrlUtilities;', 'import org.chromium.components.feature_engagement.EventConstants;', 'import org.chromium.components.messages.MessageDispatcherProvider;', 'import org.chromium.components.profile_metrics.BrowserProfileType;', 'import org.chromium.components.webapps.ShortcutSource;', 'import org.chromium.content_public.browser.LoadUrlParams;', 'import org.chromium.content_public.browser.NavigationHandle;', 'import org.chromium.content_public.browser.RenderFrameHost;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.content_public.browser.WebContents;', 'import org.chromium.content_public.browser.WebContentsAccessibility;', 'import org.chromium.content_public.common.ContentSwitches;', 'import org.chromium.ui.base.PageTransition;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.widget.Toast;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.HashSet;', 'import java.util.List;', 'import java.util.Locale;', '', '/**', ' * This is the main activity for ChromeMobile when not running in document mode.  All the tabs', ' * are accessible via a chrome specific tab switching UI.', ' */', 'public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>', '        implements ChromeAccessibilityUtil.Observer {', '    private static final String TAG = ""ChromeTabbedActivity"";', '', '    private static final String HELP_URL_PREFIX = ""https://support.google.com/chrome/"";', '', '    protected static final String WINDOW_INDEX = ""window_index"";', '', '    private static final String IS_INCOGNITO_SELECTED = ""is_incognito_selected"";', '', '    private static final int INVALID_WINDOW_ID = TabWindowManager.INVALID_WINDOW_INDEX;', '', '    // How long to delay closing the current tab when our app is minimized.  Have to delay this', ""    // so that we don't show the contents of the next tab while minimizing."", '    private static final long CLOSE_TAB_ON_MINIMIZE_DELAY_MS = 500;', '', '    // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs', '    // restore. This is needed because we do not know when reading PartnerBrowserCustomizations', '    // provider will be finished.', '    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;', '', '    /**', '     * Sending an intent with this action to Chrome will cause it to close all tabs', '     * (iff the --enable-test-intents command line flag is set). If a URL is supplied in the', '     * intent data, this will be loaded and unaffected by the close all action.', '     */', '    private static final String ACTION_CLOSE_TABS =', '            ""com.google.android.apps.chrome.ACTION_CLOSE_TABS"";', '', '    @VisibleForTesting', '    public static final String STARTUP_UMA_HISTOGRAM_SUFFIX = "".Tabbed"";', '', '    // Name of the ChromeTabbedActivity alias that handles MAIN intents.', '    public static final String MAIN_LAUNCHER_ACTIVITY_NAME = ""com.google.android.apps.chrome.Main"";', '', '    public static final SettingsLauncher SETTINGS_LAUNCHER = new SettingsLauncherImpl();', '', '    public static final HashSet<String> TABBED_MODE_COMPONENT_NAMES = new HashSet<String>() {', '        {', '            add(ChromeTabbedActivity.class.getName());', '            add(MultiInstanceChromeTabbedActivity.class.getName());', '            add(ChromeTabbedActivity2.class.getName());', '            add(MAIN_LAUNCHER_ACTIVITY_NAME);', '        }', '    };', '', '    /**', '     * Identifies a histogram to use in {@link #maybeDispatchExplicitMainViewIntent(Intent, int)}.', '     */', '    @IntDef({DispatchedBy.ON_CREATE, DispatchedBy.ON_NEW_INTENT})', '    @Retention(RetentionPolicy.SOURCE)', '    private @interface DispatchedBy {', '        int ON_CREATE = 1;', '        int ON_NEW_INTENT = 2;', '    }', '', '    // Count histogram used to track number of tabs when we show the Overview on Return to Chrome.', '    private static final String TAB_COUNT_ON_RETURN = ""Tabs.TabCountOnStartScreenShown"";', '', '    private final MainIntentBehaviorMetrics mMainIntentMetrics;', '    private @Nullable MultiInstanceManager mMultiInstanceManager;', '', '    private UndoBarController mUndoBarPopupController;', '', '    private LayoutManagerChrome mLayoutManager;', '', '    private ViewGroup mContentContainer;', '', '    private ToolbarControlContainer mControlContainer;', '', '    private TabbedModeTabModelOrchestrator mTabModelOrchestrator;', '    private TabModelSelectorBase mTabModelSelector;', '    private TabModelSelectorTabObserver mTabModelSelectorTabObserver;', '    private TabModelSelectorTabModelObserver mTabModelObserver;', '', '    private BrowserControlsVisibilityDelegate mVrBrowserControlsVisibilityDelegate;', '    private TabModalLifetimeHandler mTabModalHandler;', '', '    private boolean mUIWithNativeInitialized;', '', '    private Boolean mIsAccessibilityTabSwitcherEnabled;', '', '    private LocaleManager mLocaleManager;', '', '    private AppIndexingUtil mAppIndexingUtil;', '', '    private Runnable mShowHistoryRunnable;', '', '    private CompositorViewHolder mCompositorViewHolder;', '    private OverviewListLayout mOverviewListLayout;', '    /**', '     * Keeps track of whether or not a specific tab was created based on the startup intent.', '     */', '    private boolean mCreatedTabOnStartup;', '', '    // Whether or not the initial tab is being created.', '    private boolean mPendingInitialTabCreation;', '', '    // Whether {@link setInitialOverviewState()} has been called within the current onStart/onStop', '    // session.', '    private boolean mHasDeterminedOverviewStateForCurrentSession;', '    /**', '     *  Keeps track of the pref for the last time since this activity was stopped.', '     */', '    private ChromeInactivityTracker mInactivityTracker;', '', ""    // This is the cached value of mIntentHandler#shouldIgnoreIntent and shouldn't be read directly."", '    // Use #shouldIgnoreIntent instead.', '    private Boolean mShouldIgnoreIntent;', '    /*', '     *  Listens to FrameMetrics and records jank metrics.', '     */', '    private JankTrackerImpl mJankTracker;', '', '    // Supplier for a dependency to inform about the type of intent used to launch Chrome.', '    private OneshotSupplierImpl<ToolbarIntentMetadata> mIntentMetadataOneshotSupplier =', '            new OneshotSupplierImpl<>();', '', '    // Time at which an intent was received and handled.', '    private long mIntentHandlingTimeMs;', '', '    /**', '     * Whether the StartSurface is shown when Chrome is launched.', '     */', '    private boolean mOverviewShownOnStart;', '', '    private NextTabPolicySupplier mNextTabPolicySupplier;', '', '    private final UnownedUserDataSupplier<StartupPaintPreviewHelper>', '            mStartupPaintPreviewHelperSupplier = new StartupPaintPreviewHelperSupplier();', '', '    private final OneshotSupplierImpl<LayoutStateProvider> mLayoutStateProviderOneshotSupplier =', '            new OneshotSupplierImpl<>();', '    // TODO(crbug.com/1108496): Removed after all usages has been migrated to LayoutStateProvider.', '    private final OneshotSupplierImpl<OverviewModeBehavior> mOverviewModeBehaviorSupplier =', '            new OneshotSupplierImpl<>();', '    private OverviewModeController mOverviewModeController;', '', '    private ObservableSupplierImpl<EphemeralTabCoordinator> mEphemeralTabCoordinatorSupplier =', '            new ObservableSupplierImpl<>();', '    private final OneshotSupplierImpl<StartSurface> mStartSurfaceSupplier =', '            new OneshotSupplierImpl<>();', '    private ObservableSupplierImpl<Tab> mStartSurfaceParentTabSupplier =', '            new ObservableSupplierImpl<>();', '', '    private CallbackController mCallbackController = new CallbackController();', '    private TabbedModeTabDelegateFactory mTabDelegateFactory;', '', '    private final AppLaunchDrawBlocker mAppLaunchDrawBlocker;', '', '    // ID assigned to each ChromeTabbedActivity instance in Android S+ where multi-instance feature', '    // is supported. This can be explicitly set in the incoming Intent or internally assigned.', '    private int mWindowId;', '', '    private final IncognitoTabHost mIncognitoTabHost = new IncognitoTabHost() {', '        @Override', '        public boolean hasIncognitoTabs() {', '            return getTabModelSelector().getModel(true).getCount() > 0;', '        }', '', '        @Override', '        public void closeAllIncognitoTabs() {', '            if (isActivityFinishingOrDestroyed()) return;', '', '            // If the tabbed activity has not yet initialized, then finish the activity to avoid', '            // timing issues with clearing the incognito tab state in the background.', '            if (!areTabModelsInitialized() || !didFinishNativeInitialization()) {', '                finish();', '                return;', '            }', '', '            getTabModelSelector().getModel(true).closeAllTabs(false, false);', '        }', '', '        @Override', '        public boolean isActiveModel() {', '            return getTabModelSelector().getModel(true).isActiveModel();', '        }', '    };', '', '    /**', '     * This class is used to warm up the chrome split ClassLoader. See SplitChromeApplication for', '     * more info', '     */', '    @UsedByReflection(""SplitChromeApplication.java"")', '    public static class Preload extends ChromeTabbedActivity {', '        private LifecycleRegistry mLifecycleRegistry;', '', '        @UsedByReflection(""SplitChromeApplication.java"")', '        public Preload() {}', '', '        @Override', '        public Lifecycle getLifecycle() {', '            if (mLifecycleRegistry == null) {', '                // LifecycleRegistry normally enforces it is called on the main thread, but this', '                // class will be preloaded in a background thread. The only method that gets called', '                // in the activity constructor is addObserver(), so just override that.', '                mLifecycleRegistry = new LifecycleRegistry(null) {', '                    @Override', '                    public void addObserver(LifecycleObserver observer) {}', '                };', '            }', '            return mLifecycleRegistry;', '        }', '    }', '', '    /**', '     * Specify the proper non-.Main-aliased Chrome Activity for the given component.', '     *', '     * @param intent The intent to set the component for.', '     * @param component The client generated component to be validated.', '     */', '    public static void setNonAliasedComponent(Intent intent, ComponentName component) {', '        assert component != null;', '        Context appContext = ContextUtils.getApplicationContext();', '        if (!TextUtils.equals(component.getPackageName(), appContext.getPackageName())) {', '            return;', '        }', '        if (component.getClassName() != null', '                && TextUtils.equals(component.getClassName(),', '                        ChromeTabbedActivity.MAIN_LAUNCHER_ACTIVITY_NAME)) {', '            // Keep in sync with the activities that the .Main alias points to in', '            // AndroidManifest.xml.', '            intent.setClass(appContext, ChromeTabbedActivity.class);', '        } else {', '            intent.setComponent(component);', '        }', '    }', '', '    /**', '     * Constructs a ChromeTabbedActivity.', '     */', '    public ChromeTabbedActivity() {', '        mMainIntentMetrics = new MainIntentBehaviorMetrics();', '', '        // AppLaunchDrawBlocker may block drawing the Activity content until the initial tab is', '        // available.', '        // clang-format off', '        mAppLaunchDrawBlocker = new AppLaunchDrawBlocker(getLifecycleDispatcher(),', '                () -> findViewById(android.R.id.content),', '                this::getIntent, this::shouldIgnoreIntent, this::isTablet,', '                this::shouldShowOverviewPageOnStart);', '        // clang-format on', '    }', '', '    @Override', '    protected void onPreCreate() {', '        super.onPreCreate();', '        mMultiInstanceManager = MultiInstanceManager.create(this, getTabModelOrchestratorSupplier(),', '                getMultiWindowModeStateDispatcher(), getLifecycleDispatcher(),', '                getModalDialogManagerSupplier(), this);', '    }', '', '    @Override', '    protected @LaunchIntentDispatcher.Action int maybeDispatchLaunchIntent(', '            Intent intent, Bundle savedInstanceState) {', '        // Detect if incoming intent is a result of Chrome recreating itself. For now, restrict this', ""        // path to reparenting to ensure the launching logic isn't disrupted."", ""        // TODO(crbug.com/1065491): Unlock this codepath for all incoming intents once it's"", '        // confirmed working and stable.', '        if (savedInstanceState != null', '                && AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()) {', '            return LaunchIntentDispatcher.Action.CONTINUE;', '        }', '', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_MAIN.equals(intent.getAction())) {', '            // Call dispatchToTabbedActivity() for MAIN intents to activate proper multi-window', '            // TabbedActivity (i.e. if CTA2 is currently running and Chrome is started, CTA2', ""            // should be brought to front). Don't call dispatchToTabbedActivity() for non-MAIN"", '            // intents to avoid breaking cases where CTA is started explicitly (e.g. to handle', ""            // 'Move to other window' command from CTA2)."", '            return LaunchIntentDispatcher.dispatchToTabbedActivity(this, intent);', '        }', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(intent, DispatchedBy.ON_CREATE);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            return action;', '        }', '        return super.maybeDispatchLaunchIntent(intent, savedInstanceState);', '    }', '', '    // We know of at least one app that explicitly specifies .Main activity in custom tab', ""    // intents. The app shouldn't be doing that, but until it's updated, we need to support"", '    // such use case.', '    //', '    // This method attempts to treat VIEW intents explicitly sent to .Main as custom tab', '    // intents, and dispatch them accordingly. If the intent was not dispatched, the method', '    // returns Action.CONTINUE.', '    //', '    // The method also updates the supplied boolean histogram with the dispatching result,', '    // but only if the intent is a VIEW intent sent explicitly to .Main activity.', '    private @LaunchIntentDispatcher.Action int maybeDispatchExplicitMainViewIntent(', '            Intent intent, @DispatchedBy int dispatchedBy) {', ""        // The first check ensures that this is .Main activity alias (we can't check exactly, but"", '        // this gets us sufficiently close).', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getComponent() != null', '                && MAIN_LAUNCHER_ACTIVITY_NAME.equals(intent.getComponent().getClassName())) {', '            @LaunchIntentDispatcher.Action', '            int action = LaunchIntentDispatcher.dispatchToCustomTabActivity(this, intent);', '            switch (dispatchedBy) {', '                case DispatchedBy.ON_CREATE:', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnCreate"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                case DispatchedBy.ON_NEW_INTENT:', '', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnNewIntent"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                default:', '                    assert false : ""Unknown dispatchedBy value "" + dispatchedBy;', '            }', '            if (action == LaunchIntentDispatcher.Action.CONTINUE) {', '                // Intent was not dispatched, record its source.', '                @IntentHandler.ExternalAppId', '                int externalId = IntentHandler.determineExternalIntentSource(intent);', '                RecordHistogram.recordEnumeratedHistogram(', '                        ""Android.MainActivity.UndispatchedExplicitMainViewIntentSource"", externalId,', '                        IntentHandler.ExternalAppId.NUM_ENTRIES);', '', ""                // Crash if intent came from us, but only in debug builds and only if we weren't"", ""                // explicitly told not to. Hopefully we'll get enough reports to find where"", '                // these intents come from.', '                if (externalId == IntentHandler.ExternalAppId.CHROME', '                        && 0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)', '                        && !CommandLine.getInstance().hasSwitch(', '                                ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS)) {', '                    String intentInfo = intent.toString();', '                    Bundle extras = intent.getExtras();', '                    if (extras != null) {', '                        intentInfo +=', '                                "", extras.keySet = ["" + TextUtils.join("", "", extras.keySet()) + ""]"";', '                    }', '                    String message = String.format((Locale) null,', '                            ""VIEW intent sent to .Main activity alias was not dispatched. PLEASE ""', '                                    + ""report the following info to crbug.com/789732: \\""%s\\"". Use ""', '                                    + ""--%s flag to disable this check."",', '                            intentInfo, ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS);', '                    throw new IllegalStateException(message);', '                }', '            }', '            return action;', '        }', '        return LaunchIntentDispatcher.Action.CONTINUE;', '    }', '', '    @Override', '    public void initializeCompositor() {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeCompositor"");', '            super.initializeCompositor();', '', '            // LocaleManager can only function after the native library is loaded.', '            mLocaleManager = LocaleManager.getInstance();', '            mLocaleManager.setSettingsLauncher(SETTINGS_LAUNCHER);', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '', '            mTabModelOrchestrator.onNativeLibraryReady(getTabContentManager());', '', '            mTabModelObserver = new TabModelSelectorTabModelObserver(mTabModelSelector) {', '                @Override', '                public void didCloseTab(int tabId, boolean incognito) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                @Override', '                public void tabPendingClosure(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(true);', '                }', '', '                @Override', '                public void tabRemoved(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                private void closeIfNoTabsAndHomepageEnabled(boolean isPendingClosure) {', '                    if (getTabModelSelector().getTotalTabCount() == 0) {', '                        // If the last tab is closed, and homepage is enabled, then exit Chrome.', '                        if (HomepageManager.shouldCloseAppWithZeroTabs()) {', '                            finish();', '                        } else if (isPendingClosure) {', '                            NewTabPageUma.recordNTPImpression(', '                                    NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                        }', '                    }', '', '                    // TODO(960196) : remove this when the associated bug fix. This is a band-aid', '                    //  fix for TabGrid and closing tabs with TabGroupUi.', '                    //  If one of the following is true, then exit Chrome when TabGroupsAndroid is', '                    //  enabled, and tab switcher is not shown:', '                    //   1. If the very last tab is closed.', '                    //   2. If normal tab model is selected and no normal tabs.', '                    if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(ChromeTabbedActivity.this)', '                            && !mOverviewModeController.overviewVisible()) {', '                        if (getTabModelSelector().getTotalTabCount() == 0', '                                || (!getTabModelSelector().isIncognitoSelected()', '                                        && getTabModelSelector().getModel(false).getCount() == 0)) {', '                            finish();', '                        }', '                    }', '                }', '', '                @Override', '                public void didAddTab(', '                        Tab tab, @TabLaunchType int type, @TabCreationState int creationState) {', '                    if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                            && !DeviceClassManager.enableAnimations()) {', '                        Toast.makeText(ChromeTabbedActivity.this, R.string.open_in_new_tab_toast,', '                                     Toast.LENGTH_SHORT)', '                                .show();', '                    }', '                }', '', '                @Override', '                public void multipleTabsPendingClosure(List<Tab> tabs, boolean isAllTabs) {', '                    if (!isAllTabs) return;', '                    NewTabPageUma.recordNTPImpression(NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                }', '            };', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeCompositor"");', '        }', '    }', '', '    private void refreshSignIn() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.refreshSignIn"")) {', '            FirstRunSignInProcessor.start(this);', '        }', '    }', '', '    private void setupCompositorContentPreNativeForPhone() {', '        if (isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForPhone"")) {', '            CompositorViewHolder compositorViewHolder = getCompositorViewHolderSupplier().get();', '', '            // TODO(1169205): Remove all GTS enabled checks after M5 is default.', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {', '                TabManagementDelegate tabManagementDelegate =', '                        TabManagementModuleProvider.getDelegate();', '                if (tabManagementDelegate != null) {', '                    StartSurface startSurface = tabManagementDelegate.createStartSurface(this,', '                            mRootUiCoordinator.getScrimCoordinator(),', '                            mRootUiCoordinator.getBottomSheetController(), mStartSurfaceSupplier,', '                            mStartSurfaceParentTabSupplier, hadWarmStart(), getWindowAndroid(),', '                            compositorViewHolder, compositorViewHolder::getDynamicResourceLoader,', '                            getTabModelSelector(), getBrowserControlsManager(),', '                            getSnackbarManager(), getShareDelegateSupplier(),', '                            getToolbarManager()::getOmniboxStub, getTabContentManager(),', '                            getModalDialogManager(),', '                            /* chromeActivityNativeDelegate= */ this, getLifecycleDispatcher(),', '                            getTabCreatorManagerSupplier().get(),', '                            getMenuOrKeyboardActionController(),', '                            getMultiWindowModeStateDispatcher(), mJankTracker,', '                            getToolbarManager()::getToolbar);', '                }', '            }', '', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,', '                    mStartSurfaceSupplier.get(), getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPreNativeForTablet() {', '        if (!isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForTablet"")) {', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromeTablet(getCompositorViewHolderSupplier().get(),', '                    mContentContainer, getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPostNative() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPostNative"")) {', '            if (!isLayoutManagerCreated()) {', '                if (isTablet()) {', '                    setupCompositorContentPreNativeForTablet();', '                } else {', '                    setupCompositorContentPreNativeForPhone();', '                }', '            }', '', '            mLayoutManager.setEnableAnimations(DeviceClassManager.enableAnimations());', '', '            // TODO(yusufo): get rid of findViewById(R.id.url_bar).', '            initializeCompositorContent(mLayoutManager, findViewById(R.id.url_bar),', '                    mContentContainer, mControlContainer);', '        }', '    }', '', '    private boolean isLayoutManagerCreated() {', '        return mLayoutManager != null;', '    }', '', '    private void initializeToolbarManager() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initializeToolbarManager"")) {', '            mUndoBarPopupController.initialize();', '', '            OnClickListener tabSwitcherClickHandler = v -> {', '                if (ChromeFeatureList.isEnabled(ChromeFeatureList.TOOLBAR_IPH_ANDROID)) {', '                    Profile profile = mTabModelProfileSupplier.get();', '                    if (profile != null) {', '                        TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                EventConstants.TAB_SWITCHER_BUTTON_CLICKED);', '                    }', '                }', '', '                if (getFullscreenManager().getPersistentFullscreenMode()) {', '                    return;', '                }', '', '                if (isInOverviewMode()', '                        && !ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                    hideOverview();', '                } else {', '                    showOverview(StartSurfaceState.SHOWING_TABSWITCHER);', '                }', '            };', '            OnClickListener newTabClickHandler = v -> {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This assumes that the keyboard can not be seen at the same time as the', '                // newtab button on the toolbar.', '                getCurrentTabCreator().launchNTP();', '                mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);', '                if (getTabModelSelector().isIncognitoSelected()) {', '                    RecordUserAction.record(""MobileToolbarStackViewNewIncognitoTab"");', '                } else {', '                    RecordUserAction.record(""MobileToolbarStackViewNewTab"");', '                }', '                RecordUserAction.record(""MobileTopToolbarNewTabButton"");', '', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '            };', '            OnClickListener bookmarkClickHandler = v -> addOrEditBookmark(getActivityTab());', '', '            Supplier<Boolean> showStartSurfaceSupplier = () -> {', '                // If incognito is selected, tapping the home button stays on the current incognito', '                // tab.', '                if (ReturnToChromeExperimentsUtil.shouldShowStartSurfaceAsTheHomePageOnPhone(', '                            this, isTablet())', '                        && !mTabModelSelector.isIncognitoSelected()) {', '                    StartSurfaceUserData.setKeepTab(getActivityTab(), true);', '                    showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '                    return true;', '                }', '                return false;', '            };', '', '            getToolbarManager().initializeWithNative(mLayoutManager, tabSwitcherClickHandler,', '                    newTabClickHandler, bookmarkClickHandler, null, showStartSurfaceSupplier);', '', '            if (!TabUiFeatureUtilities.supportInstantStart(isTablet(), this)) {', '                assert !(mOverviewModeController != null', '                        && mOverviewModeController.overviewVisible());', '            }', '        }', '    }', '', '    private void maybeCreateIncognitoTabSnapshotController() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.maybeCreateIncognitoTabSnapshotController"")) {', '            if (!CommandLine.getInstance().hasSwitch(', '                        ChromeSwitches.ENABLE_INCOGNITO_SNAPSHOTS_IN_ANDROID_RECENTS)) {', '                IncognitoTabSnapshotController.createIncognitoTabSnapshotController(', '                        this, getWindow(), mLayoutManager, mTabModelSelector);', '            }', '', '            mUIWithNativeInitialized = true;', '            onAccessibilityTabSwitcherModeChanged();', '', '            // The dataset has already been created, we need to initialize our state.', '            mTabModelSelector.notifyChanged();', '', '            // Check for incognito tabs to handle the case where Chrome was swiped away in the', '            // background.', '            if (!IncognitoTabHostUtils.doIncognitoTabsExist()) {', '                IncognitoNotificationManager.dismissIncognitoNotification();', '                DownloadNotificationService.getInstance().cancelOffTheRecordDownloads();', '            }', '        }', '    }', '', '    private void maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.""', '                     + ""maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver"")) {', '            FeedSurfaceTracker.getInstance().startup();', '', '            if (UsageStatsService.isEnabled()) {', '                UsageStatsService.getInstance().createPageViewObserver(', '                        this, getActivityTabProvider(), getTabContentManagerSupplier());', '            }', '        }', '    }', '', '    private void initJourneyManager() {', '        assert mOverviewModeController != null;', '', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initJourneyManager"")) {', '            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TAB_ENGAGEMENT_REPORTING_ANDROID)) {', '                // The lifecycle of this object is managed by the lifecycle dispatcher.', '                new JourneyManager(getTabModelSelector(), getLifecycleDispatcher(),', '                        mOverviewModeController, new EngagementTimeUtil());', '            }', '        }', '    }', '', '    @Override', '    public void onNewIntent(Intent intent) {', ""        // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly"", '        // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,', '        // and not Chrome', '        Intent intentForDispatching = new Intent(intent);', '        intentForDispatching.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(', '                intentForDispatching, DispatchedBy.ON_NEW_INTENT);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            // Pressing back button in CCT should bring user to the caller activity.', '            moveTaskToBack(true);', '            // Intent was dispatched to CustomTabActivity, consume it.', '            return;', '        }', '', '        mIntentHandlingTimeMs = SystemClock.uptimeMillis();', '        super.onNewIntent(intent);', '    }', '', '    @Override', '    public void startNativeInitialization() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.startNativeInitialization"")) {', ""            // This is on the critical path so don't delay."", '            if (ChromeFeatureList.isEnabled(', '                        ChromeFeatureList.DARKEN_WEBSITES_CHECKBOX_IN_THEMES_SETTING)) {', '                WebContentsDarkModeController.createInstance();', '            }', '            setupCompositorContentPostNative();', '', ""            // All this initialization can be expensive so it's split into multiple tasks."", '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::refreshSignIn));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initializeToolbarManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeCreateIncognitoTabSnapshotController));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::onAccessibilityTabSwitcherModeChanged));', '', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initJourneyManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::finishNativeInitialization));', '            ChromeAccessibilityUtil.get().addObserver(this);', '        }', '    }', '', '    @Override', '    public void finishNativeInitialization() {', '        super.finishNativeInitialization();', '', '        // TODO(jinsukkim): Let these classes handle the registration by themselves.', '        mCompositorViewHolder = getCompositorViewHolderSupplier().get();', '        mOverviewListLayout = (OverviewListLayout) mLayoutManager.getOverviewListLayout();', '        getTabObscuringHandler().addObserver(mCompositorViewHolder);', '        getTabObscuringHandler().addObserver(mOverviewListLayout);', '', '        ChromeAccessibilityUtil.get().addObserver(mLayoutManager);', '        if (isTablet()) ChromeAccessibilityUtil.get().addObserver(mCompositorViewHolder);', '    }', '', '    @Override', '    public void onResumeWithNative() {', '        super.onResumeWithNative();', '', '        IncognitoStartup.onResumeWithNative(', '                getTabModelSelectorSupplier(), TABBED_MODE_COMPONENT_NAMES);', '', '        mLocaleManager.setSnackbarManager(getSnackbarManager());', '        mLocaleManager.startObservingPhoneChanges();', '', '        if (isWarmOnResume()) {', '            NavigationPredictorBridge.onActivityWarmResumed();', '        } else {', '            NavigationPredictorBridge.onColdStart();', '        }', '', '        // This call is not guarded by a feature flag.', '        SearchEngineChoiceNotification.handleSearchEngineChoice(', '                this, getSnackbarManager(), SETTINGS_LAUNCHER);', '', '        if (!isWarmOnResume()) {', '            SuggestionsMetrics.recordArticlesListVisible();', '        }', '    }', '', '    @Override', '    public void onPauseWithNative() {', '        mTabModelSelector.commitAllTabClosures();', '        CookiesFetcher.persistCookies();', '', '        mLocaleManager.setSnackbarManager(null);', '        mLocaleManager.stopObservingPhoneChanges();', '', '        NavigationPredictorBridge.onPause();', '', '        super.onPauseWithNative();', '    }', '', '    @Override', '    public void onStopWithNative() {', '        super.onStopWithNative();', '', '        mTabModelOrchestrator.saveState();', '        mHasDeterminedOverviewStateForCurrentSession = false;', '    }', '', '    @Override', '    public void onStartWithNative() {', '        mMainIntentMetrics.logLaunchBehavior();', '        super.onStartWithNative();', '', ""        // Don't call setInitialOverviewState if we're waiting for the tab's creation or we risk"", '        // showing a glimpse of the tab selector during start up.', '        if (!mPendingInitialTabCreation) {', '            setInitialOverviewState();', '        }', '', '        if (TabUiFeatureUtilities.isConditionalTabStripEnabled()', '                || ConditionalTabStripUtils.getOptOutIndicator()) {', '            ConditionalTabStripUtils.updateFeatureExpiration(', '                    mInactivityTracker.getLastBackgroundedTimeMs());', '        }', '', '        Bundle savedInstanceState = getSavedInstanceState();', '        if (savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false)) {', '            // This will be executed only once since SavedInstanceState will be reset a few lines', '            // later.', '            AndroidSessionDurationsServiceState.restoreNativeFromSerialized(savedInstanceState,', '                    getCurrentTabModel().getProfile().getPrimaryOTRProfile(', '                            /* createIfNeeded= */ true));', '        }', '', '        resetSavedInstanceState();', '        StartSurfaceConfiguration.addFeedVisibilityObserver();', '        BookmarkUtils.maybeExpireLastBookmarkLocationForReadLater(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    @Override', '    public void onNewIntentWithNative(Intent intent) {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.onNewIntentWithNative"");', '', '            super.onNewIntentWithNative(intent);', '            if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                logMainIntentBehavior(intent);', '            }', '', '            if (CommandLine.getInstance().hasSwitch(ContentSwitches.ENABLE_TEST_INTENTS)) {', '                handleDebugIntent(intent);', '            }', '', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.onNewIntentWithNative"");', '        }', '    }', '', '    @Override', '    public @ActivityType int getActivityType() {', '        return ActivityType.TABBED;', '    }', '', '    @Override', '    public ChromeTabCreator getTabCreator(boolean incognito) {', '        return (ChromeTabCreator) super.getTabCreator(incognito);', '    }', '', '    @Override', '    public ChromeTabCreator getCurrentTabCreator() {', '        return (ChromeTabCreator) super.getCurrentTabCreator();', '    }', '', '    @Override', '    public OverviewModeBehavior getOverviewModeBehavior() {', '        return mOverviewModeController;', '    }', '', '    @Override', '    public @Nullable OneshotSupplier<OverviewModeBehavior> getOverviewModeBehaviorSupplier() {', '        return mOverviewModeBehaviorSupplier;', '    }', '', '    /**', '     * @return The toolbar button in-product help controller for this activity.', '     * TODO(pnoland, https://crbug.com/865801): remove this in favor', ""     *        of injecting the controller directly where it's needed."", '     */', '    public ToolbarButtonInProductHelpController getToolbarButtonInProductHelpController() {', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getToolbarButtonInProductHelpController();', '    }', '', '    private void handleDebugIntent(Intent intent) {', '        if (ACTION_CLOSE_TABS.equals(intent.getAction())) {', '            getTabModelSelector().closeAllTabs();', '        } else if (MemoryPressureListener.handleDebugIntent(', '                           ChromeTabbedActivity.this, intent.getAction())) {', '            // Handled.', '        }', '    }', '', '    private void setTrackColdStartupMetrics(boolean shouldTrackColdStartupMetrics) {', '        assert getActivityTabStartupMetricsTracker() != null;', '', '        if (shouldTrackColdStartupMetrics) {', '            getActivityTabStartupMetricsTracker().trackStartupMetrics(STARTUP_UMA_HISTOGRAM_SUFFIX);', '        } else {', '            getActivityTabStartupMetricsTracker().cancelTrackingStartupMetrics();', '        }', '', '        // Paint Preview should follow the same logic as startup UMA histograms as the feature', '        // should only run on cold startup of Chrome when the user is unable to interact before', '        // entering a tab.', '        StartupPaintPreviewHelper.setShouldShowOnRestore(shouldTrackColdStartupMetrics);', '    }', '', '    private void setInitialOverviewState() {', '        if (mHasDeterminedOverviewStateForCurrentSession) return;', '', '        mHasDeterminedOverviewStateForCurrentSession = true;', '        boolean isOverviewVisible = mOverviewModeController.overviewVisible();', '', '        if (shouldRefreshAndShowOverview(isOverviewVisible)) {', '            if (getCurrentTabModel() != null) {', '                RecordHistogram.recordCountHistogram(', '                        TAB_COUNT_ON_RETURN, getCurrentTabModel().getCount());', '            }', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this) && !isTablet()) {', '                mStartSurfaceSupplier.get().getController().enableRecordingFirstMeaningfulPaint(', '                        getOnCreateTimestampMs());', '            }', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '            return;', '        }', '', '        if (getActivityTab() == null && !isOverviewVisible) {', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '        }', '', '        if (IntentUtils.isMainIntentFromLauncher(getIntent())', '                && mOverviewModeController.overviewVisible()) {', '            RecordUserAction.record(""MobileStartup.UserEnteredTabSwitcher"");', '        }', '    }', '', '    private boolean shouldRefreshAndShowOverview(boolean isOverviewVisible) {', '        // If StartSurfaceConfiguration.NEW_SURFACE_FROM_HOME_BUTTON is turned on, MV tiles and', '        // carousels may be hidden before Chrome is brought to the background. If overview should be', '        // shown, no matter overview was already visible or not, we should call', '        // showOverview(StartSurfaceState.SHOWING_START) to show MV tiles and carousels again.', '        return shouldShowOverviewPageOnStart()', '                && (!isOverviewVisible', '                        || StartSurfaceConfiguration.shouldShowNewSurfaceFromHomeButton());', '    }', '', '    /**', '     * Returns whether grid Tab switcher or the Start surface should be shown at startup.', '     */', '    private boolean shouldShowOverviewPageOnStart() {', '        return ReturnToChromeExperimentsUtil.shouldShowOverviewPageOnStart(', '                this, getIntent(), getTabModelSelector(), mInactivityTracker);', '    }', '', '    private void logMainIntentBehavior(Intent intent) {', '        assert IntentUtils.isMainIntentFromLauncher(intent);', '        // TODO(tedchoc): We should cache the last visible time and reuse it to avoid different', '        //                values of this depending on when it is called after the activity was', '        //                shown.', '', '        // Temporary safety check to make sure none of this code runs if the feature is', '        // disabled.', '        if (ReengagementNotificationController.isEnabled()) {', '            if (mCallbackController != null) {', '                new OneShotCallback<>(', '                        mTabModelProfileSupplier, mCallbackController.makeCancelable(profile -> {', '                            assert profile != null : ""Unexpectedly null profile from TabModel."";', '                            if (profile == null) return;', '', '                            TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                    EventConstants.STARTED_FROM_MAIN_INTENT);', '                        }));', '            }', '        }', '', '        mMainIntentMetrics.onMainIntentWithNative(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    /** Access the main intent metrics for test validation. */', '    @VisibleForTesting', '    public MainIntentBehaviorMetrics getMainIntentBehaviorMetricsForTesting() {', '        return mMainIntentMetrics;', '    }', '', '    @VisibleForTesting', '    public ChromeInactivityTracker getInactivityTrackerForTesting() {', '        return mInactivityTracker;', '    }', '', '    @Override', '    public void initializeState() {', '        // This method goes through 3 steps:', ""        // 1. Load the saved tab state (but don't start restoring the tabs yet)."", '        // 2. Process the Intent that this activity received and if that should result in any', '        //    new tabs, create them.  This is done after step 1 so that the new tab gets', '        //    created after previous tab state was restored.', '        // 3. If no tabs were created in any of the above steps, create an NTP, otherwise', '        //    start asynchronous tab restore (loading the previously active tab synchronously', '        //    if no new tabs created in step 2).', '', '        // Only look at the original intent if this is not a ""restoration"" and we are allowed to', '        // process intents. Any subsequent intents are carried through onNewIntent.', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeState"");', '', '            super.initializeState();', '            Log.i(TAG, ""#initializeState"");', '            Intent intent = getIntent();', '', '            boolean hadCipherData =', '                    CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());', '', '            boolean noRestoreState =', '                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);', '            if (noRestoreState) {', '                // Clear the state files because they are inconsistent and useless from now on.', '                mTabModelOrchestrator.clearState();', '            } else {', '                // State should be clear when we start first run and hence we do not need to load', '                // a previous state. This may change the current Model, watch out for initialization', '                // based on the model.', '                // Never attempt to restore incognito tabs when this activity was previously swiped', '                // away in Recents. http://crbug.com/626629', '                boolean ignoreIncognitoFiles = !hadCipherData;', '                mTabModelOrchestrator.loadState(ignoreIncognitoFiles);', '            }', '', '            mInactivityTracker.register(this.getLifecycleDispatcher());', '            boolean isIntentWithEffect = false;', '            boolean isMainIntentFromLauncher = false;', '            if (getSavedInstanceState() == null && intent != null) {', '                if (!shouldIgnoreIntent()) {', '                    isIntentWithEffect = mIntentHandler.onNewIntent(intent);', '                }', '', '                if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                    isMainIntentFromLauncher = true;', '                    logMainIntentBehavior(intent);', '                }', '            }', '', '            mIntentMetadataOneshotSupplier.set(', '                    new ToolbarIntentMetadata(isMainIntentFromLauncher, isIntentWithEffect));', '', '            // If we have tabs to reparent and getSavedInstanceState() is non-null, then the tabs', '            // are coming from night mode tab reparenting. In this case, reparenting happens', '            // synchronously along with tab restoration so there are no tabs waiting for', '            // reparenting like there are for other tab reparenting operations.', '            boolean hasTabWaitingForReparenting =', '                    AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()', '                    && getSavedInstanceState() == null;', '            mCreatedTabOnStartup = getCurrentTabModel().getCount() > 0', '                    || mTabModelOrchestrator.getRestoredTabCount() > 0 || isIntentWithEffect', '                    || hasTabWaitingForReparenting;', '', '            // We always need to try to restore tabs. The set of tabs might be empty, but at least', '            // it will trigger the notification that tab restore is complete which is needed by', '            // other parts of Chrome such as sync.', '            boolean activeTabBeingRestored = !isIntentWithEffect', '                    || (shouldShowOverviewPageOnStart()', '                            && !mTabModelSelector.isIncognitoSelected());', '', '            mTabModelOrchestrator.restoreTabs(activeTabBeingRestored);', '', '            // Only create an initial tab if no tabs were restored and no intent was handled.', '            // Also, check whether the active tab was supposed to be restored and that the total', '            // tab count is now non zero.  If this is not the case, tab restore failed and we need', '            // to create a new tab as well.', '            if (!mCreatedTabOnStartup', '                    || (!hasTabWaitingForReparenting && activeTabBeingRestored', '                            && getTabModelSelector().getTotalTabCount() == 0)) {', '                // If homepage URI is not determined, due to PartnerBrowserCustomizations provider', '                // async reading, then create a tab at the async reading finished. If it takes', '                // too long, just create NTP.', '', '                mPendingInitialTabCreation = true;', '                PartnerBrowserCustomizations.getInstance().setOnInitializeAsyncFinished(() -> {', '                    if (!isActivityFinishingOrDestroyed()) {', '                        createInitialTab();', '                    }', '                }, INITIAL_TAB_CREATION_TIMEOUT_MS);', '            }', '', '            // If initial tab creation is pending, this will instead be handled when we create the', '            // initial tab in #createInitialTab.', '            if (!mPendingInitialTabCreation) {', '                mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '            }', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeState"");', '        }', '    }', '', '    private boolean hasStartWithNativeBeenCalled() {', '        int activity_state = getLifecycleDispatcher().getCurrentActivityState();', '        return activity_state == ActivityLifecycleDispatcher.ActivityState.STARTED_WITH_NATIVE', '                || activity_state == ActivityLifecycleDispatcher.ActivityState.RESUMED_WITH_NATIVE;', '    }', '', '    /**', '     * Create an initial tab for cold start without restored tabs.', '     */', '    private void createInitialTab() {', '        Log.i(TAG, ""#createInitialTab executed."");', '        mPendingInitialTabCreation = false;', '', '        // If the start surface or grid tab switcher will be shown on start, do not create a new', '        // tab.', '        if (!shouldShowOverviewPageOnStart()) {', '            String url = HomepageManager.getHomepageUri();', '            if (TextUtils.isEmpty(url)) {', '                url = UrlConstants.NTP_URL;', '            } else {', '                // Migrate legacy NTP URLs (chrome://newtab) to the newer format', '                // (chrome-native://newtab)', '                if (UrlUtilities.isNTPUrl(url)) {', '                    url = UrlConstants.NTP_URL;', '                }', '            }', '', '            getTabCreator(false).launchUrl(url, TabLaunchType.FROM_STARTUP);', '        }', '', ""        // If we didn't call setInitialOverviewState() in onStartWithNative() because"", '        // mPendingInitialTabCreation was true then do so now.', '        if (hasStartWithNativeBeenCalled()) {', '            setInitialOverviewState();', '        }', '', '        mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '    }', '', '    @Override', '    public void onAccessibilityModeChanged(boolean enabled) {', '        onAccessibilityTabSwitcherModeChanged();', '    }', '', '    private void onAccessibilityTabSwitcherModeChanged() {', '        if (!mUIWithNativeInitialized) return;', '', '        boolean accessibilityTabSwitcherEnabled =', '                DeviceClassManager.enableAccessibilityLayout(this);', '        if (mOverviewModeController != null && mOverviewModeController.overviewVisible()', '                && (mIsAccessibilityTabSwitcherEnabled == null', '                        || mIsAccessibilityTabSwitcherEnabled', '                                != DeviceClassManager.enableAccessibilityLayout(this))) {', '            /**', '             * If Start surface homepage is showing and launching NTP will show the Start surface', '             * again, skips the calls of hideOverview() and launchNTP(). We need to check', '             * {@link ReturnToChromeExperimentsUtil#shouldShowStartSurfaceHomeAsNTP(Context,', '             * boolean, boolean)} to see whether Start surface can be shown when accessibility is', '             * enabled.', '             */', '            if (mStartSurfaceSupplier.get() == null', '                    || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                            != StartSurfaceState.SHOWN_HOMEPAGE', '                    || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                            this, getCurrentTabModel().isIncognito(), isTablet())) {', '                mOverviewModeController.hideOverview(true);', '                if (getTabModelSelector().getCurrentModel().getCount() == 0) {', '                    getCurrentTabCreator().launchNTP();', '                }', '            }', '        }', '        mIsAccessibilityTabSwitcherEnabled = accessibilityTabSwitcherEnabled;', '', '        if (ChromeAccessibilityUtil.get().isAccessibilityEnabled()) {', '            RecordHistogram.recordBooleanHistogram(', '                    ""Accessibility.Android.TabSwitcherPreferenceEnabled"",', '                    mIsAccessibilityTabSwitcherEnabled);', '        }', '    }', '', '    /**', '     * Internal class which performs the intent handling operations delegated by IntentHandler.', '     */', '    private class InternalIntentDelegate implements IntentHandler.IntentHandlerDelegate {', '        /**', '         * Processes a url view intent.', '         *', '         * @param url The url from the intent.', '         */', '        @Override', '        public void processUrlViewIntent(LoadUrlParams loadUrlParams, @TabOpenType int tabOpenType,', '                String externalAppId, int tabIdToBringToFront, Intent intent) {', '            if (isActivityFinishingOrDestroyed()) {', '                return;', '            }', '            if (isFromChrome(intent, externalAppId)) {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromChrome"");', '            } else {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromApp"");', '            }', '', '            final String url = loadUrlParams.getUrl();', '            boolean fromLauncherShortcut = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false);', '            boolean fromAppWidget = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false);', '            boolean focus = false;', '', '            TabModel tabModel = getCurrentTabModel();', '            switch (tabOpenType) {', '                case TabOpenType.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:', '                    mTabModelOrchestrator.tryToRestoreTabStateForUrl(url);', '                    int tabToBeClobberedIndex = TabModelUtils.getTabIndexByUrl(tabModel, url);', '                    Tab tabToBeClobbered = tabModel.getTabAt(tabToBeClobberedIndex);', '                    if (tabToBeClobbered != null) {', '                        TabModelUtils.setIndex(tabModel, tabToBeClobberedIndex);', '                        tabToBeClobbered.reload();', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    int shortcutSource = intent.getIntExtra(', '                            WebappConstants.EXTRA_SOURCE, ShortcutSource.UNKNOWN);', '                    LaunchMetrics.recordHomeScreenLaunchIntoTab(url, shortcutSource);', '                    if (fromAppWidget && url.startsWith(UrlConstants.CHROME_DINO_URL)) {', '                        RecordUserAction.record(""QuickActionSearchWidget.StartDinoGame"");', '                    }', '                    break;', '                case TabOpenType.BRING_TAB_TO_FRONT:', '                    mTabModelOrchestrator.tryToRestoreTabStateForId(tabIdToBringToFront);', '', '                    int tabIndex = TabModelUtils.getTabIndexById(tabModel, tabIdToBringToFront);', '                    if (tabIndex == TabModel.INVALID_TAB_INDEX) {', '                        TabModel otherModel =', '                                getTabModelSelector().getModel(!tabModel.isIncognito());', '                        tabIndex = TabModelUtils.getTabIndexById(otherModel, tabIdToBringToFront);', '                        if (tabIndex != TabModel.INVALID_TAB_INDEX) {', '                            getTabModelSelector().selectModel(otherModel.isIncognito());', '                            TabModelUtils.setIndex(otherModel, tabIndex);', '                        } else {', '                            Log.e(TAG, ""Failed to bring tab to front because it doesn\'t exist."");', '                            return;', '                        }', '                    } else {', '                        TabModelUtils.setIndex(tabModel, tabIndex);', '                    }', '                    break;', '                case TabOpenType.CLOBBER_CURRENT_TAB:', '                    // The browser triggered the intent. This happens when clicking links which', '                    // can be handled by other applications (e.g. www.youtube.com links).', '                    Tab currentTab = getActivityTab();', '                    if (currentTab != null) {', '                        RedirectHandlerTabHelper.updateIntentInTab(currentTab, intent);', '                        currentTab.loadUrl(loadUrlParams);', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    break;', '                case TabOpenType.REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:', '                    launchIntent(loadUrlParams, externalAppId, false, intent);', '                    break;', '                case TabOpenType.REUSE_TAB_MATCHING_ID_ELSE_NEW_TAB:', '                    int tabId = IntentUtils.safeGetIntExtra(', '                            intent, TabOpenType.REUSE_TAB_MATCHING_ID_STRING, Tab.INVALID_TAB_ID);', '                    if (tabId != Tab.INVALID_TAB_ID) {', '                        mTabModelOrchestrator.tryToRestoreTabStateForId(tabId);', '                        int matchingTabIndex = TabModelUtils.getTabIndexById(tabModel, tabId);', '                        boolean loaded = false;', '                        if (matchingTabIndex != TabModel.INVALID_TAB_INDEX) {', '                            Tab tab = tabModel.getTabAt(matchingTabIndex);', '                            if (tab.getUrl().getSpec().equals(url)', '                                    || tab.getUrl().getSpec().equals(IntentUtils.safeGetStringExtra(', '                                            intent, TabOpenType.REUSE_TAB_ORIGINAL_URL_STRING))) {', '                                tabModel.setIndex(matchingTabIndex, TabSelectionType.FROM_USER);', '                                tab.loadUrl(loadUrlParams);', '                                loaded = true;', '                            }', '                        }', '                        if (!loaded) {', '                            launchIntent(loadUrlParams, externalAppId, false, intent);', '                        }', '                    }', '                    break;', '                case TabOpenType.OPEN_NEW_TAB:', '                    if (fromLauncherShortcut) {', '                        recordLauncherShortcutAction(false);', '                        reportNewTabShortcutUsed(false);', '                    }', '', '                    launchIntent(loadUrlParams, externalAppId, true, intent);', '                    break;', '                case TabOpenType.OPEN_NEW_INCOGNITO_TAB:', '                    if (!TextUtils.equals(externalAppId, getPackageName())) {', '                        assert false : ""Only Chrome is allowed to open incognito tabs"";', '                        Log.e(TAG, ""Only Chrome is allowed to open incognito tabs"");', '                        return;', '                    }', '', '                    if (!IncognitoUtils.isIncognitoModeEnabled()) {', '                        // The incognito launcher shortcut is manipulated in #onDeferredStartup(),', ""                        // so it's possible for a user to invoke the shortcut before it's disabled."", '                        // Quick actions search widget is installed on the home screen and may', '                        // need to be updated before the incognito button is removed.', '                        // Opening an incognito tab while incognito mode is disabled from somewhere', '                        // besides the launcher shortcut of from quick action search widget is an', '                        // error.', '                        if (fromAppWidget || fromLauncherShortcut) {', '                            // We are using the message introduced for quick action search widget', '                            // for both the widget and the launcher shortcut here.', '                            Toast.makeText(ChromeTabbedActivity.this,', '                                         R.string.quick_action_search_widget_message_no_incognito,', '                                         Toast.LENGTH_LONG)', '                                    .show();', '                        } else {', '                            assert false : ""Tried to open incognito tab while incognito disabled"";', '                            Log.e(TAG, ""Tried to open incognito tab while incognito disabled"");', '                        }', '', '                        return;', '                    }', '', '                    if (url == null || url.equals(UrlConstants.NTP_URL)) {', '                        if (fromLauncherShortcut) {', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);', '                            recordLauncherShortcutAction(true);', '                            reportNewTabShortcutUsed(true);', '                        } else if (fromAppWidget) {', '                            RecordUserAction.record(""QuickActionSearchWidget.StartIncognito"");', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);', '                        } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);', '                            if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {', '                                // Since the Tab is created in the foreground, its View will gain', '                                // focus, and since the Tab and the URL bar are not yet in the same', ""                                // View hierarchy, setting the URL bar's focus here won't clear the"", ""                                // Tab's focus. When the Tab is added to the hierarchy, we want the"", ""                                // URL bar to retain focus, so we clear the Tab's focus here."", '                                tab.getView().clearFocus();', '                                focus = true;', '                            }', '', '                            IncognitoTabLauncher.recordUse();', '                        } else {', '                            // Used by the Account management screen to open a new incognito tab.', '                            // Account management screen collects its metrics separately.', '                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);', '                        }', '                    } else {', '                        @TabLaunchType', '                        Integer launchType = IntentHandler.getTabLaunchType(intent);', '                        if (launchType == null) launchType = TabLaunchType.FROM_LINK;', '                        getTabCreator(true).launchUrl(', '                                url, launchType, intent, mIntentHandlingTimeMs);', '                    }', '                    break;', '                default:', '                    assert false : ""Unknown TabOpenType: "" + tabOpenType;', '                    break;', '            }', '', '            getToolbarManager().setUrlBarFocusOnceNativeInitialized(focus,', '                    focus ? OmniboxFocusReason.LAUNCH_NEW_INCOGNITO_TAB', '                          : OmniboxFocusReason.UNFOCUS);', '', '            if (tabModel.getCount() > 0 && isInOverviewMode() && !isTablet()', '                    && !shouldShowOverviewPageOnStart()) {', '                mOverviewModeController.hideOverview(true);', '            }', '        }', '', '        @Override', '        public long getIntentHandlingTimeMs() {', '            return mIntentHandlingTimeMs;', '        }', '', '        @Override', '        public void processWebSearchIntent(String query) {', '            assert false;', '        }', '', '        @Override', '        public void processTranslateTabIntent(', '                @Nullable String targetLanguageCode, @Nullable String expectedUrl) {', '            TranslateIntentHandler.translateTab(getActivityTab(), targetLanguageCode, expectedUrl);', '        }', '', '        private boolean isFromChrome(Intent intent, String externalAppId) {', '            // To determine if the processed intent is from Chrome, check for any of the following:', '            // 1.) The authentication token that will be added to trusted intents.', '            // 2.) The app ID matches Chrome.  This value can be spoofed by other applications, but', '            //     in cases where we were not able to add the authentication token this is our only', '            //     indication the intent was from Chrome.', '            return IntentHandler.wasIntentSenderChrome(intent)', '                    || TextUtils.equals(externalAppId, getPackageName());', '        }', '    }', '', '    @Override', '    public void performPreInflationStartup() {', '        // Create JankTracker before invoking super, because the parent class will invoke', '        // createRootUiCoordinator(...), which in our case requires the JankTracker to already have', '        // been created.', '        mJankTracker = new JankTrackerImpl(this);', '', '        super.performPreInflationStartup();', '', '        // Decide whether to record startup UMA histograms. This is done  early in the main', '        // Activity.onCreate() to avoid recording navigation delays when they require user input to', '        // proceed. For example, FRE (First Run Experience) happens before the activity is created,', '        // and triggers initialization of the native library.', '        //', '        // An uninitialized native library is an indication of an application start that is followed', '        // by navigation immediately without user input.', '        if (!LibraryLoader.getInstance().isInitialized()) {', '            setTrackColdStartupMetrics(true);', '        }', '', '        supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);', '', '        IncognitoTabHostRegistry.getInstance().register(mIncognitoTabHost);', '', '        mStartupPaintPreviewHelperSupplier.attach(getWindowAndroid().getUnownedUserDataHost());', '    }', '', '    @Override', '    protected RootUiCoordinator createRootUiCoordinator() {', '        return new TabbedRootUiCoordinator(this, this::onOmniboxFocusChanged,', '                getShareDelegateSupplier(), getActivityTabProvider(), mTabModelProfileSupplier,', '                mBookmarkBridgeSupplier, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), mStartSurfaceSupplier,', '                mIntentMetadataOneshotSupplier, mLayoutStateProviderOneshotSupplier,', '                mStartSurfaceParentTabSupplier, getBrowserControlsManager(), getWindowAndroid(),', '                mJankTracker, getLifecycleDispatcher(), getLayoutManagerSupplier(),', '                /* menuOrKeyboardActionController= */ this, this::getActivityThemeColor,', '                getModalDialogManagerSupplier(), /* appMenuBlocker= */ this, this::supportsAppMenu,', '                this::supportsFindInPage, getTabCreatorManagerSupplier(), getFullscreenManager(),', '                getCompositorViewHolderSupplier(), getTabContentManagerSupplier(),', '                getOverviewModeBehaviorSupplier(), this::getSnackbarManager, getActivityType(),', '                this::isInOverviewMode, this::isWarmOnResume,', '                /* appMenuDelegate= */ this, /* statusBarColorProvider= */ this,', '                mEphemeralTabCoordinatorSupplier, getIntentRequestTracker(),', '                getControlContainerHeightResource(), this::getInsetObserverView,', '                this::backShouldCloseTab);', '    }', '', '    @Override', '    protected int getControlContainerLayoutId() {', '        return R.layout.control_container;', '    }', '', '    @Override', '    public int getControlContainerHeightResource() {', '        return R.dimen.control_container_height;', '    }', '', '    @Override', '    protected int getToolbarLayoutId() {', '        return isTablet() ? R.layout.toolbar_tablet : R.layout.toolbar_phone;', '    }', '', '    @Override', '    protected int getToolbarShadowResource() {', '        final boolean themeRefactorEnabled =', '                CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID);', '        return themeRefactorEnabled ? R.drawable.toolbar_hairline', '                                    : R.drawable.modern_toolbar_shadow;', '    }', '', '    @Override', '    protected int getToolbarShadowLayoutHeight() {', '        final int res = CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID)', '                ? R.dimen.toolbar_hairline_height', '                : R.dimen.toolbar_shadow_height;', '        return getResources().getDimensionPixelSize(res);', '    }', '', '    @Override', '    public void performPostInflationStartup() {', '        super.performPostInflationStartup();', '', '        FontPreloader.getInstance().onPostInflationStartupTabbedActivity();', '', '        TabModelSelector tabModelSelector = getTabModelSelector();', '        IncognitoProfileDestroyer.observeTabModelSelector(tabModelSelector);', '        IncognitoNotificationPresenceController.observeTabModelSelector(tabModelSelector);', '', '        // Critical path for startup. Create the minimum objects needed', '        // to allow a blank screen draw (without depending on any native code)', '        // and then yield ASAP.', '        if (isFinishing()) return;', '', ""        // Don't show the keyboard until user clicks in."", '        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN', '                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);', '', '        mContentContainer = (ViewGroup) findViewById(android.R.id.content);', '        mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);', '', '        Supplier<Boolean> dialogVisibilitySupplier = null;', '        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {', '            dialogVisibilitySupplier = () -> {', '                assert mStartSurfaceSupplier.get() != null;', '                assert getToolbarManager().getTabGroupUi() != null;', '                // Return true if dialog from either tab switcher or tab strip is visible.', '', '                ToolbarManager toolbarManager = getToolbarManager();', '                TabGroupUi tabGroupUi = toolbarManager.getTabGroupUi();', '                boolean isDialogVisible = tabGroupUi.isTabGridDialogVisible();', '', '                Supplier<Boolean> tabSwitcherDialogVisibilitySupplier =', '                        mStartSurfaceSupplier.get().getTabGridDialogVisibilitySupplier();', '', '                if (tabSwitcherDialogVisibilitySupplier != null) {', '                    isDialogVisible = isDialogVisible || tabSwitcherDialogVisibilitySupplier.get();', '                }', '                return isDialogVisible;', '            };', '        }', '', '        mUndoBarPopupController = new UndoBarController(this, mTabModelSelector,', '                this::getSnackbarManager, mOverviewModeBehaviorSupplier, dialogVisibilitySupplier);', '', '        mInactivityTracker = new ChromeInactivityTracker(', '                ChromePreferenceKeys.TABBED_ACTIVITY_LAST_BACKGROUNDED_TIME_MS_PREF);', '', '        assert getActivityTabStartupMetricsTracker() != null;', '        if (StartupPaintPreviewHelper.isEnabled()) {', '            StartupPaintPreviewHelper paintPreviewHelper = new StartupPaintPreviewHelper(', '                    getWindowAndroid(), getOnCreateTimestampMs(), getBrowserControlsManager(),', '                    getTabModelSelector(), shouldShowOverviewPageOnStart(), () -> {', '                        return getToolbarManager() == null', '                                ? null', '                                : getToolbarManager().getProgressBarCoordinator();', '                    });', '            mStartupPaintPreviewHelperSupplier.set(paintPreviewHelper);', '            getActivityTabStartupMetricsTracker().registerPaintPreviewObserver(paintPreviewHelper);', '        }', '    }', '', '    private boolean shouldIgnoreIntent() {', '        if (mShouldIgnoreIntent == null) {', '            // We call this only once because mIntentHandler#shouldIgnoreIntent has side effects.', '            mShouldIgnoreIntent =', '                    mIntentHandler.shouldIgnoreIntent(getIntent(), /*startedActivity=*/true);', '        }', '        return mShouldIgnoreIntent;', '    }', '', '    @Override', '    protected final void dispatchOnInflationComplete() {', '        super.dispatchOnInflationComplete();', '', '        // When the feature flag {@link ChromeFeatureList.INSTANT_START} turns on phones (not', '        // tablet), a view-only start page created on Java will be shown before native is', '        // initialized. The {@link prepareToShowStartPagePreNative()} is only called in a cold', '        // start.', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                && TabUiFeatureUtilities.supportInstantStart(isTablet(), this) && !hadWarmStart()) {', '            prepareToShowStartPagePreNative();', '        }', '    }', '', '    /**', '     * Prepares to show the start page before native is initialized. For example, create', '     * an LayoutManagerChrome object, add overview mode observer and so on.', '     */', '    private void prepareToShowStartPagePreNative() {', '        assert TabUiFeatureUtilities.supportInstantStart(isTablet() && !hadWarmStart(), this);', '        try (TraceEvent e =', '                        TraceEvent.scoped(""ChromeTabbedActivity.prepareToShowStartPagePreNative"")) {', '            setupCompositorContentPreNativeForPhone();', '            getCompositorViewHolderSupplier().get().setLayoutManager(mLayoutManager);', '', '            if (shouldShowOverviewPageOnStart()) {', '                mLayoutManager.setTabModelSelector(mTabModelSelector);', '                mIsAccessibilityTabSwitcherEnabled =', '                        DeviceClassManager.enableAccessibilityLayout(this);', '                assert !mHasDeterminedOverviewStateForCurrentSession;', '                setInitialOverviewState();', '            }', '        }', '    }', '', '    @Override', '    protected TabModelOrchestrator createTabModelOrchestrator() {', '        boolean tabMergingEnabled =', '                mMultiInstanceManager != null && mMultiInstanceManager.isTabModelMergingEnabled();', '        mTabModelOrchestrator = new TabbedModeTabModelOrchestrator(tabMergingEnabled);', '        return mTabModelOrchestrator;', '    }', '', '    @Override', '    protected void createTabModels() {', '        assert mTabModelSelector == null;', '        assert mWindowId != INVALID_WINDOW_ID;', '', '        Bundle savedInstanceState = getSavedInstanceState();', '', '        // We determine the model as soon as possible so every systems get initialized coherently.', '        boolean startIncognito = savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false);', '', '        mNextTabPolicySupplier = new ChromeNextTabPolicySupplier(mOverviewModeBehaviorSupplier);', '', '        boolean tabModelWasCreated = mTabModelOrchestrator.createTabModels(', '                this, this, mNextTabPolicySupplier, mWindowId);', '        if (!tabModelWasCreated) {', '            finish();', '            return;', '        }', '', '        if (mMultiInstanceManager != null) {', '            int assignedIndex = TabWindowManagerSingleton.getInstance().getIndexForWindow(this);', '            // The given index and the one computed by TabWindowManager should be one and the same.', '            assert !MultiWindowUtils.isMultiInstanceApi31Enabled() || assignedIndex == mWindowId;', '            mMultiInstanceManager.initialize(assignedIndex, getTaskId());', '        }', '', '        mTabModelSelector = mTabModelOrchestrator.getTabModelSelector();', '        mTabModelSelector.addObserver(new TabModelSelectorObserver() {', '            @Override', '            public void onTabStateInitialized() {', '                if (!mCreatedTabOnStartup) return;', '', '                TabModel model = mTabModelSelector.getModel(false);', '                TasksUma.recordTasksUma(model);', '            }', '        });', '', '        mTabModelSelectorTabObserver = new TabModelSelectorTabObserver(mTabModelSelector) {', '            @Override', '            public void onDidFinishNavigation(Tab tab, NavigationHandle navigation) {', '                if (!navigation.hasCommitted() || !navigation.isInPrimaryMainFrame()) {', '                    return;', '                }', '                DataReductionPromoInfoBar.maybeLaunchPromoInfoBar(ChromeTabbedActivity.this,', '                        tab.getWebContents(), navigation.getUrl(), tab.isShowingErrorPage(),', '                        navigation.isFragmentNavigation(), navigation.httpStatusCode());', '                if (SyncErrorPromptUtils.isMessageUiEnabled()) {', '                    SyncErrorMessage.maybeShowMessageUi(', '                            getWindowAndroid(), ChromeTabbedActivity.this);', '                } else {', '                    SyncErrorInfoBar.maybeLaunchSyncErrorInfoBar(tab.getWebContents());', '                }', '                SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());', '            }', '        };', '        mAppIndexingUtil = new AppIndexingUtil(mTabModelSelector);', '', '        if (startIncognito) mTabModelSelector.selectModel(true);', '    }', '', '    @Override', '    protected LaunchCauseMetrics createLaunchCauseMetrics() {', '        return new TabbedActivityLaunchCauseMetrics(this);', '    }', '', '    @Override', '    public AppMenuPropertiesDelegate createAppMenuPropertiesDelegate() {', '        return new TabbedAppMenuPropertiesDelegate(this, getActivityTabProvider(),', '                getMultiWindowModeStateDispatcher(), getTabModelSelector(), getToolbarManager(),', '                getWindow().getDecorView(), this, mOverviewModeBehaviorSupplier,', '                ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                        ? mStartSurfaceSupplier', '                        : null,', '                mBookmarkBridgeSupplier,', '                ()', '                        -> getTabCreator(/*incognito=*/false)', '                                   .launchUrl(NewTabPageUtils.encodeNtpUrl(', '                                                      NewTabPageLaunchOrigin.WEB_FEED),', '                                           TabLaunchType.FROM_CHROME_UI),', '                getModalDialogManager(), getSnackbarManager());', '    }', '', '    private TabDelegateFactory getTabDelegateFactory() {', '        if (mTabDelegateFactory == null) {', '            mTabDelegateFactory = new TabbedModeTabDelegateFactory(this,', '                    getAppBrowserControlsVisibilityDelegate(), getShareDelegateSupplier(),', '                    mEphemeralTabCoordinatorSupplier,', '                    ((TabbedRootUiCoordinator) mRootUiCoordinator)::onContextMenuCopyLink,', '                    mRootUiCoordinator.getBottomSheetController(),', '                    /* ChromeActivityNativeDelegate */ this, /* isCustomTab= */ false,', '                    getBrowserControlsManager(), getFullscreenManager(),', '                    /* TabCreatorManager */ this, getTabModelSelectorSupplier(),', '                    getCompositorViewHolderSupplier(), getModalDialogManagerSupplier(),', '                    this::getSnackbarManager, getBrowserControlsManager(), getActivityTabProvider(),', '                    getLifecycleDispatcher(), getWindowAndroid(), this::getLastUserInteractionTime,', '                    this::hadWarmStart, mJankTracker, getToolbarManager()::getToolbar);', '        }', '        return mTabDelegateFactory;', '    }', '', '    @Override', '    protected Pair<ChromeTabCreator, ChromeTabCreator> createTabCreators() {', '        ChromeTabCreator.OverviewNTPCreator overviewNTPCreator = null;', '', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '            overviewNTPCreator = new ChromeTabCreator.OverviewNTPCreator() {', '                @Override', '                public boolean handleCreateNTPIfNeeded(boolean isNTP, boolean incognito,', '                        Tab parentTab, @NewTabPageLaunchOrigin int launchOrigin) {', '                    boolean shouldShowStart =', '                            showStartSurfaceHomeForNTP(isNTP, incognito, parentTab, launchOrigin);', '                    if (shouldShowStart) {', '                        mStartSurfaceParentTabSupplier.set(parentTab);', '                    }', '                    return shouldShowStart;', '                }', '', '                @Override', '                public void preTabInitialization(Tab tab, String url) {', '                    StartSurfaceConfiguration.maySetUserDataForEmptyTab(tab, url);', '                }', '            };', '        }', '        return Pair.create(', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, false, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()),', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, true, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()));', '    }', '', '    @Override', '    protected void initDeferredStartupForActivity() {', '        super.initDeferredStartupForActivity();', '        DeferredStartupHandler.getInstance().addDeferredTask(() -> {', '            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);', '            RecordHistogram.recordSparseHistogram(', '                    ""MemoryAndroid.DeviceMemoryClass"", am.getMemoryClass());', '', '            LauncherShortcutActivity.updateIncognitoShortcut(ChromeTabbedActivity.this);', '', '            ChromeSurveyController.initialize(mTabModelSelector, getLifecycleDispatcher(),', '                    ChromeTabbedActivity.this, MessageDispatcherProvider.from(getWindowAndroid()));', '', '            if (mStartSurfaceSupplier.get() != null) {', '                mStartSurfaceSupplier.get().onOverviewShownAtLaunch(', '                        mOverviewShownOnStart, getOnCreateTimestampMs());', '            }', '        });', '    }', '', '    @Override', '    protected void recordIntentToCreationTime(long timeMs) {', '        super.recordIntentToCreationTime(timeMs);', '        RecordHistogram.recordCustomTimesHistogram(""MobileStartup.IntentToCreationTime.TabbedMode"",', '                timeMs, 1, DateUtils.SECOND_IN_MILLIS * 30, 50);', '    }', '', '    @Override', '    protected boolean isStartedUpCorrectly(Intent intent) {', '        mWindowId = 0;', '        Bundle savedInstanceState = getSavedInstanceState();', '        int windowId = getExtraWindowIdFromIntent(intent);', '        if (savedInstanceState != null && savedInstanceState.containsKey(WINDOW_INDEX)) {', '            // Activity is recreated after destruction. |windowId| must not be valid in this case.', '            assert windowId == INVALID_WINDOW_ID;', '            mWindowId = savedInstanceState.getInt(WINDOW_INDEX, 0);', '        } else if (mMultiInstanceManager != null) {', ""            // |allocInstanceId| doesn't do any disk I/O that would add a long-running task"", '            // to pre-inflation startup.', '            boolean preferNew = getExtraPreferNewFromIntent(intent);', '            mWindowId = mMultiInstanceManager.allocInstanceId(windowId, getTaskId(), preferNew);', '        }', '        if (mWindowId == INVALID_WINDOW_ID) {', '            Log.i(TAG, ""Window ID not allocated. Finishing the activity"");', '            Toast.makeText(this, R.string.max_number_of_windows, Toast.LENGTH_LONG).show();', '            return false;', '        }', '', '        if (mMultiInstanceManager != null', '                && !mMultiInstanceManager.isStartedUpCorrectly(getTaskId())) {', '            return false;', '        }', '', '        return super.isStartedUpCorrectly(intent);', '    }', '', '    private static int getExtraWindowIdFromIntent(Intent intent) {', '        int windowId = IntentUtils.safeGetIntExtra(', '                intent, IntentHandler.EXTRA_WINDOW_ID, INVALID_WINDOW_ID);', '        return IntentUtils.isTrustedIntentFromSelf(intent) ? windowId : INVALID_WINDOW_ID;', '    }', '', '    private static boolean getExtraPreferNewFromIntent(Intent intent) {', '        return IntentUtils.safeGetBooleanExtra(intent, IntentHandler.EXTRA_PREFER_NEW, false);', '    }', '', '    @Override', '    public void terminateIncognitoSession() {', '        getTabModelSelector().getModel(true).closeAllTabs();', '    }', '', '    @Override', '    public boolean onMenuOrKeyboardAction(final int id, boolean fromMenu) {', '        final Tab currentTab = getActivityTab();', '        boolean currentTabIsNtp = isTabNtp(currentTab);', '        if (id == R.id.new_tab_menu_id) {', '            getTabModelSelector().getModel(false).commitAllTabClosures();', '            RecordUserAction.record(""MobileMenuNewTab"");', '            RecordUserAction.record(""MobileNewTabOpened"");', '            ReturnToChromeExperimentsUtil.onNewTabOpened();', '            reportNewTabShortcutUsed(false);', '            if (fromMenu) RecordUserAction.record(""MobileMenuNewTab.AppMenu"");', '', '            getTabCreator(false).launchNTP();', '', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '        } else if (id == R.id.new_incognito_tab_menu_id) {', '            if (IncognitoUtils.isIncognitoModeEnabled()) {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This action must be recorded before opening the incognito tab since UMA actions', '                // are dropped when an incognito tab is open.', '                RecordUserAction.record(""MobileMenuNewIncognitoTab"");', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '                reportNewTabShortcutUsed(true);', '                if (fromMenu) RecordUserAction.record(""MobileMenuNewIncognitoTab.AppMenu"");', '                getTabCreator(true).launchNTP();', '            }', '        } else if (id == R.id.all_bookmarks_menu_id) {', ""            // Note that 'currentTab' could be null in overview mode when start surface is"", '            // enabled.', '            getCompositorViewHolderSupplier().get().hideKeyboard(() -> {', '                BookmarkUtils.showBookmarkManager(', '                        ChromeTabbedActivity.this, getCurrentTabModel().isIncognito());', '            });', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_BOOKMARKS_MANAGER);', '            }', '', '            @BrowserProfileType', '            int type = getCurrentTabModel().isIncognito() ? BrowserProfileType.INCOGNITO', '                                                          : BrowserProfileType.REGULAR;', '            RecordHistogram.recordEnumeratedHistogram(', '                    ""Bookmarks.OpenBookmarkManager.PerProfileType"", type,', '                    BrowserProfileType.MAX_VALUE + 1);', '', '            RecordUserAction.record(""MobileMenuAllBookmarks"");', '        } else if (id == R.id.recent_tabs_menu_id) {', '            LoadUrlParams params =', '                    new LoadUrlParams(UrlConstants.RECENT_TABS_URL, PageTransition.AUTO_BOOKMARK);', '            boolean isInOverviewMode = isInOverviewMode();', '            if (isInOverviewMode && !isTablet()', '                    && ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                // When tapping the ""Recent tabs"" menu item from the overview page (Start surface or', '                // GTS), we will create the tab with the launch type FROM_START_SURFACE. Thus, if', '                // the back button is tapped on this ""Recent tabs"" page, it can go back to the', '                // overview page.', '                ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurface(', '                        params, getCurrentTabModel().isIncognito(), null);', '            } else if (currentTab != null) {', '                currentTab.loadUrl(params);', '            } else {', '                getTabCreator(getCurrentTabModel().isIncognito())', '                        .createNewTab(params, TabLaunchType.FROM_CHROME_UI, null);', '            }', '            if (isInOverviewMode) {', '                mOverviewModeController.hideOverview(true);', '            }', '', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_RECENT_TABS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuRecentTabs"");', '            ReturnToChromeExperimentsUtil.onRecentTabsOpened();', '        } else if (id == R.id.close_tab) {', '            getCurrentTabModel().closeTab(currentTab, true, false, true);', '            RecordUserAction.record(""MobileTabClosed"");', '        } else if (id == R.id.close_all_tabs_menu_id) {', '            // Close both incognito and normal tabs', '            getTabModelSelector().closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllTabs"");', '        } else if (id == R.id.close_all_incognito_tabs_menu_id) {', '            // Close only incognito tabs', '            getTabModelSelector().getModel(true).closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllIncognitoTabs"");', '        } else if (id == R.id.focus_url_bar) {', '            boolean isUrlBarVisible = !mOverviewModeController.overviewVisible()', '                    && (!isTablet() || getCurrentTabModel().getCount() != 0);', '            if (isUrlBarVisible) {', '                getToolbarManager().setUrlBarFocus(', '                        true, OmniboxFocusReason.MENU_OR_KEYBOARD_ACTION);', '            }', '        } else if (id == R.id.downloads_menu_id) {', '            OTRProfileID otrProfileID = null;', '            if (currentTab != null && currentTab.getWebContents() != null) {', '                Profile profile = Profile.fromWebContents(currentTab.getWebContents());', '                otrProfileID = profile != null ? profile.getOTRProfileID() : null;', '            }', '            DownloadUtils.showDownloadManager(', '                    this, currentTab, otrProfileID, DownloadOpenSource.MENU);', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_DOWNLOADS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuDownloadManager"");', '        } else if (id == R.id.open_recently_closed_tab) {', '            TabModel currentModel = mTabModelSelector.getCurrentModel();', '            if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedTab();', '            RecordUserAction.record(""MobileTabClosedUndoShortCut"");', '        } else if (id == R.id.enter_vr_id) {', '            VrModuleProvider.getDelegate().enterVrIfNecessary();', '        } else {', '            return super.onMenuOrKeyboardAction(id, fromMenu);', '        }', '        return true;', '    }', '', '    private boolean isTabNtp(Tab tab) {', '        return tab != null && UrlUtilities.isNTPUrl(tab.getUrl());', '    }', '', '    private boolean isTabRegularNtp(Tab tab) {', '        return isTabNtp(tab) && !tab.isIncognito();', '    }', '', '    private void onOmniboxFocusChanged(boolean hasFocus) {', '        mTabModalHandler.onOmniboxFocusChanged(hasFocus);', '    }', '', '    private void recordLauncherShortcutAction(boolean isIncognito) {', '        if (isIncognito) {', '            RecordUserAction.record(""Android.LauncherShortcut.NewIncognitoTab"");', '        } else {', '            RecordUserAction.record(""Android.LauncherShortcut.NewTab"");', '        }', '    }', '', '    @Override', '    public boolean handleBackPressed() {', '        if (!mUIWithNativeInitialized) return false;', '', '        if (getManualFillingComponent().handleBackPress()) return true;', '', '        if (exitFullscreenIfShowing()) {', '            return true;', '        }', '', '        // TODO(1091411): Find a better mechanism for back-press handling for features.', '        if (mRootUiCoordinator.getBottomSheetController().handleBackPress()) return true;', '', '        if (mTabModalHandler.handleBackPress()) return true;', '', '        final Tab currentTab = getActivityTab();', '        if (currentTab == null) {', '            moveTaskToBack(true);', '            return true;', '        }', '', '        // If we are in the tab switcher mode (not in the Start surface homepage) and not a tablet,', '        // then leave tab switcher mode on back.', '        if (mOverviewModeController.overviewVisible() && !isTablet()', '                && (mStartSurfaceSupplier.get() == null', '                        || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                                == StartSurfaceState.SHOWN_TABSWITCHER)) {', '            mOverviewModeController.hideOverview(true);', '            return true;', '        }', '', '        final WebContents webContents = currentTab.getWebContents();', '        if (webContents != null) {', '            RenderFrameHost focusedFrame = webContents.getFocusedFrame();', '            if (focusedFrame != null && focusedFrame.signalCloseWatcherIfActive()) return true;', '        }', '', '        if (getToolbarManager().back()) return true;', '', '        // If the current tab url is HELP_URL, then the back button should close the tab to', '        // get back to the previous state. The reason for startsWith check is that the', '        // actual redirected URL is a different system language based help url.', '        final @TabLaunchType int type = currentTab.getLaunchType();', '        final boolean helpUrl = currentTab.getUrl().getSpec().startsWith(HELP_URL_PREFIX);', '        if (type == TabLaunchType.FROM_CHROME_UI && helpUrl) {', '            getCurrentTabModel().closeTab(currentTab);', '            return true;', '        }', '', ""        // If we aren't in the overview mode, we handle the Tab with launchType"", '        // TabLaunchType.FROM_START_SURFACE or has ""OpenedFromStart"" property.', '        if (!mOverviewModeController.overviewVisible()', '                && (type == TabLaunchType.FROM_START_SURFACE', '                        || StartSurfaceUserData.isOpenedFromStart(currentTab))) {', '            if (StartSurfaceUserData.getKeepTab(currentTab)', '                    || StartSurfaceUserData.isOpenedFromStart(currentTab)) {', '                // If the current tab is created from the start surface with the keepTab property,']}, {'a': ['                // shows the Start surface non-incognito homepage to prevent a loop between the', '                // current tab and previous overview mode. Once in the Start surface, it will close', '                // Chrome if back button is tapped again.'], 'b': ['                // shows the Start surface Homepage to prevent a loop between the current tab and', '                // previous overview mode. Once in the Start surface, it will close Chrome if back', '                // button is tapped again.']}, {'ab': ['                if (currentTab.isIncognito()) {', '                    if (!currentTab.isClosing()) {', '                        getCurrentTabModel().closeTab(currentTab);', '                    }']}, {'a': ['                    mTabModelSelector.selectModel(/*incognito=*/false);'], 'b': ['                    mTabModelSelector.selectModel(false);']}, {'ab': ['                }', '                showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '            } else {', '                // Otherwise, clicking the back button should close the tab and go back to the', '                // previous overview mode.', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS);', '                if (!currentTab.isClosing()) {', '                    getCurrentTabModel().closeTab(currentTab);', '                }', '            }', '            return true;', '        }', '', '        final boolean shouldCloseTab = backShouldCloseTab(currentTab);', '', '        // Minimize the app if either:', '        // - we decided not to close the tab', '        // - we decided to close the tab, but it was opened by an external app, so we will go', '        //   exit Chrome on top of closing the tab', '        final boolean minimizeApp =', '                !shouldCloseTab || TabAssociatedApp.isOpenedFromExternalApp(currentTab);', '        if (minimizeApp) {', '            if (shouldCloseTab) {', '                sendToBackground(currentTab);', '                return true;', '            } else {', '                sendToBackground(null);', '                return true;', '            }', '        } else if (shouldCloseTab) {', '            currentTab.getWebContents().dispatchBeforeUnload(false);', '            return true;', '        }', '', '        assert false : ""The back button should have already been handled by this point"";', '        return false;', '    }', '', '    /**', '     * [true]: Reached the bottom of the back stack on a tab the user did not explicitly', '     * create (i.e. it was created by an external app or opening a link in background, etc).', '     * [false]: Reached the bottom of the back stack on a tab that the user explicitly', '     * created (e.g. selecting ""new tab"" from menu).', '     *', '     * @return Whether pressing the back button on the provided Tab should close the Tab.', '     */', '    @Override', '    public boolean backShouldCloseTab(Tab tab) {', '        if (!tab.isInitialized()) {', '            return false;', '        }', '        @TabLaunchType', '        int type = tab.getLaunchType();', '', '        return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_EXTERNAL_APP', '                || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND', '                || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                || (type == TabLaunchType.FROM_RESTORE', '                        && CriticalPersistedTabData.from(tab).getParentId() != Tab.INVALID_TAB_ID);', '    }', '', '    /**', '     * Sends this Activity to the background.', '     *', '     * @param tabToClose Tab that will be closed once the app is not visible.', '     */', '    private void sendToBackground(@Nullable final Tab tabToClose) {', '        Log.i(TAG, ""sendToBackground(): "" + tabToClose);', '        moveTaskToBack(true);', '        if (tabToClose != null) {', ""            // In the case of closing a tab upon minimization, don't allow the close action to"", ""            // happen until after our app is minimized to make sure we don't get a brief glimpse of"", '            // the newly active tab before we exit Chrome.', '            //', ""            // If the runnable doesn't run before the Activity dies, Chrome won't crash but the tab"", ""            // won't be closed (crbug.com/587565)."", '            mHandler.postDelayed(() -> {', '                boolean hasNextTab =', '                        getCurrentTabModel().getNextTabIfClosed(tabToClose.getId()) != null;', '                getCurrentTabModel().closeTab(tabToClose, false, true, false);', '', '                // If there is no next tab to open, enter overview mode.', '                if (!hasNextTab) showOverview(StartSurfaceState.SHOWING_START);', '            }, CLOSE_TAB_ON_MINIMIZE_DELAY_MS);', '        }', '    }', '', '    @Override', '    public boolean moveTaskToBack(boolean nonRoot) {', '        try {', '            return super.moveTaskToBack(nonRoot);', '        } catch (NullPointerException e) {', '            // Work around framework bug described in https://crbug.com/817567.', '            finish();', '            return true;', '        }', '    }', '', '    /**', '     * Launch a URL from an intent.', '     *', '     * @param url           The url from the intent.', '     * @param referer       Optional referer URL to be used.', '     * @param headers       Optional headers to be sent when opening the URL.', '     * @param externalAppId External app id.', '     * @param forceNewTab   Whether to force the URL to be launched in a new tab or to fall', '     *                      back to the default behavior for making that determination.', '     * @param isRendererInitiated Whether the intent is originally from browser renderer process.', '     * @param initiatorOrigin Origin that initiates the intent.', '     * @param intent        The original intent.', '     */', '    private Tab launchIntent(', '            LoadUrlParams loadUrlParams, String externalAppId, boolean forceNewTab, Intent intent) {', '        if (mUIWithNativeInitialized && !UrlUtilities.isNTPUrl(loadUrlParams.getUrl())) {', '            mOverviewModeController.hideOverview(false);', '            getToolbarManager().finishAnimations();', '        }', '        if (IntentHandler.wasIntentSenderChrome(intent)) {', '            // If the intent was launched by chrome, open the new tab in the appropriate model.', '            boolean isIncognito = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB, false);', '            @TabLaunchType', '            Integer launchType = IntentHandler.getTabLaunchType(intent);', '            if (launchType == null) {', '                if (IntentUtils.safeGetBooleanExtra(', '                            intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false)) {', '                    launchType = TabLaunchType.FROM_LAUNCHER_SHORTCUT;', '                } else if (IntentUtils.safeGetBooleanExtra(', '                                   intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false)) {', '                    launchType = TabLaunchType.FROM_APP_WIDGET;', '                } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                    launchType = TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB;', '                } else {', '                    // Using FROM_LINK ensures the tab is parented to the current tab, which allows', '                    // the back button to close these tabs and restore selection to the previous', '                    // tab.', '                    launchType = TabLaunchType.FROM_LINK;', '                }', '            }', '            return getTabCreator(isIncognito).createNewTab(loadUrlParams, launchType, null, intent);', '        }', '', '        // Check if the tab is being created from a Reader Mode navigation.', '        if (ReaderModeManager.isEnabled() && ReaderModeManager.isReaderModeCreatedIntent(intent)) {', '            Bundle extras = intent.getExtras();', '            int readerParentId = IntentUtils.safeGetInt(', '                    extras, ReaderModeManager.EXTRA_READER_MODE_PARENT, Tab.INVALID_TAB_ID);', '            extras.remove(ReaderModeManager.EXTRA_READER_MODE_PARENT);', '            // Set the parent tab to the tab that Reader Mode started from.', '            if (readerParentId != Tab.INVALID_TAB_ID && mTabModelSelector != null) {', '                return getCurrentTabCreator().createNewTab(', '                        new LoadUrlParams(loadUrlParams.getUrl(), PageTransition.LINK),', '                        TabLaunchType.FROM_LINK, mTabModelSelector.getTabById(readerParentId));', '            }', '        }', '', '        return getTabCreator(false).launchUrlFromExternalApp(', '                loadUrlParams, externalAppId, forceNewTab, intent);', '    }', '', '    private void showOverview(@StartSurfaceState int state) {', '        showOverview(state, NewTabPageLaunchOrigin.UNKNOWN);', '    }', '', '    // TODO(crbug.com/1115757): After crrev.com/c/2315823, Overview state and Startsurface state are', '    // two different things, we actual can split this into two methods: showOverview() and', ""    // showStartSurface(state). Let's do some auditing and clean up before perform the actual split."", '    private void showOverview(', '            @StartSurfaceState int state, @NewTabPageLaunchOrigin int launchOrigin) {', '        assert (state == StartSurfaceState.SHOWING_TABSWITCHER', '                || state == StartSurfaceState.SHOWING_HOMEPAGE', '                || state == StartSurfaceState.SHOWING_PREVIOUS', '                || state == StartSurfaceState.SHOWING_START);', '        if (mIsAccessibilityTabSwitcherEnabled != null && mIsAccessibilityTabSwitcherEnabled', '                && mOverviewModeController != null) {', '            // TODO(1200727): This is a temporary fix that should be removed once grid tab switcher', '            //                is completely launched. The ""start surface"" is now created regardless', '            //                of the state of accessibility, so we check that mode first and try', '            //                showing the overview list before going to the start surface.', '            mOverviewModeController.showOverview(false);', '        } else if (mStartSurfaceSupplier.get() != null) {', '            if (ReturnToChromeExperimentsUtil.shouldHideStartSurfaceWithAccessibilityOn(this)', '                    || !HomepageManager.isHomepageEnabled()) {', '                state = StartSurfaceState.SHOWING_TABSWITCHER;', '            }', '            mStartSurfaceSupplier.get().getController().setOverviewState(state, launchOrigin);', '        }', '', '        if (mOverviewModeController == null) return;', '', '        if (mOverviewModeController.overviewVisible()) {', '            if (didFinishNativeInitialization()) {', '                getCompositorViewHolderSupplier().get().hideKeyboard(() -> {});', '            }', '            return;', '        }', '', '        Tab currentTab = getActivityTab();', ""        // If we don't have a current tab, show the overview mode."", '        if (currentTab == null) {', '            mOverviewModeController.showOverview(false);', '        } else {', '            getCompositorViewHolderSupplier().get().hideKeyboard(', '                    () -> mOverviewModeController.showOverview(true));', '            updateAccessibilityState(false);', '            TasksUma.recordTabLaunchType(getCurrentTabModel());', '        }', '    }', '', '    private void hideOverview() {', '        assert (mOverviewModeController.overviewVisible());', '        if (getCurrentTabModel().getCount() != 0) {', ""            // Don't hide overview if current tab stack is empty()"", '            mOverviewModeController.hideOverview(true);', '            updateAccessibilityState(true);', '        }', '    }', '', '    /**', '     * @return Whether opening a new tab is handled by the Start surface. It may show the Start', '     * surface, or open a new tab with the omnibox get focused, depending on the value of', '     * {@link StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB}.', '     */', '    private boolean showStartSurfaceHomeForNTP(boolean isNTP, boolean incognito, Tab parentTab,', '            @NewTabPageLaunchOrigin int launchOrigin) {', '        if (!isNTP', '                || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                        this, incognito, isTablet())) {', '            return false;', '        }', '', '        getTabModelSelector().selectModel(incognito);', '        if (StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB.getValue()', '                && launchOrigin != NewTabPageLaunchOrigin.WEB_FEED) {', '            Runnable emptyTabCloseCallback = isInOverviewMode() ? () -> {', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS, launchOrigin);', '            } : null;', '            ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurfaceAsNewTab(null,', '                    PageTransition.AUTO_TOPLEVEL, incognito, parentTab, getCurrentTabModel(),', '                    emptyTabCloseCallback);', '        } else if (TabUiFeatureUtilities.supportInstantStart(isTablet(), this)', '                || (getTabModelSelector().isTabStateInitialized() && isLayoutManagerCreated())) {', '            showOverview(StartSurfaceState.SHOWING_HOMEPAGE, launchOrigin);', '        }', '        return true;', '    }', '', '    private void updateAccessibilityState(boolean enabled) {', '        Tab currentTab = getActivityTab();', '        WebContents webContents = currentTab != null ? currentTab.getWebContents() : null;', '        if (webContents != null) {', '            WebContentsAccessibility.fromWebContents(webContents).setState(enabled);', '        }', '    }', '', '    @Override', '    public void onSaveInstanceState(Bundle outState) {', '        super.onSaveInstanceState(outState);', '        CipherFactory.getInstance().saveToBundle(outState);', '        outState.putInt(', '                WINDOW_INDEX, TabWindowManagerSingleton.getInstance().getIndexForWindow(this));', '        Boolean is_incognito = getCurrentTabModel().isIncognito();', '        outState.putBoolean(IS_INCOGNITO_SELECTED, is_incognito);', ""        // If it's Incognito and native is initialized and profile exists, serialize duration"", '        // service state.', '        if (is_incognito && ProfileManager.isInitialized()) {', '            AndroidSessionDurationsServiceState.serializeFromNative(', '                    outState, getCurrentTabModel().getProfile());', '        }', '    }', '', '    @Override', '    public void onDestroyInternal() {', '        if (mCallbackController != null) {', '            mCallbackController.destroy();', '            mCallbackController = null;', '        }', '', '        if (mTabModelSelectorTabObserver != null) {', '            mTabModelSelectorTabObserver.destroy();', '            mTabModelSelectorTabObserver = null;', '        }', '', '        if (mTabModelObserver != null) mTabModelObserver.destroy();', '', '        if (mUndoBarPopupController != null) {', '            mUndoBarPopupController.destroy();', '            mUndoBarPopupController = null;', '        }', '', '        if (mAppIndexingUtil != null) {', '            mAppIndexingUtil.destroy();', '            mAppIndexingUtil = null;', '        }', '', '        if (mStartSurfaceSupplier.get() != null) {', '            mStartSurfaceSupplier.get().destroy();', '        }', '', '        if (mStartupPaintPreviewHelperSupplier != null) {', '            mStartupPaintPreviewHelperSupplier.destroy();', '        }', '', '        if (mJankTracker != null) {', '            mJankTracker.destroy();', '            mJankTracker = null;', '        }', '', '        IncognitoTabHostRegistry.getInstance().unregister(mIncognitoTabHost);', '', '        TabObscuringHandler tabObscuringHandler = getTabObscuringHandler();', '        if (tabObscuringHandler != null) {', '            getTabObscuringHandler().removeObserver(mCompositorViewHolder);', '            getTabObscuringHandler().removeObserver(mOverviewListLayout);', '        }', '', '        if (isTablet()) ChromeAccessibilityUtil.get().removeObserver(mCompositorViewHolder);', '        ChromeAccessibilityUtil.get().removeObserver(this);', '        ChromeAccessibilityUtil.get().removeObserver(mLayoutManager);', '', '        if (mTabDelegateFactory != null) mTabDelegateFactory.destroy();', '', '        mAppLaunchDrawBlocker.destroy();', '', '        super.onDestroyInternal();', '    }', '', '    @Override', '    protected void destroyTabModels() {', '        if (mTabModelOrchestrator != null) {', '            mTabModelOrchestrator.destroy();', '        }', '    }', '', '    @Override', '    public void onTrimMemory(int level) {', '        super.onTrimMemory(level);', '        if (ChromeApplicationImpl.isSevereMemorySignal(level)) {', '            NativePageAssassin.getInstance().freezeAllHiddenPages();', '        }', '    }', '', '    @Override', '    public boolean dispatchKeyEvent(KeyEvent event) {', '        Boolean result = KeyboardShortcuts.dispatchKeyEvent(event, mUIWithNativeInitialized,', '                getFullscreenManager(), /* menuOrKeyboardActionController= */ this);', '        return result != null ? result : super.dispatchKeyEvent(event);', '    }', '', '    @Override', '    public boolean onKeyDown(int keyCode, KeyEvent event) {', '        if (!mUIWithNativeInitialized) {', '            return super.onKeyDown(keyCode, event);', '        }', '        // Detecting a long press of the back button via onLongPress is broken in Android N.', '        // To work around this, use a postDelayed, which is supported in all versions.', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()', '                && !getFullscreenManager().getPersistentFullscreenMode()) {', '            if (mShowHistoryRunnable == null) mShowHistoryRunnable = this::showFullHistorySheet;', '            mHandler.postDelayed(mShowHistoryRunnable, ViewConfiguration.getLongPressTimeout());', '            return super.onKeyDown(keyCode, event);', '        }', '        boolean isCurrentTabVisible = !mOverviewModeController.overviewVisible()', '                && (!isTablet() || getCurrentTabModel().getCount() != 0);', '        return KeyboardShortcuts.onKeyDown(event, isCurrentTabVisible, true, getTabModelSelector(),', '                       /* menuOrKeyboardActionController= */ this, getToolbarManager())', '                || super.onKeyDown(keyCode, event);', '    }', '', '    private void showFullHistorySheet() {', '        ((TabbedRootUiCoordinator) mRootUiCoordinator).showFullHistorySheet();', '    }', '', '    @Override', '    public boolean onKeyUp(int keyCode, KeyEvent event) {', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()) {', '            mHandler.removeCallbacks(mShowHistoryRunnable);', '            mShowHistoryRunnable = null;', '            if (event.getEventTime() - event.getDownTime()', '                            >= ViewConfiguration.getLongPressTimeout()', '                    && NavigationSheet.isInstanceShowing(', '                            mRootUiCoordinator.getBottomSheetController())) {', '                // If tab history popup is showing, do not process the keyUp event', '                // which will dismiss it immediately.', '                return true;', '            }', '        }', '        return super.onKeyUp(keyCode, event);', '    }', '', '    @VisibleForTesting', '    public boolean hasPendingNavigationRunnableForTesting() {', '        ThreadUtils.assertOnUiThread();', '        return mShowHistoryRunnable != null;', '    }', '', '    @Override', '    public void onProvideKeyboardShortcuts(', '            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {', '        data.addAll(KeyboardShortcuts.createShortcutGroup(this));', '    }', '', '    @VisibleForTesting', '    public View getTabsView() {', '        return getCompositorViewHolderSupplier().get();', '    }', '', '    @VisibleForTesting', '    public LayoutManagerChrome getLayoutManager() {', '        return (LayoutManagerChrome) getCompositorViewHolderSupplier().get().getLayoutManager();', '    }', '', '    @VisibleForTesting', '    public Layout getOverviewListLayout() {', '        return getLayoutManager().getOverviewListLayout();', '    }', '', '    @VisibleForTesting', '    public StartSurface getStartSurface() {', '        return mStartSurfaceSupplier.get();', '    }', '', '    private ComposedBrowserControlsVisibilityDelegate getAppBrowserControlsVisibilityDelegate() {', '        // TODO(jinsukkim): Move this to RootUiCoordinator.', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getAppBrowserControlsVisibilityDelegate();', '    }', '', '    @Override', '    protected ModalDialogManager createModalDialogManager() {', '        ModalDialogManager manager = super.createModalDialogManager();', '        // TODO(crbug.com/1157310): Transition this::method refs to dedicated suppliers.', '        mTabModalHandler = new TabModalLifetimeHandler(this, getLifecycleDispatcher(), manager,', '                this::getAppBrowserControlsVisibilityDelegate, this::getTabObscuringHandler,', '                this::getToolbarManager, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), this::getBrowserControlsManager,', '                this::getFullscreenManager);', '        return manager;', '    }', '', '    // App Menu related code -----------------------------------------------------------------------', '', '    @Override', '    public boolean canShowAppMenu() {', '        // The popup menu relies on the model created during the full UI initialization, so do not', '        // attempt to show the menu until the UI creation has finished.', '        if (!mUIWithNativeInitialized) return false;', '', ""        // If the current active tab is showing a tab modal dialog, an app menu shouldn't be shown"", '        // in any cases, e.g. when a hardware menu button is clicked.', '        Tab tab = getActivityTab();', '        if (tab != null && ChromeTabModalPresenter.isDialogShowing(tab)) return false;', '', '        return super.canShowAppMenu();', '    }', '', '    @Override', '    public boolean isInOverviewMode() {', '        return mOverviewModeController != null && mOverviewModeController.overviewVisible();', '    }', '', '    @Override', '    protected IntentHandlerDelegate createIntentHandlerDelegate() {', '        return new InternalIntentDelegate();', '    }', '', '    @Override', '    public void onSceneChange(Layout layout) {', '        super.onSceneChange(layout);', '        if (!layout.shouldDisplayContentOverlay()) mTabModelSelector.onTabsViewShown();', '    }', '', '    /**', '     * Writes the tab state to disk.', '     */', '    @VisibleForTesting', '    public void saveState() {', '        mTabModelOrchestrator.saveState();', '    }', '', '    @Override', '    public void onEnterVr() {', '        super.onEnterVr();', '        mControlContainer.setVisibility(View.INVISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate == null) {', '            mVrBrowserControlsVisibilityDelegate =', '                    new BrowserControlsVisibilityDelegate(BrowserControlsState.BOTH);', '            getAppBrowserControlsVisibilityDelegate().addDelegate(', '                    mVrBrowserControlsVisibilityDelegate);', '        }', '        mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.HIDDEN);', '    }', '', '    @Override', '    public void onExitVr() {', '        super.onExitVr();', '        mControlContainer.setVisibility(View.VISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate != null) {', '            mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.BOTH);', '        }', '    }', '', '    @Override', '    protected void applyThemeOverlays() {', '        super.applyThemeOverlays();', '', '        if (TabManagementModuleProvider.getDelegate() != null) {', '            TabManagementModuleProvider.getDelegate().applyThemeOverlays(this);', '        }', '    }', '', '    @Override', '    protected boolean supportsDynamicColors() {', '        return CachedFeatureFlags.isEnabled(ChromeFeatureList.DYNAMIC_COLOR_ANDROID);', '    }', '', '    /**', '     * Reports that a new tab launcher shortcut was selected or an action equivalent to a shortcut', '     * was performed.', '     * @param isIncognito Whether the shortcut or action created a new incognito tab.', '     */', '    @TargetApi(Build.VERSION_CODES.N_MR1)', '    private void reportNewTabShortcutUsed(boolean isIncognito) {', '        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) return;', '', '        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);', '        shortcutManager.reportShortcutUsed(', '                isIncognito ? ""new-incognito-tab-shortcut"" : ""new-tab-shortcut"");', '    }', '', '    @VisibleForTesting', '    public MultiInstanceManager getMultiInstanceMangerForTesting() {', '        return mMultiInstanceManager;', '    }', '', '    @VisibleForTesting', '    public ChromeNextTabPolicySupplier getNextTabPolicySupplier() {', '        return (ChromeNextTabPolicySupplier) mNextTabPolicySupplier;', '    }', '}', '']}]",chromium%2Fsrc~main~Ib63fff1d02f6696a61891dd6449012e0c7a5d027,8731f872fe833f2c64a8604ff02ad616355d9fed,chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java,b5ea4309_819de63f_before.java,b5ea4309_819de63f_after.java,ChromeTabbedActivity::handleBackPressed,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { if ( VAR_912 ( ) ) { if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } VAR_785 ( false ) ; } VAR_352 ( VAR_368 ) ; } else { VAR_352 ( VAR_914 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_915 = VAR_679 ( VAR_604 ) ; final boolean VAR_916 = ! VAR_915 || VAR_917 ( VAR_604 ) ; if ( VAR_916 ) { if ( VAR_915 ) { VAR_918 ( VAR_604 ) ; return true ; } else { VAR_918 ( null ) ; return true ; } } else if ( VAR_915 ) { VAR_877 ( ) . VAR_919 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_920 ( ) ) { return false ; } int type = VAR_921 ( ) ; return type == VAR_640 || type == VAR_922 || type == VAR_923 || type == VAR_271 || ( type == VAR_924 && VAR_925 . from ( VAR_255 ) . VAR_926 ( ) != VAR_611 ) ; } private void VAR_918 ( Log . i ( TAG , STRING_68 + VAR_927 ) ; VAR_402 ( true ) ; if ( VAR_927 != null ) { VAR_928 ( ( ) - > { boolean VAR_929 = VAR_452 ( ) . VAR_930 ( VAR_927 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_927 , false , true , false ) ; if ( ! VAR_929 ) VAR_352 ( VAR_491 ) ; } , VAR_931 ) ; } } public boolean VAR_402 ( boolean VAR_932 ) { try { return super . VAR_402 ( VAR_932 ) ; } catch ( VAR_933 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_934 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_935 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_936 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_937 ( ) && VAR_938 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_939 ( ) ; int VAR_940 = VAR_941 ( VAR_221 , VAR_942 , VAR_611 ) ; VAR_221 . remove ( VAR_942 ) ; if ( VAR_940 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_943 ) , VAR_640 , VAR_944 ( VAR_940 ) ) ; } } return VAR_466 ( false ) . VAR_945 ( VAR_565 , VAR_566 , VAR_934 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_946 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_914 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_947 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_948 ( this ) || ! VAR_949 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_950 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_951 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_947 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_947 ( true ) ) ; VAR_952 ( false ) ; VAR_953 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_952 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_954 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_955 VAR_956 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_914 , VAR_810 ) ; } : null ; VAR_957 ( null , VAR_958 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_956 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_959 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_952 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_960 ( VAR_901 ) . VAR_961 ( VAR_549 ) ; } } public void VAR_962 ( VAR_446 VAR_963 ) { super . VAR_962 ( VAR_963 ) ; VAR_509 . getInstance ( ) . VAR_964 ( VAR_963 ) ; VAR_965 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_966 = VAR_452 ( ) . VAR_556 ( ) ; VAR_967 ( VAR_450 , VAR_966 ) ; if ( VAR_966 && VAR_968 ( ) ) { VAR_969 ( VAR_963 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_970 ( ) { if ( VAR_498 != null ) { VAR_971 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_972 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_973 ( ) ; if ( VAR_724 != null ) { VAR_974 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_975 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_976 ( ) ; } if ( VAR_731 != null ) { VAR_977 ( ) ; } if ( VAR_313 != null ) { VAR_978 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_979 ( VAR_660 ) ; VAR_980 VAR_981 = VAR_418 ( ) ; if ( VAR_981 != null ) { VAR_418 ( ) . VAR_982 ( VAR_414 ) ; VAR_418 ( ) . VAR_982 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_982 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_982 ( this ) ; VAR_412 . get ( ) . VAR_982 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_983 ( ) ; VAR_984 ( ) ; super . VAR_970 ( ) ; } protected void VAR_985 ( ) { if ( VAR_744 != null ) { VAR_986 ( ) ; } } public void VAR_987 ( int VAR_988 ) { super . VAR_987 ( VAR_988 ) ; if ( VAR_989 ( VAR_988 ) ) { VAR_990 . getInstance ( ) . VAR_991 ( ) ; } } public boolean VAR_992 ( VAR_993 event ) { Boolean result = VAR_994 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_992 ( event ) ; } public boolean VAR_995 ( int VAR_996 , VAR_993 event ) { if ( ! VAR_377 ) { return super . VAR_995 ( VAR_996 , event ) ; } if ( VAR_996 == VAR_997 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_998 == null ) VAR_998 = this : : VAR_999 ; VAR_928 ( VAR_998 , VAR_1000 ( ) ) ; return super . VAR_995 ( VAR_996 , event ) ; } boolean VAR_1001 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1002 ( event , VAR_1001 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_995 ( VAR_996 , event ) ; } private void VAR_999 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_999 ( ) ; } public boolean VAR_1003 ( int VAR_996 , VAR_993 event ) { if ( VAR_996 == VAR_997 && ! VAR_286 ( ) ) { VAR_1004 ( VAR_998 ) ; VAR_998 = null ; if ( VAR_1005 ( ) - VAR_1006 ( ) >= VAR_1000 ( ) && VAR_1007 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1003 ( VAR_996 , event ) ; } public boolean VAR_1008 ( ) { VAR_1009 ( ) ; return VAR_998 != null ; } public void VAR_1010 ( List < VAR_1011 > data , VAR_1012 VAR_1013 , int VAR_1014 ) { data . addAll ( VAR_1015 ( this ) ) ; } public View VAR_1016 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1017 VAR_1018 ( ) { return ( VAR_1017 ) VAR_289 ( ) . get ( ) . VAR_1018 ( ) ; } public VAR_1019 VAR_1020 ( ) { return VAR_1018 ( ) . VAR_1020 ( ) ; } public VAR_293 VAR_1021 ( ) { return VAR_298 . get ( ) ; } private VAR_1022 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1023 VAR_1024 ( ) { VAR_1023 VAR_1025 = super . VAR_1024 ( ) ; VAR_1026 = new VAR_1027 ( this , VAR_309 ( ) , VAR_1025 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1025 ; } public boolean VAR_1028 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1029 ( VAR_255 ) ) return false ; return super . VAR_1028 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1030 VAR_1031 ( ) { return new VAR_561 ( ) ; } public void VAR_1032 ( VAR_1019 VAR_1033 ) { super . VAR_1032 ( VAR_1033 ) ; if ( ! VAR_1034 ( ) ) VAR_1035 ( ) ; } public void VAR_1036 ( ) { VAR_436 ( ) ; } public void VAR_1037 ( ) { super . VAR_1037 ( ) ; VAR_1038 ( VAR_1039 ) ; if ( VAR_1040 == null ) { VAR_1040 = new VAR_1041 ( VAR_1042 ) ; VAR_799 ( ) . VAR_1043 ( VAR_1040 ) ; } VAR_1040 . set ( VAR_1044 ) ; } public void VAR_1045 ( ) { super . VAR_1045 ( ) ; VAR_1038 ( VAR_1046 ) ; if ( VAR_1040 != null ) { VAR_1040 . set ( VAR_1042 ) ; } } protected void VAR_1047 ( ) { super . VAR_1047 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1047 ( this ) ; } } protected boolean VAR_1048 ( ) { return VAR_688 ( VAR_1049 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1050 < VAR_1051 ) return ; VAR_1052 VAR_1053 = VAR_819 ( VAR_1054 class ) ; VAR_1055 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1056 VAR_1057 ( ) { return VAR_742 ; } public VAR_751 VAR_1058 ( ) { return ( VAR_751 ) VAR_750 ; } }",Ack
6,dc75234d_557459ea,391.0,"Reading through the CL one more time - it looks like mForeignSessions can be null ONLY before updateForeignSessions call in the ctor. In all other cases it is guaranteed to be non-null. With this in mind, does it make sense to move updatePromoState after updateForeignSessions call in ctor (and use assert in this method instead)?",390.0,391.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ntp;', '', 'import android.content.Context;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.chrome.browser.invalidation.SessionsInvalidationManager;', 'import org.chromium.chrome.browser.ntp.ForeignSessionHelper.ForeignSession;', 'import org.chromium.chrome.browser.ntp.ForeignSessionHelper.ForeignSessionTab;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.services.SigninManager;', 'import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;', 'import org.chromium.chrome.browser.signin.ui.PersonalizedSigninPromoView;', 'import org.chromium.chrome.browser.signin.ui.SigninPromoController;', 'import org.chromium.chrome.browser.sync.SyncService;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.ui.favicon.FaviconHelper;', 'import org.chromium.chrome.browser.ui.favicon.FaviconHelper.FaviconImageCallback;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountsChangeObserver;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.url.GURL;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.Collections;', 'import java.util.List;', '', '/**', ' * Provides the domain logic and data for RecentTabsPage and RecentTabsRowAdapter.', ' */', 'public class RecentTabsManager implements SyncService.SyncStateChangedListener, SignInStateObserver,', '                                          ProfileDataCache.Observer, AccountsChangeObserver {', '    /**', '     * Implement this to receive updates when the page contents change.', '     */', '    interface UpdatedCallback {', '        /**', '         * Called when the list of recently closed tabs or foreign sessions changes.', '         */', '        void onUpdated();', '    }', '    @Retention(RetentionPolicy.SOURCE)', '    @IntDef({PromoState.PROMO_NONE, PromoState.PROMO_SIGNIN_PERSONALIZED,', '            PromoState.PROMO_SYNC_PERSONALIZED, PromoState.PROMO_SYNC})', '    @interface PromoState {', '        int PROMO_NONE = 0;', '        int PROMO_SIGNIN_PERSONALIZED = 1;', '        int PROMO_SYNC_PERSONALIZED = 2;', '        int PROMO_SYNC = 3;', '    }', '', '    private static final int RECENTLY_CLOSED_MAX_TAB_COUNT = 5;', '', '    private static RecentlyClosedTabManager sRecentlyClosedTabManagerForTests;', '', '    private final Profile mProfile;', '    private final Tab mTab;', '    private final Runnable mShowHistoryManager;', '', '    private @PromoState int mPromoState = PromoState.PROMO_NONE;', '    private FaviconHelper mFaviconHelper;', '    private ForeignSessionHelper mForeignSessionHelper;', '    private List<ForeignSession> mForeignSessions;', '    private List<RecentlyClosedTab> mRecentlyClosedTabs;', '    private RecentTabsPagePrefs mPrefs;', '    private RecentlyClosedTabManager mRecentlyClosedTabManager;', '    private SigninManager mSignInManager;', '    private UpdatedCallback mUpdatedCallback;', '    private boolean mIsDestroyed;', '', '    private final ProfileDataCache mProfileDataCache;', '    private final SigninPromoController mSigninPromoController;', '    @Nullable', '    private final SyncService mSyncService;', '', '    /**', '     * Create an RecentTabsManager to be used with RecentTabsPage and RecentTabsRowAdapter.', '     *', '     * @param tab The Tab that is showing this recent tabs page.', '     * @param profile Profile that is associated with the current session.', '     * @param context the Android context this manager will work in.', '     * @param showHistoryManager Runnable showing history manager UI.', '     */', '    public RecentTabsManager(', '            Tab tab, Profile profile, Context context, Runnable showHistoryManager) {', '        mProfile = profile;', '        mTab = tab;', '        mShowHistoryManager = showHistoryManager;', '        mForeignSessionHelper = new ForeignSessionHelper(profile);', '        mPrefs = new RecentTabsPagePrefs(profile);', '        mFaviconHelper = new FaviconHelper();', '        mRecentlyClosedTabManager = sRecentlyClosedTabManagerForTests != null', '                ? sRecentlyClosedTabManagerForTests', '                : new RecentlyClosedBridge(profile);', '        mSignInManager = IdentityServicesProvider.get().getSigninManager(mProfile);', '', '        mProfileDataCache = ProfileDataCache.createWithDefaultImageSizeAndNoBadge(context);', '        mSigninPromoController = new SigninPromoController(', '                SigninAccessPoint.RECENT_TABS, SyncConsentActivityLauncherImpl.get());', '        mSyncService = SyncService.get();']}, {'b': ['        updatePromoState();']}, {'ab': ['', '        mRecentlyClosedTabManager.setTabsUpdatedRunnable(() -> {', '            updateRecentlyClosedTabs();', '            postUpdate();', '        });', '', '        updateRecentlyClosedTabs();', '        registerForForeignSessionUpdates();', '        updateForeignSessions();', '        mForeignSessionHelper.triggerSessionSync();', '        registerObservers();']}, {'a': ['        updatePromoState();']}, {'ab': ['', '        SessionsInvalidationManager.get(mProfile).onRecentTabsPageOpened();', '    }', '', '    /**', '     * Should be called when this object is no longer needed. Performs necessary listener tear down.', '     */', '    public void destroy() {', '        mIsDestroyed = true;', '        if (mSyncService != null) {', '            mSyncService.removeSyncStateChangedListener(this);', '        }', '', '        mSignInManager.removeSignInStateObserver(this);', '        mSignInManager = null;', '', '        mProfileDataCache.removeObserver(this);', '        AccountManagerFacadeProvider.getInstance().removeObserver(this);', '', '        mFaviconHelper.destroy();', '        mFaviconHelper = null;', '', '        mRecentlyClosedTabManager.destroy();', '        mRecentlyClosedTabManager = null;', '', '', '        mUpdatedCallback = null;', '', '        mPrefs.destroy();', '        mPrefs = null;', '', '        SessionsInvalidationManager.get(mProfile).onRecentTabsPageClosed();', '', '        mForeignSessionHelper.destroy();', '        mForeignSessionHelper = null;', '    }', '', '    private void registerForForeignSessionUpdates() {', '        mForeignSessionHelper.setOnForeignSessionCallback(() -> {', '            updateForeignSessions();', '            postUpdate();', '        });', '    }', '', '    private void registerObservers() {', '        if (mSyncService != null) {', '            mSyncService.addSyncStateChangedListener(this);', '        }', '', '        mSignInManager.addSignInStateObserver(this);', '', '        mProfileDataCache.addObserver(this);', '        AccountManagerFacadeProvider.getInstance().addObserver(this);', '    }', '', '    private void updateRecentlyClosedTabs() {', '        mRecentlyClosedTabs =', '                mRecentlyClosedTabManager.getRecentlyClosedTabs(RECENTLY_CLOSED_MAX_TAB_COUNT);', '    }', '', '    private void updateForeignSessions() {', '        mForeignSessions = mForeignSessionHelper.getForeignSessions();', '        if (mForeignSessions == null) {', '            mForeignSessions = Collections.emptyList();', '        }', '    }', '', '    /**', '     * @return Most up-to-date list of foreign sessions.', '     */', '    public List<ForeignSession> getForeignSessions() {', '        return mForeignSessions;', '    }', '', '    /**', '     * @return Most up-to-date list of recently closed tabs.', '     */', '    public List<RecentlyClosedTab> getRecentlyClosedTabs() {', '        return mRecentlyClosedTabs;', '    }', '', '    /**', '     * Opens a new tab navigating to ForeignSessionTab.', '     *', '     * @param session The foreign session that the tab belongs to.', '     * @param tab The tab to open.', '     * @param windowDisposition The WindowOpenDisposition flag.', '     */', '    public void openForeignSessionTab(ForeignSession session, ForeignSessionTab tab,', '            int windowDisposition) {', '        if (mIsDestroyed) return;', '        RecordUserAction.record(""MobileRecentTabManagerTabFromOtherDeviceOpened"");', '        mForeignSessionHelper.openForeignSessionTab(mTab, session, tab, windowDisposition);', '    }', '', '    /**', '     * Restores a recently closed tab.', '     *', '     * @param tab The tab to open.', '     * @param windowDisposition The WindowOpenDisposition value specifying whether the tab should', '     *         be restored into the current tab or a new tab.', '     */', '    public void openRecentlyClosedTab(RecentlyClosedTab tab, int windowDisposition) {', '        if (mIsDestroyed) return;', '        RecordUserAction.record(""MobileRecentTabManagerRecentTabOpened"");', '        mRecentlyClosedTabManager.openRecentlyClosedTab(mTab, tab, windowDisposition);', '    }', '', '    /**', '     * Opens the history page.', '     */', '    public void openHistoryPage() {', '        if (mIsDestroyed) return;', '        mShowHistoryManager.run();', '    }', '', '    /**', '     * Return the managed tab.', '     * @return the tab instance being managed by this object.', '     */', '    public Tab activeTab() {', '        return mTab;', '    }', '', '    /**', '     * Returns a favicon for a given foreign url.', '     *', '     * @param url The url to fetch the favicon for.', '     * @param size the desired favicon size.', '     * @param faviconCallback the callback to be invoked when the favicon is available.', '     * @return favicon or null if favicon unavailable.', '     */', '    public boolean getForeignFaviconForUrl(', '            GURL url, int size, FaviconImageCallback faviconCallback) {', '        return mFaviconHelper.getForeignFaviconImageForURL(mProfile, url, size, faviconCallback);', '    }', '', '    /**', '     * Fetches a favicon for snapshot document url which is returned via callback.', '     *', '     * @param url The url to fetch a favicon for.', '     * @param size the desired favicon size.', '     * @param faviconCallback the callback to be invoked when the favicon is available.', '     *', '     * @return may return false if we could not fetch the favicon.', '     */', '    public boolean getLocalFaviconForUrl(GURL url, int size, FaviconImageCallback faviconCallback) {', '        return mFaviconHelper.getLocalFaviconImageForURL(mProfile, url, size, faviconCallback);', '    }', '', '    /**', '     * Sets a callback to be invoked when recently closed tabs or foreign sessions documents have', '     * been updated.', '     *', '     * @param updatedCallback the listener to be invoked.', '     */', '    public void setUpdatedCallback(UpdatedCallback updatedCallback) {', '        mUpdatedCallback = updatedCallback;', '    }', '', '    /**', '     * Sets the persistent expanded/collapsed state of a foreign session list.', '     *', '     * @param session foreign session to collapsed.', '     * @param isCollapsed Whether the session is collapsed or expanded.', '     */', '    public void setForeignSessionCollapsed(ForeignSession session, boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setForeignSessionCollapsed(session, isCollapsed);', '    }', '', '    /**', '     * Determine the expanded/collapsed state of a foreign session list.', '     *', '     * @param session foreign session whose state to obtain.', '     *', '     * @return Whether the session is collapsed.', '     */', '    public boolean getForeignSessionCollapsed(ForeignSession session) {', '        return mPrefs.getForeignSessionCollapsed(session);', '    }', '', '    /**', '     * Sets the persistent expanded/collapsed state of the recently closed tabs list.', '     *', '     * @param isCollapsed Whether the recently closed tabs list is collapsed.', '     */', '    public void setRecentlyClosedTabsCollapsed(boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setRecentlyClosedTabsCollapsed(isCollapsed);', '    }', '', '    /**', '     * Determine the expanded/collapsed state of the recently closed tabs list.', '     *', '     * @return Whether the recently closed tabs list is collapsed.', '     */', '    public boolean isRecentlyClosedTabsCollapsed() {', '        return mPrefs.getRecentlyClosedTabsCollapsed();', '    }', '', '    /**', '     * Remove Foreign session to display. Note that it might reappear during the next sync if the', '     * session is not orphaned.', '     *', '     * This is mainly for when user wants to delete an orphaned session.', '     * @param session Session to be deleted.', '     */', '    public void deleteForeignSession(ForeignSession session) {', '        if (mIsDestroyed) return;', '        mForeignSessionHelper.deleteForeignSession(session);', '    }', '', '    /**', '     * Clears the list of recently closed tabs.', '     */', '    public void clearRecentlyClosedTabs() {', '        if (mIsDestroyed) return;', '        mRecentlyClosedTabManager.clearRecentlyClosedTabs();', '    }', '', '    /**', '     * Collapse the promo.', '     *', '     * @param isCollapsed Whether the promo is collapsed.', '     */', '    public void setPromoCollapsed(boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setSyncPromoCollapsed(isCollapsed);', '    }', '', '    /**', '     * Determine whether the promo is collapsed.', '     *', '     * @return Whether the promo is collapsed.', '     */', '    public boolean isPromoCollapsed() {', '        return mPrefs.getSyncPromoCollapsed();', '    }', '', '    /** Returns the current promo state. */', '    @PromoState', '    int getPromoState() {', '        return mPromoState;', '    }', '', '    private @PromoState int calculatePromoState() {', '        if (!mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SYNC)) {', '            if (!mSignInManager.isSignInAllowed()) {', '                return PromoState.PROMO_NONE;', '            }', '            if (mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '                return PromoState.PROMO_SYNC_PERSONALIZED;', '            }', '            return PromoState.PROMO_SIGNIN_PERSONALIZED;', '        }', '', '        if (mSyncService == null) {', '            // |mSyncService| will remain null until the next browser startup, so no sense in', '            // offering any promo.', '            return PromoState.PROMO_NONE;', '        }', '']}, {'a': ['        if (mSyncService.isSyncRequested() && !mForeignSessions.isEmpty()) {'], 'b': ['        if (mSyncService.isSyncRequested() && mForeignSessions != null', '                && !mForeignSessions.isEmpty()) {']}, {'ab': ['            return PromoState.PROMO_NONE;', '        }', '        return PromoState.PROMO_SYNC;', '    }', '', '    private void updatePromoState() {', '        final @PromoState int newState = calculatePromoState();', '        if (newState == mPromoState) return;', '', '        final boolean hasSyncPromoStateChangedtoShown =', '                (mPromoState == PromoState.PROMO_NONE || mPromoState == PromoState.PROMO_SYNC)', '                && (newState == PromoState.PROMO_SIGNIN_PERSONALIZED', '                        || newState == PromoState.PROMO_SYNC_PERSONALIZED);', '        if (hasSyncPromoStateChangedtoShown) {', '            mSigninPromoController.increasePromoShowCount();', '        }', '        mPromoState = newState;', '    }', '', '    /**', '     * Sets up the sync promo view.', '     */', '    void setUpSyncPromoView(PersonalizedSigninPromoView view) {', '        mSigninPromoController.setUpSyncPromoView(mProfileDataCache, view, null);', '    }', '', '    // SignInStateObserver implementation.', '    @Override', '    public void onSignedIn() {', '        update();', '    }', '', '    @Override', '    public void onSignedOut() {', '        update();', '    }', '', '    // AccountsChangeObserver implementation.', '    @Override', '    public void onAccountsChanged() {', '        update();', '    }', '', '    // ProfileDataCache.Observer implementation.', '    @Override', '    public void onProfileDataUpdated(String accountEmail) {', '        update();', '    }', '', '    // SyncService.SyncStateChangedListener implementation.', '    @Override', '    public void syncStateChanged() {', '        update();', '    }', '', '    private void postUpdate() {', '        if (mUpdatedCallback != null) {', '            mUpdatedCallback.onUpdated();', '        }', '    }', '', '    private void update() {', '        updatePromoState();', ""        // TODO(crbug.com/1129853): Re-evaluate whether it's necessary to post"", '        // a task.', '        PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT, () -> {', '            if (mIsDestroyed) return;', '            updateForeignSessions();', '            postUpdate();', '        });', '    }', '', '    @VisibleForTesting', '    public static void setRecentlyClosedTabManagerForTests(RecentlyClosedTabManager manager) {', '        sRecentlyClosedTabManagerForTests = manager;', '    }', '}', '']}]",chromium%2Fsrc~main~I8c1ec9d2b63189464793281e35f2f5b6a8aa3243,22e946dadefb9c777a072553c1c6f831d2382e2d,chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java,dc75234d_557459ea_before.java,dc75234d_557459ea_after.java,RecentTabsManager::calculatePromoState,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 . Collections ; import VAR_31 . List ; public class VAR_32 implements VAR_33 , VAR_34 , VAR_35 , VAR_36 { interface VAR_37 { void VAR_38 ( ) ; } VAR_39 , VAR_40 } ) int VAR_41 = 0 ; int VAR_42 = 1 ; int VAR_43 = 2 ; int VAR_44 = 3 ; } private static final int VAR_45 = 5 ; private static VAR_46 VAR_47 ; private final VAR_48 VAR_49 ; private final VAR_50 VAR_51 ; private final VAR_52 VAR_53 ; private private VAR_54 VAR_55 ; private VAR_56 VAR_57 ; private List < VAR_58 > VAR_59 ; private List < VAR_60 > VAR_61 ; private VAR_62 VAR_63 ; private VAR_46 VAR_64 ; private VAR_65 VAR_66 ; private VAR_37 VAR_67 ; private boolean VAR_68 ; private final VAR_69 VAR_70 ; private final VAR_71 VAR_72 ; private final VAR_73 VAR_74 ; public VAR_32 ( VAR_50 VAR_75 , VAR_48 VAR_76 , Context context , VAR_52 VAR_77 ) { VAR_49 = VAR_76 ; VAR_51 = VAR_75 ; VAR_53 = VAR_77 ; VAR_57 = new VAR_56 ( VAR_76 ) ; VAR_63 = new VAR_62 ( VAR_76 ) ; VAR_55 = new VAR_54 ( ) ; VAR_64 = VAR_47 != null ? VAR_47 : new VAR_78 ( VAR_76 ) ; VAR_66 = VAR_79 . get ( ) . VAR_80 ( VAR_49 ) ; VAR_70 = VAR_81 ( context ) ; VAR_72 = new VAR_71 ( VAR_82 , VAR_83 . get ( ) ) ; VAR_74 = VAR_73 . get ( ) ; VAR_84 ( ) ; VAR_85 ( ( ) - > { VAR_86 ( ) ; VAR_87 ( ) ; } ) ; VAR_86 ( ) ; VAR_88 ( ) ; VAR_89 ( ) ; VAR_90 ( ) ; VAR_91 ( ) ; VAR_92 . get ( VAR_49 ) . VAR_93 ( ) ; } public void VAR_94 ( ) { VAR_68 = true ; if ( VAR_74 != null ) { VAR_95 ( this ) ; } VAR_96 ( this ) ; VAR_66 = null ; VAR_97 ( this ) ; VAR_98 . getInstance ( ) . VAR_99 ( this ) ; VAR_100 ( ) ; VAR_55 = null ; VAR_101 ( ) ; VAR_64 = null ; VAR_67 = null ; VAR_102 ( ) ; VAR_63 = null ; VAR_92 . get ( VAR_49 ) . VAR_103 ( ) ; VAR_104 ( ) ; VAR_57 = null ; } private void VAR_88 ( ) { VAR_105 ( ( ) - > { VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } private void VAR_91 ( ) { if ( VAR_74 != null ) { VAR_106 ( this ) ; } VAR_107 ( this ) ; VAR_108 ( this ) ; VAR_98 . getInstance ( ) . VAR_109 ( this ) ; } private void VAR_86 ( ) { VAR_61 = VAR_110 ( VAR_45 ) ; } private void VAR_89 ( ) { VAR_59 = VAR_111 ( ) ; if ( VAR_59 == null ) { VAR_59 = VAR_112 ( ) ; } } public List < VAR_58 > VAR_113 ( ) { return VAR_59 ; } public List < VAR_60 > VAR_114 ( ) { return VAR_61 ; } public void VAR_115 ( VAR_58 session , VAR_116 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_1 ) ; VAR_119 ( VAR_51 , session , VAR_75 , VAR_117 ) ; } public void VAR_120 ( VAR_60 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_2 ) ; VAR_121 ( VAR_51 , VAR_75 , VAR_117 ) ; } public void VAR_122 ( ) { if ( VAR_68 ) return ; VAR_53 . run ( ) ; } public VAR_50 VAR_123 ( ) { return VAR_51 ; } public boolean VAR_124 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_128 ( VAR_49 , url , size , VAR_127 ) ; } public boolean VAR_129 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_130 ( VAR_49 , url , size , VAR_127 ) ; } public void VAR_131 ( VAR_37 VAR_132 ) { VAR_67 = VAR_132 ; } public void VAR_133 ( VAR_58 session , boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_135 ( session , VAR_134 ) ; } public boolean VAR_136 ( VAR_58 session ) { return VAR_137 ( session ) ; } public void VAR_138 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_139 ( VAR_134 ) ; } public boolean VAR_140 ( ) { return VAR_141 ( ) ; } public void VAR_142 ( VAR_58 session ) { if ( VAR_68 ) return ; VAR_143 ( session ) ; } public void VAR_144 ( ) { if ( VAR_68 ) return ; VAR_145 ( ) ; } public void VAR_146 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_147 ( VAR_134 ) ; } public boolean VAR_148 ( ) { return VAR_149 ( ) ; } int VAR_150 ( ) { return VAR_151 ; } private if ( ! VAR_152 ( ) . VAR_153 ( VAR_154 ) ) { if ( ! VAR_155 ( ) ) { return VAR_156 ; } if ( VAR_152 ( ) . VAR_153 ( VAR_157 ) ) { return VAR_39 ; } return VAR_158 ; } if ( VAR_74 == null ) { return VAR_156 ; } return VAR_156 ; } return VAR_40 ; } private void VAR_84 ( ) { final if ( VAR_159 == VAR_151 ) return ; final boolean VAR_160 = ( VAR_151 == VAR_156 || VAR_151 == VAR_40 ) && ( VAR_159 == VAR_158 || VAR_159 == VAR_39 ) ; if ( VAR_160 ) { VAR_161 ( ) ; } VAR_151 = VAR_159 ; } void VAR_162 ( VAR_163 view ) { VAR_164 ( VAR_70 , view , null ) ; } public void VAR_165 ( ) { update ( ) ; } public void VAR_166 ( ) { update ( ) ; } public void VAR_167 ( ) { update ( ) ; } public void VAR_168 ( String VAR_169 ) { update ( ) ; } public void VAR_170 ( ) { update ( ) ; } private void VAR_87 ( ) { if ( VAR_67 != null ) { VAR_171 ( ) ; } } private void update ( ) { VAR_84 ( ) ; VAR_172 ( VAR_173 , ( ) - > { if ( VAR_68 ) return ; VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } public static void VAR_174 ( VAR_46 VAR_175 ) { VAR_47 = VAR_175 ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 . Collections ; import VAR_31 . List ; public class VAR_32 implements VAR_33 , VAR_34 , VAR_35 , VAR_36 { interface VAR_37 { void VAR_38 ( ) ; } VAR_39 , VAR_40 } ) int VAR_41 = 0 ; int VAR_42 = 1 ; int VAR_43 = 2 ; int VAR_44 = 3 ; } private static final int VAR_45 = 5 ; private static VAR_46 VAR_47 ; private final VAR_48 VAR_49 ; private final VAR_50 VAR_51 ; private final VAR_52 VAR_53 ; private private VAR_54 VAR_55 ; private VAR_56 VAR_57 ; private List < VAR_58 > VAR_59 ; private List < VAR_60 > VAR_61 ; private VAR_62 VAR_63 ; private VAR_46 VAR_64 ; private VAR_65 VAR_66 ; private VAR_37 VAR_67 ; private boolean VAR_68 ; private final VAR_69 VAR_70 ; private final VAR_71 VAR_72 ; private final VAR_73 VAR_74 ; public VAR_32 ( VAR_50 VAR_75 , VAR_48 VAR_76 , Context context , VAR_52 VAR_77 ) { VAR_49 = VAR_76 ; VAR_51 = VAR_75 ; VAR_53 = VAR_77 ; VAR_57 = new VAR_56 ( VAR_76 ) ; VAR_63 = new VAR_62 ( VAR_76 ) ; VAR_55 = new VAR_54 ( ) ; VAR_64 = VAR_47 != null ? VAR_47 : new VAR_78 ( VAR_76 ) ; VAR_66 = VAR_79 . get ( ) . VAR_80 ( VAR_49 ) ; VAR_70 = VAR_81 ( context ) ; VAR_72 = new VAR_71 ( VAR_82 , VAR_83 . get ( ) ) ; VAR_74 = VAR_73 . get ( ) ; VAR_85 ( ( ) - > { VAR_86 ( ) ; VAR_87 ( ) ; } ) ; VAR_86 ( ) ; VAR_88 ( ) ; VAR_89 ( ) ; VAR_90 ( ) ; VAR_91 ( ) ; VAR_84 ( ) ; VAR_92 . get ( VAR_49 ) . VAR_93 ( ) ; } public void VAR_94 ( ) { VAR_68 = true ; if ( VAR_74 != null ) { VAR_95 ( this ) ; } VAR_96 ( this ) ; VAR_66 = null ; VAR_97 ( this ) ; VAR_98 . getInstance ( ) . VAR_99 ( this ) ; VAR_100 ( ) ; VAR_55 = null ; VAR_101 ( ) ; VAR_64 = null ; VAR_67 = null ; VAR_102 ( ) ; VAR_63 = null ; VAR_92 . get ( VAR_49 ) . VAR_103 ( ) ; VAR_104 ( ) ; VAR_57 = null ; } private void VAR_88 ( ) { VAR_105 ( ( ) - > { VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } private void VAR_91 ( ) { if ( VAR_74 != null ) { VAR_106 ( this ) ; } VAR_107 ( this ) ; VAR_108 ( this ) ; VAR_98 . getInstance ( ) . VAR_109 ( this ) ; } private void VAR_86 ( ) { VAR_61 = VAR_110 ( VAR_45 ) ; } private void VAR_89 ( ) { VAR_59 = VAR_111 ( ) ; if ( VAR_59 == null ) { VAR_59 = VAR_112 ( ) ; } } public List < VAR_58 > VAR_113 ( ) { return VAR_59 ; } public List < VAR_60 > VAR_114 ( ) { return VAR_61 ; } public void VAR_115 ( VAR_58 session , VAR_116 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_1 ) ; VAR_119 ( VAR_51 , session , VAR_75 , VAR_117 ) ; } public void VAR_120 ( VAR_60 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_2 ) ; VAR_121 ( VAR_51 , VAR_75 , VAR_117 ) ; } public void VAR_122 ( ) { if ( VAR_68 ) return ; VAR_53 . run ( ) ; } public VAR_50 VAR_123 ( ) { return VAR_51 ; } public boolean VAR_124 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_128 ( VAR_49 , url , size , VAR_127 ) ; } public boolean VAR_129 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_130 ( VAR_49 , url , size , VAR_127 ) ; } public void VAR_131 ( VAR_37 VAR_132 ) { VAR_67 = VAR_132 ; } public void VAR_133 ( VAR_58 session , boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_135 ( session , VAR_134 ) ; } public boolean VAR_136 ( VAR_58 session ) { return VAR_137 ( session ) ; } public void VAR_138 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_139 ( VAR_134 ) ; } public boolean VAR_140 ( ) { return VAR_141 ( ) ; } public void VAR_142 ( VAR_58 session ) { if ( VAR_68 ) return ; VAR_143 ( session ) ; } public void VAR_144 ( ) { if ( VAR_68 ) return ; VAR_145 ( ) ; } public void VAR_146 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_147 ( VAR_134 ) ; } public boolean VAR_148 ( ) { return VAR_149 ( ) ; } int VAR_150 ( ) { return VAR_151 ; } private if ( ! VAR_152 ( ) . VAR_153 ( VAR_154 ) ) { if ( ! VAR_155 ( ) ) { return VAR_156 ; } if ( VAR_152 ( ) . VAR_153 ( VAR_157 ) ) { return VAR_39 ; } return VAR_158 ; } if ( VAR_74 == null ) { return VAR_156 ; } if ( VAR_176 ( ) && ! VAR_59 . isEmpty ( ) ) { return VAR_156 ; } return VAR_40 ; } private void VAR_84 ( ) { final if ( VAR_159 == VAR_151 ) return ; final boolean VAR_160 = ( VAR_151 == VAR_156 || VAR_151 == VAR_40 ) && ( VAR_159 == VAR_158 || VAR_159 == VAR_39 ) ; if ( VAR_160 ) { VAR_161 ( ) ; } VAR_151 = VAR_159 ; } void VAR_162 ( VAR_163 view ) { VAR_164 ( VAR_70 , view , null ) ; } public void VAR_165 ( ) { update ( ) ; } public void VAR_166 ( ) { update ( ) ; } public void VAR_167 ( ) { update ( ) ; } public void VAR_168 ( String VAR_169 ) { update ( ) ; } public void VAR_170 ( ) { update ( ) ; } private void VAR_87 ( ) { if ( VAR_67 != null ) { VAR_171 ( ) ; } } private void update ( ) { VAR_84 ( ) ; VAR_172 ( VAR_173 , ( ) - > { if ( VAR_68 ) return ; VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } public static void VAR_174 ( VAR_46 VAR_175 ) { VAR_47 = VAR_175 ; } }","Reading through the CL one more time - it looks like VAR_59 can be null ONLY before VAR_89 call in the ctor. In all other cases it is guaranteed to be non-null. With this in mind, does it make sense to move VAR_84 after VAR_89 call in ctor (and use assert in this method instead)?"
7,4889ba76_7b6f8367,391.0,Done,390.0,391.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ntp;', '', 'import android.content.Context;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.chrome.browser.invalidation.SessionsInvalidationManager;', 'import org.chromium.chrome.browser.ntp.ForeignSessionHelper.ForeignSession;', 'import org.chromium.chrome.browser.ntp.ForeignSessionHelper.ForeignSessionTab;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.services.SigninManager;', 'import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;', 'import org.chromium.chrome.browser.signin.ui.PersonalizedSigninPromoView;', 'import org.chromium.chrome.browser.signin.ui.SigninPromoController;', 'import org.chromium.chrome.browser.sync.SyncService;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.ui.favicon.FaviconHelper;', 'import org.chromium.chrome.browser.ui.favicon.FaviconHelper.FaviconImageCallback;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountsChangeObserver;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.url.GURL;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.Collections;', 'import java.util.List;', '', '/**', ' * Provides the domain logic and data for RecentTabsPage and RecentTabsRowAdapter.', ' */', 'public class RecentTabsManager implements SyncService.SyncStateChangedListener, SignInStateObserver,', '                                          ProfileDataCache.Observer, AccountsChangeObserver {', '    /**', '     * Implement this to receive updates when the page contents change.', '     */', '    interface UpdatedCallback {', '        /**', '         * Called when the list of recently closed tabs or foreign sessions changes.', '         */', '        void onUpdated();', '    }', '    @Retention(RetentionPolicy.SOURCE)', '    @IntDef({PromoState.PROMO_NONE, PromoState.PROMO_SIGNIN_PERSONALIZED,', '            PromoState.PROMO_SYNC_PERSONALIZED, PromoState.PROMO_SYNC})', '    @interface PromoState {', '        int PROMO_NONE = 0;', '        int PROMO_SIGNIN_PERSONALIZED = 1;', '        int PROMO_SYNC_PERSONALIZED = 2;', '        int PROMO_SYNC = 3;', '    }', '', '    private static final int RECENTLY_CLOSED_MAX_TAB_COUNT = 5;', '', '    private static RecentlyClosedTabManager sRecentlyClosedTabManagerForTests;', '', '    private final Profile mProfile;', '    private final Tab mTab;', '    private final Runnable mShowHistoryManager;', '', '    private @PromoState int mPromoState = PromoState.PROMO_NONE;', '    private FaviconHelper mFaviconHelper;', '    private ForeignSessionHelper mForeignSessionHelper;', '    private List<ForeignSession> mForeignSessions;', '    private List<RecentlyClosedTab> mRecentlyClosedTabs;', '    private RecentTabsPagePrefs mPrefs;', '    private RecentlyClosedTabManager mRecentlyClosedTabManager;', '    private SigninManager mSignInManager;', '    private UpdatedCallback mUpdatedCallback;', '    private boolean mIsDestroyed;', '', '    private final ProfileDataCache mProfileDataCache;', '    private final SigninPromoController mSigninPromoController;', '    @Nullable', '    private final SyncService mSyncService;', '', '    /**', '     * Create an RecentTabsManager to be used with RecentTabsPage and RecentTabsRowAdapter.', '     *', '     * @param tab The Tab that is showing this recent tabs page.', '     * @param profile Profile that is associated with the current session.', '     * @param context the Android context this manager will work in.', '     * @param showHistoryManager Runnable showing history manager UI.', '     */', '    public RecentTabsManager(', '            Tab tab, Profile profile, Context context, Runnable showHistoryManager) {', '        mProfile = profile;', '        mTab = tab;', '        mShowHistoryManager = showHistoryManager;', '        mForeignSessionHelper = new ForeignSessionHelper(profile);', '        mPrefs = new RecentTabsPagePrefs(profile);', '        mFaviconHelper = new FaviconHelper();', '        mRecentlyClosedTabManager = sRecentlyClosedTabManagerForTests != null', '                ? sRecentlyClosedTabManagerForTests', '                : new RecentlyClosedBridge(profile);', '        mSignInManager = IdentityServicesProvider.get().getSigninManager(mProfile);', '', '        mProfileDataCache = ProfileDataCache.createWithDefaultImageSizeAndNoBadge(context);', '        mSigninPromoController = new SigninPromoController(', '                SigninAccessPoint.RECENT_TABS, SyncConsentActivityLauncherImpl.get());', '        mSyncService = SyncService.get();']}, {'b': ['        updatePromoState();']}, {'ab': ['', '        mRecentlyClosedTabManager.setTabsUpdatedRunnable(() -> {', '            updateRecentlyClosedTabs();', '            postUpdate();', '        });', '', '        updateRecentlyClosedTabs();', '        registerForForeignSessionUpdates();', '        updateForeignSessions();', '        mForeignSessionHelper.triggerSessionSync();', '        registerObservers();']}, {'a': ['        updatePromoState();']}, {'ab': ['', '        SessionsInvalidationManager.get(mProfile).onRecentTabsPageOpened();', '    }', '', '    /**', '     * Should be called when this object is no longer needed. Performs necessary listener tear down.', '     */', '    public void destroy() {', '        mIsDestroyed = true;', '        if (mSyncService != null) {', '            mSyncService.removeSyncStateChangedListener(this);', '        }', '', '        mSignInManager.removeSignInStateObserver(this);', '        mSignInManager = null;', '', '        mProfileDataCache.removeObserver(this);', '        AccountManagerFacadeProvider.getInstance().removeObserver(this);', '', '        mFaviconHelper.destroy();', '        mFaviconHelper = null;', '', '        mRecentlyClosedTabManager.destroy();', '        mRecentlyClosedTabManager = null;', '', '', '        mUpdatedCallback = null;', '', '        mPrefs.destroy();', '        mPrefs = null;', '', '        SessionsInvalidationManager.get(mProfile).onRecentTabsPageClosed();', '', '        mForeignSessionHelper.destroy();', '        mForeignSessionHelper = null;', '    }', '', '    private void registerForForeignSessionUpdates() {', '        mForeignSessionHelper.setOnForeignSessionCallback(() -> {', '            updateForeignSessions();', '            postUpdate();', '        });', '    }', '', '    private void registerObservers() {', '        if (mSyncService != null) {', '            mSyncService.addSyncStateChangedListener(this);', '        }', '', '        mSignInManager.addSignInStateObserver(this);', '', '        mProfileDataCache.addObserver(this);', '        AccountManagerFacadeProvider.getInstance().addObserver(this);', '    }', '', '    private void updateRecentlyClosedTabs() {', '        mRecentlyClosedTabs =', '                mRecentlyClosedTabManager.getRecentlyClosedTabs(RECENTLY_CLOSED_MAX_TAB_COUNT);', '    }', '', '    private void updateForeignSessions() {', '        mForeignSessions = mForeignSessionHelper.getForeignSessions();', '        if (mForeignSessions == null) {', '            mForeignSessions = Collections.emptyList();', '        }', '    }', '', '    /**', '     * @return Most up-to-date list of foreign sessions.', '     */', '    public List<ForeignSession> getForeignSessions() {', '        return mForeignSessions;', '    }', '', '    /**', '     * @return Most up-to-date list of recently closed tabs.', '     */', '    public List<RecentlyClosedTab> getRecentlyClosedTabs() {', '        return mRecentlyClosedTabs;', '    }', '', '    /**', '     * Opens a new tab navigating to ForeignSessionTab.', '     *', '     * @param session The foreign session that the tab belongs to.', '     * @param tab The tab to open.', '     * @param windowDisposition The WindowOpenDisposition flag.', '     */', '    public void openForeignSessionTab(ForeignSession session, ForeignSessionTab tab,', '            int windowDisposition) {', '        if (mIsDestroyed) return;', '        RecordUserAction.record(""MobileRecentTabManagerTabFromOtherDeviceOpened"");', '        mForeignSessionHelper.openForeignSessionTab(mTab, session, tab, windowDisposition);', '    }', '', '    /**', '     * Restores a recently closed tab.', '     *', '     * @param tab The tab to open.', '     * @param windowDisposition The WindowOpenDisposition value specifying whether the tab should', '     *         be restored into the current tab or a new tab.', '     */', '    public void openRecentlyClosedTab(RecentlyClosedTab tab, int windowDisposition) {', '        if (mIsDestroyed) return;', '        RecordUserAction.record(""MobileRecentTabManagerRecentTabOpened"");', '        mRecentlyClosedTabManager.openRecentlyClosedTab(mTab, tab, windowDisposition);', '    }', '', '    /**', '     * Opens the history page.', '     */', '    public void openHistoryPage() {', '        if (mIsDestroyed) return;', '        mShowHistoryManager.run();', '    }', '', '    /**', '     * Return the managed tab.', '     * @return the tab instance being managed by this object.', '     */', '    public Tab activeTab() {', '        return mTab;', '    }', '', '    /**', '     * Returns a favicon for a given foreign url.', '     *', '     * @param url The url to fetch the favicon for.', '     * @param size the desired favicon size.', '     * @param faviconCallback the callback to be invoked when the favicon is available.', '     * @return favicon or null if favicon unavailable.', '     */', '    public boolean getForeignFaviconForUrl(', '            GURL url, int size, FaviconImageCallback faviconCallback) {', '        return mFaviconHelper.getForeignFaviconImageForURL(mProfile, url, size, faviconCallback);', '    }', '', '    /**', '     * Fetches a favicon for snapshot document url which is returned via callback.', '     *', '     * @param url The url to fetch a favicon for.', '     * @param size the desired favicon size.', '     * @param faviconCallback the callback to be invoked when the favicon is available.', '     *', '     * @return may return false if we could not fetch the favicon.', '     */', '    public boolean getLocalFaviconForUrl(GURL url, int size, FaviconImageCallback faviconCallback) {', '        return mFaviconHelper.getLocalFaviconImageForURL(mProfile, url, size, faviconCallback);', '    }', '', '    /**', '     * Sets a callback to be invoked when recently closed tabs or foreign sessions documents have', '     * been updated.', '     *', '     * @param updatedCallback the listener to be invoked.', '     */', '    public void setUpdatedCallback(UpdatedCallback updatedCallback) {', '        mUpdatedCallback = updatedCallback;', '    }', '', '    /**', '     * Sets the persistent expanded/collapsed state of a foreign session list.', '     *', '     * @param session foreign session to collapsed.', '     * @param isCollapsed Whether the session is collapsed or expanded.', '     */', '    public void setForeignSessionCollapsed(ForeignSession session, boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setForeignSessionCollapsed(session, isCollapsed);', '    }', '', '    /**', '     * Determine the expanded/collapsed state of a foreign session list.', '     *', '     * @param session foreign session whose state to obtain.', '     *', '     * @return Whether the session is collapsed.', '     */', '    public boolean getForeignSessionCollapsed(ForeignSession session) {', '        return mPrefs.getForeignSessionCollapsed(session);', '    }', '', '    /**', '     * Sets the persistent expanded/collapsed state of the recently closed tabs list.', '     *', '     * @param isCollapsed Whether the recently closed tabs list is collapsed.', '     */', '    public void setRecentlyClosedTabsCollapsed(boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setRecentlyClosedTabsCollapsed(isCollapsed);', '    }', '', '    /**', '     * Determine the expanded/collapsed state of the recently closed tabs list.', '     *', '     * @return Whether the recently closed tabs list is collapsed.', '     */', '    public boolean isRecentlyClosedTabsCollapsed() {', '        return mPrefs.getRecentlyClosedTabsCollapsed();', '    }', '', '    /**', '     * Remove Foreign session to display. Note that it might reappear during the next sync if the', '     * session is not orphaned.', '     *', '     * This is mainly for when user wants to delete an orphaned session.', '     * @param session Session to be deleted.', '     */', '    public void deleteForeignSession(ForeignSession session) {', '        if (mIsDestroyed) return;', '        mForeignSessionHelper.deleteForeignSession(session);', '    }', '', '    /**', '     * Clears the list of recently closed tabs.', '     */', '    public void clearRecentlyClosedTabs() {', '        if (mIsDestroyed) return;', '        mRecentlyClosedTabManager.clearRecentlyClosedTabs();', '    }', '', '    /**', '     * Collapse the promo.', '     *', '     * @param isCollapsed Whether the promo is collapsed.', '     */', '    public void setPromoCollapsed(boolean isCollapsed) {', '        if (mIsDestroyed) return;', '        mPrefs.setSyncPromoCollapsed(isCollapsed);', '    }', '', '    /**', '     * Determine whether the promo is collapsed.', '     *', '     * @return Whether the promo is collapsed.', '     */', '    public boolean isPromoCollapsed() {', '        return mPrefs.getSyncPromoCollapsed();', '    }', '', '    /** Returns the current promo state. */', '    @PromoState', '    int getPromoState() {', '        return mPromoState;', '    }', '', '    private @PromoState int calculatePromoState() {', '        if (!mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SYNC)) {', '            if (!mSignInManager.isSignInAllowed()) {', '                return PromoState.PROMO_NONE;', '            }', '            if (mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '                return PromoState.PROMO_SYNC_PERSONALIZED;', '            }', '            return PromoState.PROMO_SIGNIN_PERSONALIZED;', '        }', '', '        if (mSyncService == null) {', '            // |mSyncService| will remain null until the next browser startup, so no sense in', '            // offering any promo.', '            return PromoState.PROMO_NONE;', '        }', '']}, {'a': ['        if (mSyncService.isSyncRequested() && !mForeignSessions.isEmpty()) {'], 'b': ['        if (mSyncService.isSyncRequested() && mForeignSessions != null', '                && !mForeignSessions.isEmpty()) {']}, {'ab': ['            return PromoState.PROMO_NONE;', '        }', '        return PromoState.PROMO_SYNC;', '    }', '', '    private void updatePromoState() {', '        final @PromoState int newState = calculatePromoState();', '        if (newState == mPromoState) return;', '', '        final boolean hasSyncPromoStateChangedtoShown =', '                (mPromoState == PromoState.PROMO_NONE || mPromoState == PromoState.PROMO_SYNC)', '                && (newState == PromoState.PROMO_SIGNIN_PERSONALIZED', '                        || newState == PromoState.PROMO_SYNC_PERSONALIZED);', '        if (hasSyncPromoStateChangedtoShown) {', '            mSigninPromoController.increasePromoShowCount();', '        }', '        mPromoState = newState;', '    }', '', '    /**', '     * Sets up the sync promo view.', '     */', '    void setUpSyncPromoView(PersonalizedSigninPromoView view) {', '        mSigninPromoController.setUpSyncPromoView(mProfileDataCache, view, null);', '    }', '', '    // SignInStateObserver implementation.', '    @Override', '    public void onSignedIn() {', '        update();', '    }', '', '    @Override', '    public void onSignedOut() {', '        update();', '    }', '', '    // AccountsChangeObserver implementation.', '    @Override', '    public void onAccountsChanged() {', '        update();', '    }', '', '    // ProfileDataCache.Observer implementation.', '    @Override', '    public void onProfileDataUpdated(String accountEmail) {', '        update();', '    }', '', '    // SyncService.SyncStateChangedListener implementation.', '    @Override', '    public void syncStateChanged() {', '        update();', '    }', '', '    private void postUpdate() {', '        if (mUpdatedCallback != null) {', '            mUpdatedCallback.onUpdated();', '        }', '    }', '', '    private void update() {', '        updatePromoState();', ""        // TODO(crbug.com/1129853): Re-evaluate whether it's necessary to post"", '        // a task.', '        PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT, () -> {', '            if (mIsDestroyed) return;', '            updateForeignSessions();', '            postUpdate();', '        });', '    }', '', '    @VisibleForTesting', '    public static void setRecentlyClosedTabManagerForTests(RecentlyClosedTabManager manager) {', '        sRecentlyClosedTabManagerForTests = manager;', '    }', '}', '']}]",chromium%2Fsrc~main~I8c1ec9d2b63189464793281e35f2f5b6a8aa3243,22e946dadefb9c777a072553c1c6f831d2382e2d,chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java,4889ba76_7b6f8367_before.java,4889ba76_7b6f8367_after.java,RecentTabsManager::calculatePromoState,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 . Collections ; import VAR_31 . List ; public class VAR_32 implements VAR_33 , VAR_34 , VAR_35 , VAR_36 { interface VAR_37 { void VAR_38 ( ) ; } VAR_39 , VAR_40 } ) int VAR_41 = 0 ; int VAR_42 = 1 ; int VAR_43 = 2 ; int VAR_44 = 3 ; } private static final int VAR_45 = 5 ; private static VAR_46 VAR_47 ; private final VAR_48 VAR_49 ; private final VAR_50 VAR_51 ; private final VAR_52 VAR_53 ; private private VAR_54 VAR_55 ; private VAR_56 VAR_57 ; private List < VAR_58 > VAR_59 ; private List < VAR_60 > VAR_61 ; private VAR_62 VAR_63 ; private VAR_46 VAR_64 ; private VAR_65 VAR_66 ; private VAR_37 VAR_67 ; private boolean VAR_68 ; private final VAR_69 VAR_70 ; private final VAR_71 VAR_72 ; private final VAR_73 VAR_74 ; public VAR_32 ( VAR_50 VAR_75 , VAR_48 VAR_76 , Context context , VAR_52 VAR_77 ) { VAR_49 = VAR_76 ; VAR_51 = VAR_75 ; VAR_53 = VAR_77 ; VAR_57 = new VAR_56 ( VAR_76 ) ; VAR_63 = new VAR_62 ( VAR_76 ) ; VAR_55 = new VAR_54 ( ) ; VAR_64 = VAR_47 != null ? VAR_47 : new VAR_78 ( VAR_76 ) ; VAR_66 = VAR_79 . get ( ) . VAR_80 ( VAR_49 ) ; VAR_70 = VAR_81 ( context ) ; VAR_72 = new VAR_71 ( VAR_82 , VAR_83 . get ( ) ) ; VAR_74 = VAR_73 . get ( ) ; VAR_84 ( ) ; VAR_85 ( ( ) - > { VAR_86 ( ) ; VAR_87 ( ) ; } ) ; VAR_86 ( ) ; VAR_88 ( ) ; VAR_89 ( ) ; VAR_90 ( ) ; VAR_91 ( ) ; VAR_92 . get ( VAR_49 ) . VAR_93 ( ) ; } public void VAR_94 ( ) { VAR_68 = true ; if ( VAR_74 != null ) { VAR_95 ( this ) ; } VAR_96 ( this ) ; VAR_66 = null ; VAR_97 ( this ) ; VAR_98 . getInstance ( ) . VAR_99 ( this ) ; VAR_100 ( ) ; VAR_55 = null ; VAR_101 ( ) ; VAR_64 = null ; VAR_67 = null ; VAR_102 ( ) ; VAR_63 = null ; VAR_92 . get ( VAR_49 ) . VAR_103 ( ) ; VAR_104 ( ) ; VAR_57 = null ; } private void VAR_88 ( ) { VAR_105 ( ( ) - > { VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } private void VAR_91 ( ) { if ( VAR_74 != null ) { VAR_106 ( this ) ; } VAR_107 ( this ) ; VAR_108 ( this ) ; VAR_98 . getInstance ( ) . VAR_109 ( this ) ; } private void VAR_86 ( ) { VAR_61 = VAR_110 ( VAR_45 ) ; } private void VAR_89 ( ) { VAR_59 = VAR_111 ( ) ; if ( VAR_59 == null ) { VAR_59 = VAR_112 ( ) ; } } public List < VAR_58 > VAR_113 ( ) { return VAR_59 ; } public List < VAR_60 > VAR_114 ( ) { return VAR_61 ; } public void VAR_115 ( VAR_58 session , VAR_116 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_1 ) ; VAR_119 ( VAR_51 , session , VAR_75 , VAR_117 ) ; } public void VAR_120 ( VAR_60 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_2 ) ; VAR_121 ( VAR_51 , VAR_75 , VAR_117 ) ; } public void VAR_122 ( ) { if ( VAR_68 ) return ; VAR_53 . run ( ) ; } public VAR_50 VAR_123 ( ) { return VAR_51 ; } public boolean VAR_124 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_128 ( VAR_49 , url , size , VAR_127 ) ; } public boolean VAR_129 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_130 ( VAR_49 , url , size , VAR_127 ) ; } public void VAR_131 ( VAR_37 VAR_132 ) { VAR_67 = VAR_132 ; } public void VAR_133 ( VAR_58 session , boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_135 ( session , VAR_134 ) ; } public boolean VAR_136 ( VAR_58 session ) { return VAR_137 ( session ) ; } public void VAR_138 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_139 ( VAR_134 ) ; } public boolean VAR_140 ( ) { return VAR_141 ( ) ; } public void VAR_142 ( VAR_58 session ) { if ( VAR_68 ) return ; VAR_143 ( session ) ; } public void VAR_144 ( ) { if ( VAR_68 ) return ; VAR_145 ( ) ; } public void VAR_146 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_147 ( VAR_134 ) ; } public boolean VAR_148 ( ) { return VAR_149 ( ) ; } int VAR_150 ( ) { return VAR_151 ; } private if ( ! VAR_152 ( ) . VAR_153 ( VAR_154 ) ) { if ( ! VAR_155 ( ) ) { return VAR_156 ; } if ( VAR_152 ( ) . VAR_153 ( VAR_157 ) ) { return VAR_39 ; } return VAR_158 ; } if ( VAR_74 == null ) { return VAR_156 ; } return VAR_156 ; } return VAR_40 ; } private void VAR_84 ( ) { final if ( VAR_159 == VAR_151 ) return ; final boolean VAR_160 = ( VAR_151 == VAR_156 || VAR_151 == VAR_40 ) && ( VAR_159 == VAR_158 || VAR_159 == VAR_39 ) ; if ( VAR_160 ) { VAR_161 ( ) ; } VAR_151 = VAR_159 ; } void VAR_162 ( VAR_163 view ) { VAR_164 ( VAR_70 , view , null ) ; } public void VAR_165 ( ) { update ( ) ; } public void VAR_166 ( ) { update ( ) ; } public void VAR_167 ( ) { update ( ) ; } public void VAR_168 ( String VAR_169 ) { update ( ) ; } public void VAR_170 ( ) { update ( ) ; } private void VAR_87 ( ) { if ( VAR_67 != null ) { VAR_171 ( ) ; } } private void update ( ) { VAR_84 ( ) ; VAR_172 ( VAR_173 , ( ) - > { if ( VAR_68 ) return ; VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } public static void VAR_174 ( VAR_46 VAR_175 ) { VAR_47 = VAR_175 ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 . Collections ; import VAR_31 . List ; public class VAR_32 implements VAR_33 , VAR_34 , VAR_35 , VAR_36 { interface VAR_37 { void VAR_38 ( ) ; } VAR_39 , VAR_40 } ) int VAR_41 = 0 ; int VAR_42 = 1 ; int VAR_43 = 2 ; int VAR_44 = 3 ; } private static final int VAR_45 = 5 ; private static VAR_46 VAR_47 ; private final VAR_48 VAR_49 ; private final VAR_50 VAR_51 ; private final VAR_52 VAR_53 ; private private VAR_54 VAR_55 ; private VAR_56 VAR_57 ; private List < VAR_58 > VAR_59 ; private List < VAR_60 > VAR_61 ; private VAR_62 VAR_63 ; private VAR_46 VAR_64 ; private VAR_65 VAR_66 ; private VAR_37 VAR_67 ; private boolean VAR_68 ; private final VAR_69 VAR_70 ; private final VAR_71 VAR_72 ; private final VAR_73 VAR_74 ; public VAR_32 ( VAR_50 VAR_75 , VAR_48 VAR_76 , Context context , VAR_52 VAR_77 ) { VAR_49 = VAR_76 ; VAR_51 = VAR_75 ; VAR_53 = VAR_77 ; VAR_57 = new VAR_56 ( VAR_76 ) ; VAR_63 = new VAR_62 ( VAR_76 ) ; VAR_55 = new VAR_54 ( ) ; VAR_64 = VAR_47 != null ? VAR_47 : new VAR_78 ( VAR_76 ) ; VAR_66 = VAR_79 . get ( ) . VAR_80 ( VAR_49 ) ; VAR_70 = VAR_81 ( context ) ; VAR_72 = new VAR_71 ( VAR_82 , VAR_83 . get ( ) ) ; VAR_74 = VAR_73 . get ( ) ; VAR_85 ( ( ) - > { VAR_86 ( ) ; VAR_87 ( ) ; } ) ; VAR_86 ( ) ; VAR_88 ( ) ; VAR_89 ( ) ; VAR_90 ( ) ; VAR_91 ( ) ; VAR_84 ( ) ; VAR_92 . get ( VAR_49 ) . VAR_93 ( ) ; } public void VAR_94 ( ) { VAR_68 = true ; if ( VAR_74 != null ) { VAR_95 ( this ) ; } VAR_96 ( this ) ; VAR_66 = null ; VAR_97 ( this ) ; VAR_98 . getInstance ( ) . VAR_99 ( this ) ; VAR_100 ( ) ; VAR_55 = null ; VAR_101 ( ) ; VAR_64 = null ; VAR_67 = null ; VAR_102 ( ) ; VAR_63 = null ; VAR_92 . get ( VAR_49 ) . VAR_103 ( ) ; VAR_104 ( ) ; VAR_57 = null ; } private void VAR_88 ( ) { VAR_105 ( ( ) - > { VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } private void VAR_91 ( ) { if ( VAR_74 != null ) { VAR_106 ( this ) ; } VAR_107 ( this ) ; VAR_108 ( this ) ; VAR_98 . getInstance ( ) . VAR_109 ( this ) ; } private void VAR_86 ( ) { VAR_61 = VAR_110 ( VAR_45 ) ; } private void VAR_89 ( ) { VAR_59 = VAR_111 ( ) ; if ( VAR_59 == null ) { VAR_59 = VAR_112 ( ) ; } } public List < VAR_58 > VAR_113 ( ) { return VAR_59 ; } public List < VAR_60 > VAR_114 ( ) { return VAR_61 ; } public void VAR_115 ( VAR_58 session , VAR_116 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_1 ) ; VAR_119 ( VAR_51 , session , VAR_75 , VAR_117 ) ; } public void VAR_120 ( VAR_60 VAR_75 , int VAR_117 ) { if ( VAR_68 ) return ; VAR_118 . record ( STRING_2 ) ; VAR_121 ( VAR_51 , VAR_75 , VAR_117 ) ; } public void VAR_122 ( ) { if ( VAR_68 ) return ; VAR_53 . run ( ) ; } public VAR_50 VAR_123 ( ) { return VAR_51 ; } public boolean VAR_124 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_128 ( VAR_49 , url , size , VAR_127 ) ; } public boolean VAR_129 ( VAR_125 url , int size , VAR_126 VAR_127 ) { return VAR_130 ( VAR_49 , url , size , VAR_127 ) ; } public void VAR_131 ( VAR_37 VAR_132 ) { VAR_67 = VAR_132 ; } public void VAR_133 ( VAR_58 session , boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_135 ( session , VAR_134 ) ; } public boolean VAR_136 ( VAR_58 session ) { return VAR_137 ( session ) ; } public void VAR_138 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_139 ( VAR_134 ) ; } public boolean VAR_140 ( ) { return VAR_141 ( ) ; } public void VAR_142 ( VAR_58 session ) { if ( VAR_68 ) return ; VAR_143 ( session ) ; } public void VAR_144 ( ) { if ( VAR_68 ) return ; VAR_145 ( ) ; } public void VAR_146 ( boolean VAR_134 ) { if ( VAR_68 ) return ; VAR_147 ( VAR_134 ) ; } public boolean VAR_148 ( ) { return VAR_149 ( ) ; } int VAR_150 ( ) { return VAR_151 ; } private if ( ! VAR_152 ( ) . VAR_153 ( VAR_154 ) ) { if ( ! VAR_155 ( ) ) { return VAR_156 ; } if ( VAR_152 ( ) . VAR_153 ( VAR_157 ) ) { return VAR_39 ; } return VAR_158 ; } if ( VAR_74 == null ) { return VAR_156 ; } if ( VAR_176 ( ) && ! VAR_59 . isEmpty ( ) ) { return VAR_156 ; } return VAR_40 ; } private void VAR_84 ( ) { final if ( VAR_159 == VAR_151 ) return ; final boolean VAR_160 = ( VAR_151 == VAR_156 || VAR_151 == VAR_40 ) && ( VAR_159 == VAR_158 || VAR_159 == VAR_39 ) ; if ( VAR_160 ) { VAR_161 ( ) ; } VAR_151 = VAR_159 ; } void VAR_162 ( VAR_163 view ) { VAR_164 ( VAR_70 , view , null ) ; } public void VAR_165 ( ) { update ( ) ; } public void VAR_166 ( ) { update ( ) ; } public void VAR_167 ( ) { update ( ) ; } public void VAR_168 ( String VAR_169 ) { update ( ) ; } public void VAR_170 ( ) { update ( ) ; } private void VAR_87 ( ) { if ( VAR_67 != null ) { VAR_171 ( ) ; } } private void update ( ) { VAR_84 ( ) ; VAR_172 ( VAR_173 , ( ) - > { if ( VAR_68 ) return ; VAR_89 ( ) ; VAR_87 ( ) ; } ) ; } public static void VAR_174 ( VAR_46 VAR_175 ) { VAR_47 = VAR_175 ; } }",Done
14,6395c650_38152d5e,305.0,"Can you just reuse this field for mPromoShownAfterImpressionsHistogramName, somehow I think mImpressionCountName is easier to read and understand for its brevity.",305.0,305.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";']}, {'b': ['    private static final String RECENT_TABS = ""RecentTabs"";']}, {'ab': ['    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;']}, {'a': ['    private final String mImpressionCountHistogramName;', '    private final String mContinuedAfterImpressionsHistogramName;', '    private final String mDismissedAfterImpressionsHistogramName;'], 'b': ['    private final String mPromoShownAfterImpressionsHistogramName;', '    private final String mSigninCompletedAfterImpressionsHistogramName;', '    private final String mPromoDismissedAfterImpressionsHistogramName;']}, {'ab': ['    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;']}, {'a': ['    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.']}, {'ab': ['    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName = null;'], 'b': ['                mPromoDismissedAfterImpressionsHistogramName = null;']}, {'ab': ['                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                RecordHistogram.recordExactLinearHistogram(mDismissedAfterImpressionsHistogramName,'], 'b': ['                RecordHistogram.recordExactLinearHistogram(', '                        mPromoDismissedAfterImpressionsHistogramName,']}, {'ab': ['                        SharedPreferencesManager.getInstance().readInt(', '                                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                        MAX_TOTAL_PROMO_SHOW_COUNT);', '                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '']}, {'a': ['    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {'], 'b': ['    /** Increments promo show count by one and records histogram. */', '    public void incrementAndRecordPromoShowCount() {']}, {'ab': ['        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }']}, {'a': ['        SharedPreferencesManager.getInstance().incrementInt('], 'b': ['        int totalPromoShowCount = SharedPreferencesManager.getInstance().incrementInt(']}, {'ab': ['                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);']}, {'a': ['        recordImpressionCountHistogram(mImpressionCountHistogramName);'], 'b': ['        RecordHistogram.recordExactLinearHistogram(mPromoShownAfterImpressionsHistogramName,', '                totalPromoShowCount, MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mContinuedAfterImpressionsHistogramName);'], 'b': ['        RecordHistogram.recordExactLinearHistogram(mSigninCompletedAfterImpressionsHistogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '']}, {'a': ['    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '']}, {'ab': ['    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,97363eb0c10c319576ce1a603edacd13f5a76464,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,6395c650_38152d5e_before.java,6395c650_38152d5e_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private static final String VAR_41 = STRING_4 ; private private private final private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_5 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_6 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_41 ) ; default : throw new IllegalArgumentException ( STRING_5 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : STRING_7 ; STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : STRING_18 ; STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : STRING_8 ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : STRING_33 ; STRING_34 ; VAR_113 = VAR_128 ; VAR_42 = STRING_35 ; VAR_43 = STRING_36 ; VAR_45 = STRING_37 ; VAR_46 = STRING_38 ; VAR_47 = STRING_39 ; VAR_44 = STRING_40 ; VAR_115 = VAR_97 ; VAR_116 = STRING_41 ; VAR_117 = STRING_42 ; VAR_118 = STRING_43 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_5 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_44 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; VAR_160 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_159 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_164 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_164 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_166 ( ) . VAR_167 ( VAR_168 ) ; VAR_169 ( context , view , VAR_170 ) ; VAR_171 ( ) . setText ( VAR_121 ) ; VAR_172 ( ) . setText ( VAR_173 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_174 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_176 VAR_177 = VAR_178 ( ) ; VAR_166 ( ) . VAR_179 ( VAR_177 ) ; VAR_169 ( context , view , VAR_180 ) ; VAR_171 ( ) . setText ( VAR_119 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_181 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_182 ( VAR_107 ) ) { VAR_172 ( ) . setText ( VAR_173 ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } else { final String VAR_183 = VAR_87 ( VAR_184 ) ? context . getString ( VAR_185 , VAR_186 ( ) ) : context . getString ( VAR_173 ) ; VAR_172 ( ) . setText ( VAR_183 ) ; VAR_175 ( ) . setText ( VAR_187 ) ; VAR_175 ( ) . VAR_156 ( v - > VAR_188 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_174 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_47 ) ; VAR_191 ( context , VAR_111 ) ; } private void VAR_181 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_45 ) ; VAR_192 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_188 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_46 ) ; VAR_194 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_189 ( ) { VAR_51 = true ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_169 ( Context context , VAR_134 view , VAR_195 VAR_196 = VAR_166 ( ) . VAR_197 ( ) ; VAR_198 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_202 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_166 ( ) . VAR_203 ( VAR_196 ) ; } private void VAR_147 ( ) { VAR_190 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_190 . record ( VAR_44 ) ; } else { VAR_190 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_204 ( boolean VAR_205 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_205 ) ; } public static int VAR_206 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_41 = STRING_4 ; private private private final private final String VAR_207 ; private final String VAR_208 ; private final String VAR_209 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_5 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_6 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_41 ) ; default : throw new IllegalArgumentException ( STRING_5 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_207 = STRING_45 ; VAR_208 = STRING_7 ; VAR_209 = STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_207 = STRING_46 ; VAR_208 = STRING_18 ; VAR_209 = STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_207 = STRING_45 ; VAR_208 = STRING_8 ; VAR_209 = null ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_207 = STRING_47 ; VAR_208 = STRING_33 ; VAR_209 = STRING_34 ; VAR_113 = VAR_128 ; VAR_42 = STRING_35 ; VAR_43 = STRING_36 ; VAR_45 = STRING_37 ; VAR_46 = STRING_38 ; VAR_47 = STRING_39 ; VAR_44 = STRING_40 ; VAR_115 = VAR_97 ; VAR_116 = STRING_41 ; VAR_117 = STRING_42 ; VAR_118 = STRING_43 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_5 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_44 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_210 ( VAR_209 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; VAR_160 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_211 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_159 ) ; VAR_212 ( VAR_207 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_164 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_164 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_166 ( ) . VAR_167 ( VAR_168 ) ; VAR_169 ( context , view , VAR_170 ) ; VAR_171 ( ) . setText ( VAR_121 ) ; VAR_172 ( ) . setText ( VAR_173 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_174 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_176 VAR_177 = VAR_178 ( ) ; VAR_166 ( ) . VAR_179 ( VAR_177 ) ; VAR_169 ( context , view , VAR_180 ) ; VAR_171 ( ) . setText ( VAR_119 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_181 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_182 ( VAR_107 ) ) { VAR_172 ( ) . setText ( VAR_173 ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } else { final String VAR_183 = VAR_87 ( VAR_184 ) ? context . getString ( VAR_185 , VAR_186 ( ) ) : context . getString ( VAR_173 ) ; VAR_172 ( ) . setText ( VAR_183 ) ; VAR_175 ( ) . setText ( VAR_187 ) ; VAR_175 ( ) . VAR_156 ( v - > VAR_188 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_174 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_47 ) ; VAR_191 ( context , VAR_111 ) ; } private void VAR_181 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_45 ) ; VAR_192 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_188 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_46 ) ; VAR_194 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_189 ( ) { VAR_51 = true ; VAR_212 ( VAR_208 ) ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_212 ( String VAR_213 ) { VAR_210 ( VAR_213 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; } private void VAR_169 ( Context context , VAR_134 view , VAR_195 VAR_196 = VAR_166 ( ) . VAR_197 ( ) ; VAR_198 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_202 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_166 ( ) . VAR_203 ( VAR_196 ) ; } private void VAR_147 ( ) { VAR_190 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_190 . record ( VAR_44 ) ; } else { VAR_190 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_204 ( boolean VAR_205 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_205 ) ; } public static int VAR_206 ( ) { return VAR_36 ; } }","Can you just reuse this field fVAR_94 mPromoShownAfterImpressionsHistogramName, somehow I think VAR_113 is easier to read and understand fVAR_94 its brevity."
15,3ab64ce2_e0a82ea8,305.0,I have renamed it to mImpressionCountHistogramName,305.0,305.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";']}, {'b': ['    private static final String RECENT_TABS = ""RecentTabs"";']}, {'ab': ['    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;']}, {'a': ['    private final String mImpressionCountHistogramName;', '    private final String mContinuedAfterImpressionsHistogramName;', '    private final String mDismissedAfterImpressionsHistogramName;'], 'b': ['    private final String mPromoShownAfterImpressionsHistogramName;', '    private final String mSigninCompletedAfterImpressionsHistogramName;', '    private final String mPromoDismissedAfterImpressionsHistogramName;']}, {'ab': ['    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;']}, {'a': ['    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.']}, {'ab': ['    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName = null;'], 'b': ['                mPromoDismissedAfterImpressionsHistogramName = null;']}, {'ab': ['                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:']}, {'a': ['                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";', '                mContinuedAfterImpressionsHistogramName ='], 'b': ['                mPromoShownAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.ShownAfterImpressions"";', '                mSigninCompletedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.CompletedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionsHistogramName ='], 'b': ['                mPromoDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                RecordHistogram.recordExactLinearHistogram(mDismissedAfterImpressionsHistogramName,'], 'b': ['                RecordHistogram.recordExactLinearHistogram(', '                        mPromoDismissedAfterImpressionsHistogramName,']}, {'ab': ['                        SharedPreferencesManager.getInstance().readInt(', '                                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                        MAX_TOTAL_PROMO_SHOW_COUNT);', '                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '']}, {'a': ['    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {'], 'b': ['    /** Increments promo show count by one and records histogram. */', '    public void incrementAndRecordPromoShowCount() {']}, {'ab': ['        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }']}, {'a': ['        SharedPreferencesManager.getInstance().incrementInt('], 'b': ['        int totalPromoShowCount = SharedPreferencesManager.getInstance().incrementInt(']}, {'ab': ['                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);']}, {'a': ['        recordImpressionCountHistogram(mImpressionCountHistogramName);'], 'b': ['        RecordHistogram.recordExactLinearHistogram(mPromoShownAfterImpressionsHistogramName,', '                totalPromoShowCount, MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mContinuedAfterImpressionsHistogramName);'], 'b': ['        RecordHistogram.recordExactLinearHistogram(mSigninCompletedAfterImpressionsHistogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '']}, {'a': ['    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '']}, {'ab': ['    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,97363eb0c10c319576ce1a603edacd13f5a76464,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,3ab64ce2_e0a82ea8_before.java,3ab64ce2_e0a82ea8_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private static final String VAR_41 = STRING_4 ; private private private final private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_5 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_6 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_41 ) ; default : throw new IllegalArgumentException ( STRING_5 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : STRING_7 ; STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : STRING_18 ; STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : STRING_8 ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : STRING_33 ; STRING_34 ; VAR_113 = VAR_128 ; VAR_42 = STRING_35 ; VAR_43 = STRING_36 ; VAR_45 = STRING_37 ; VAR_46 = STRING_38 ; VAR_47 = STRING_39 ; VAR_44 = STRING_40 ; VAR_115 = VAR_97 ; VAR_116 = STRING_41 ; VAR_117 = STRING_42 ; VAR_118 = STRING_43 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_5 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_44 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; VAR_160 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_159 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_164 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_164 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_166 ( ) . VAR_167 ( VAR_168 ) ; VAR_169 ( context , view , VAR_170 ) ; VAR_171 ( ) . setText ( VAR_121 ) ; VAR_172 ( ) . setText ( VAR_173 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_174 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_176 VAR_177 = VAR_178 ( ) ; VAR_166 ( ) . VAR_179 ( VAR_177 ) ; VAR_169 ( context , view , VAR_180 ) ; VAR_171 ( ) . setText ( VAR_119 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_181 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_182 ( VAR_107 ) ) { VAR_172 ( ) . setText ( VAR_173 ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } else { final String VAR_183 = VAR_87 ( VAR_184 ) ? context . getString ( VAR_185 , VAR_186 ( ) ) : context . getString ( VAR_173 ) ; VAR_172 ( ) . setText ( VAR_183 ) ; VAR_175 ( ) . setText ( VAR_187 ) ; VAR_175 ( ) . VAR_156 ( v - > VAR_188 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_174 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_47 ) ; VAR_191 ( context , VAR_111 ) ; } private void VAR_181 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_45 ) ; VAR_192 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_188 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_46 ) ; VAR_194 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_189 ( ) { VAR_51 = true ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_169 ( Context context , VAR_134 view , VAR_195 VAR_196 = VAR_166 ( ) . VAR_197 ( ) ; VAR_198 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_202 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_166 ( ) . VAR_203 ( VAR_196 ) ; } private void VAR_147 ( ) { VAR_190 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_190 . record ( VAR_44 ) ; } else { VAR_190 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_204 ( boolean VAR_205 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_205 ) ; } public static int VAR_206 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_41 = STRING_4 ; private private private final private final String VAR_207 ; private final String VAR_208 ; private final String VAR_209 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_5 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_6 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_41 ) ; default : throw new IllegalArgumentException ( STRING_5 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_207 = STRING_45 ; VAR_208 = STRING_7 ; VAR_209 = STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_207 = STRING_46 ; VAR_208 = STRING_18 ; VAR_209 = STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_207 = STRING_45 ; VAR_208 = STRING_8 ; VAR_209 = null ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_207 = STRING_47 ; VAR_208 = STRING_33 ; VAR_209 = STRING_34 ; VAR_113 = VAR_128 ; VAR_42 = STRING_35 ; VAR_43 = STRING_36 ; VAR_45 = STRING_37 ; VAR_46 = STRING_38 ; VAR_47 = STRING_39 ; VAR_44 = STRING_40 ; VAR_115 = VAR_97 ; VAR_116 = STRING_41 ; VAR_117 = STRING_42 ; VAR_118 = STRING_43 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_5 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_44 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_210 ( VAR_209 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; VAR_160 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_211 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_159 ) ; VAR_212 ( VAR_207 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_164 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_164 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_166 ( ) . VAR_167 ( VAR_168 ) ; VAR_169 ( context , view , VAR_170 ) ; VAR_171 ( ) . setText ( VAR_121 ) ; VAR_172 ( ) . setText ( VAR_173 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_174 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_165 ( ) ; VAR_176 VAR_177 = VAR_178 ( ) ; VAR_166 ( ) . VAR_179 ( VAR_177 ) ; VAR_169 ( context , view , VAR_180 ) ; VAR_171 ( ) . setText ( VAR_119 ) ; VAR_172 ( ) . VAR_156 ( v - > VAR_181 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_182 ( VAR_107 ) ) { VAR_172 ( ) . setText ( VAR_173 ) ; VAR_175 ( ) . VAR_154 ( VAR_161 ) ; } else { final String VAR_183 = VAR_87 ( VAR_184 ) ? context . getString ( VAR_185 , VAR_186 ( ) ) : context . getString ( VAR_173 ) ; VAR_172 ( ) . setText ( VAR_183 ) ; VAR_175 ( ) . setText ( VAR_187 ) ; VAR_175 ( ) . VAR_156 ( v - > VAR_188 ( context ) ) ; VAR_175 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_174 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_47 ) ; VAR_191 ( context , VAR_111 ) ; } private void VAR_181 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_45 ) ; VAR_192 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_188 ( Context context ) { VAR_189 ( ) ; VAR_190 . record ( VAR_46 ) ; VAR_194 ( context , VAR_111 , VAR_193 ( ) ) ; } private void VAR_189 ( ) { VAR_51 = true ; VAR_212 ( VAR_208 ) ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_212 ( String VAR_213 ) { VAR_210 ( VAR_213 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_159 ) , VAR_35 ) ; } private void VAR_169 ( Context context , VAR_134 view , VAR_195 VAR_196 = VAR_166 ( ) . VAR_197 ( ) ; VAR_198 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_202 = VAR_199 ( ) . VAR_200 ( VAR_201 ) ; VAR_166 ( ) . VAR_203 ( VAR_196 ) ; } private void VAR_147 ( ) { VAR_190 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_190 . record ( VAR_44 ) ; } else { VAR_190 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_204 ( boolean VAR_205 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_205 ) ; } public static int VAR_206 ( ) { return VAR_36 ; } }",I have renamed it to VAR_INT_17
23,17fd13c1_5c295a5b,239.0,Should we also change the histogram name to Continued..?,239.0,239.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";', '    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;', '    private final String mImpressionCountHistogramName;']}, {'a': ['    private final String mSigninAfterImpressionsHistogramName;'], 'b': ['    private final String mContinuedAfterImpressionsHistogramName;']}, {'ab': ['    private final String mDismissedAfterImpressionsHistogramName;', '    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;', '    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.', '    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName = ""Signin.Promo.NTP.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.NTP.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ContinuedAfterImpressions"";', ""                // Recent Tabs promos can't be dismissed.""], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.DismissedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName = null;', '                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:', '                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                recordImpressionCountHistogram(mDismissedAfterImpressionsHistogramName);'], 'b': ['                RecordHistogram.recordExactLinearHistogram(mDismissedAfterImpressionsHistogramName,', '                        SharedPreferencesManager.getInstance().readInt(', '                                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                        MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '', '    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {', '        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }', '        SharedPreferencesManager.getInstance().incrementInt(', '                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);', '        recordImpressionCountHistogram(mImpressionCountHistogramName);', '', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mSigninAfterImpressionsHistogramName);'], 'b': ['        recordImpressionCountHistogram(mContinuedAfterImpressionsHistogramName);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '', '    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '', '    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,5f2b5ec993951ca0e5215ca0e3464dd173b2176e,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,17fd13c1_5c295a5b_before.java,17fd13c1_5c295a5b_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_42 ; private final private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final String VAR_48 ; private final private final private final private final private final private final private final VAR_49 VAR_50 ; private boolean VAR_51 ; private boolean VAR_52 ; public static boolean VAR_53 ( switch ( VAR_54 ) { case VAR_55 : return VAR_56 ( ) ; case VAR_57 : return VAR_58 ( ) ; case VAR_59 : return true ; case VAR_60 : return VAR_61 ( ) ; default : assert false : STRING_4 + VAR_54 ; return false ; } } public static void VAR_62 ( ) { final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_64 = VAR_65 . getValue ( ) * VAR_66 ; final long VAR_67 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_70 , INT_2 ) ; if ( VAR_64 <= 0 || VAR_67 <= 0 ) return ; if ( VAR_63 - VAR_67 >= VAR_64 ) { VAR_68 . getInstance ( ) . VAR_71 ( VAR_72 ( VAR_57 ) , 0 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_74 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_70 ) ; } } private static boolean VAR_56 ( ) { boolean VAR_75 = VAR_68 . getInstance ( ) . VAR_76 ( VAR_77 , false ) ; return VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_55 ) ) < VAR_36 && ! VAR_75 ; } private static boolean VAR_79 ( ) { final long VAR_80 = VAR_81 . getValue ( ) * VAR_66 ; if ( VAR_80 <= 0 ) return false ; final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_82 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 , INT_2 ) ; return VAR_82 > 0 && VAR_63 - VAR_82 >= VAR_80 ; } private static boolean VAR_58 ( ) { int VAR_83 = VAR_84 ( VAR_85 , STRING_5 , VAR_86 ) ; if ( VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_57 ) ) >= VAR_83 || VAR_79 ( ) ) { return false ; } if ( VAR_68 . getInstance ( ) . VAR_76 ( VAR_87 , false ) ) { return false ; } if ( VAR_88 ( VAR_89 ) ) { return false ; } final final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; return VAR_93 == null || VAR_94 ( VAR_93 ) . VAR_95 ( false ) ; } private static boolean VAR_61 ( ) { VAR_68 VAR_96 = VAR_68 . getInstance ( ) ; boolean VAR_75 = VAR_97 ( VAR_98 , false ) ; return VAR_99 ( VAR_72 ( VAR_60 ) ) < VAR_37 && ! VAR_75 ; } private static final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; VAR_105 VAR_93 = VAR_106 ( VAR_107 ( VAR_108 ) ) ; final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; if ( VAR_93 == null ) { VAR_93 = VAR_109 ( VAR_110 ( ) ) ; } return VAR_93 ; } public static String VAR_72 ( switch ( VAR_54 ) { case VAR_55 : return VAR_111 ( VAR_38 ) ; case VAR_57 : return VAR_111 ( VAR_39 ) ; case VAR_60 : return VAR_111 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_54 ) ; } } public VAR_32 ( VAR_112 = VAR_54 ; VAR_50 = VAR_113 ; switch ( VAR_112 ) { case VAR_55 : VAR_41 = STRING_6 ; VAR_42 = STRING_7 ; VAR_114 = VAR_115 ; VAR_43 = STRING_8 ; VAR_44 = STRING_9 ; VAR_45 = STRING_10 ; VAR_46 = STRING_11 ; VAR_47 = STRING_12 ; VAR_48 = STRING_13 ; VAR_116 = VAR_77 ; VAR_117 = STRING_14 ; VAR_118 = STRING_15 ; VAR_119 = STRING_16 ; VAR_120 = VAR_121 ; VAR_122 = VAR_123 ; break ; case VAR_57 : VAR_41 = STRING_17 ; VAR_42 = STRING_18 ; VAR_114 = VAR_124 ; VAR_43 = STRING_19 ; VAR_44 = STRING_20 ; VAR_45 = STRING_21 ; VAR_46 = STRING_22 ; VAR_47 = STRING_23 ; VAR_48 = STRING_24 ; VAR_116 = VAR_87 ; VAR_117 = null ; VAR_118 = null ; VAR_119 = STRING_25 ; VAR_120 = VAR_125 ; VAR_122 = VAR_126 ; break ; case VAR_59 : VAR_41 = STRING_6 ; VAR_42 = null ; VAR_114 = null ; VAR_43 = STRING_26 ; VAR_44 = STRING_27 ; VAR_45 = STRING_28 ; VAR_46 = STRING_29 ; VAR_47 = STRING_30 ; VAR_48 = STRING_31 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = null ; VAR_120 = VAR_127 ; VAR_122 = VAR_128 ; break ; case VAR_60 : VAR_41 = STRING_32 ; VAR_42 = STRING_33 ; VAR_114 = VAR_129 ; VAR_43 = STRING_34 ; VAR_44 = STRING_35 ; VAR_46 = STRING_36 ; VAR_47 = STRING_37 ; VAR_48 = STRING_38 ; VAR_45 = STRING_39 ; VAR_116 = VAR_98 ; VAR_117 = STRING_40 ; VAR_118 = STRING_41 ; VAR_119 = STRING_42 ; VAR_120 = VAR_130 ; VAR_122 = VAR_131 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_112 ) ; } } public void VAR_132 ( VAR_133 VAR_134 , VAR_135 view , VAR_136 listener ) { final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; assert ! VAR_137 ( VAR_138 ) : STRING_43 ; final if ( VAR_93 == null ) { VAR_139 ( view , null , listener ) ; return ; } VAR_139 ( view , VAR_140 ( VAR_93 . name ) , listener ) ; } public void VAR_141 ( ) { if ( ! VAR_51 || VAR_52 || VAR_117 == null ) { return ; } VAR_142 ( VAR_117 , VAR_143 ( ) ) ; } private void VAR_139 ( VAR_135 view , final final if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } VAR_144 = new VAR_146 ( view ) ; VAR_145 ( new VAR_147 ( this : : VAR_148 ) ) ; VAR_149 = VAR_150 ; VAR_51 = true ; if ( VAR_149 == null ) { VAR_151 ( view ) ; } else { VAR_152 ( view ) ; } if ( VAR_153 != null ) { VAR_154 ( ) . VAR_155 ( VAR_156 ) ; VAR_154 ( ) . VAR_157 ( VAR_158 - > { assert VAR_119 != null ; assert VAR_116 != null ; VAR_52 = true ; VAR_142 ( VAR_119 , VAR_143 ( ) ) ; VAR_68 . getInstance ( ) . VAR_159 ( VAR_116 , true ) ; VAR_160 ( ) ; } ) ; } else { VAR_154 ( ) . VAR_155 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } } public void VAR_163 ( ) { if ( VAR_112 != VAR_59 ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_72 ( VAR_112 ) ) ; } VAR_68 . getInstance ( ) . VAR_164 ( VAR_165 ) ; VAR_166 ( VAR_41 ) ; if ( VAR_112 == VAR_57 ) { final long VAR_63 = System . currentTimeMillis ( ) ; if ( VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 ) == 0 ) { VAR_68 . getInstance ( ) . VAR_167 ( VAR_74 , VAR_63 ) ; } VAR_68 . getInstance ( ) . VAR_167 ( VAR_70 , VAR_63 ) ; } } private void VAR_151 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_169 ( ) . VAR_170 ( VAR_171 ) ; VAR_172 ( context , view , VAR_173 ) ; VAR_174 ( ) . setText ( VAR_122 ) ; VAR_175 ( ) . setText ( VAR_176 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_177 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } private void VAR_152 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_179 VAR_180 = VAR_181 ( ) ; VAR_169 ( ) . VAR_182 ( VAR_180 ) ; VAR_172 ( context , view , VAR_183 ) ; VAR_174 ( ) . setText ( VAR_120 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_184 ( context ) ) ; if ( VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) . VAR_185 ( VAR_108 ) ) { VAR_175 ( ) . setText ( VAR_176 ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } else { final String VAR_186 = VAR_88 ( VAR_187 ) ? context . getString ( VAR_188 , VAR_189 ( ) ) : context . getString ( VAR_176 ) ; VAR_175 ( ) . setText ( VAR_186 ) ; VAR_178 ( ) . setText ( VAR_190 ) ; VAR_178 ( ) . VAR_157 ( v - > VAR_191 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_156 ) ; } } private int VAR_143 ( ) { return VAR_68 . getInstance ( ) . VAR_78 ( VAR_114 ) ; } private void VAR_177 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_48 ) ; VAR_194 ( context , VAR_112 ) ; } private void VAR_184 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_46 ) ; VAR_195 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_191 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_47 ) ; VAR_197 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_192 ( ) { VAR_52 = true ; if ( VAR_118 != null ) { VAR_142 ( VAR_118 , VAR_143 ( ) ) ; } } private void VAR_166 ( String VAR_198 ) { VAR_199 ( VAR_198 , VAR_68 . getInstance ( ) . VAR_78 ( VAR_165 ) , VAR_35 ) ; } private void VAR_172 ( Context context , VAR_135 view , VAR_200 VAR_201 = VAR_169 ( ) . VAR_202 ( ) ; VAR_203 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_207 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_169 ( ) . VAR_208 ( VAR_201 ) ; } private void VAR_148 ( ) { VAR_193 . record ( VAR_43 ) ; if ( VAR_149 == null ) { VAR_193 . record ( VAR_45 ) ; } else { VAR_193 . record ( VAR_44 ) ; } if ( VAR_114 != null ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_114 ) ; } } public static void VAR_209 ( boolean VAR_210 ) { VAR_68 . getInstance ( ) . VAR_159 ( VAR_77 , VAR_210 ) ; } public static int VAR_211 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_212 ; private final String VAR_42 ; private final private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final String VAR_48 ; private final private final private final private final private final private final private final VAR_49 VAR_50 ; private boolean VAR_51 ; private boolean VAR_52 ; public static boolean VAR_53 ( switch ( VAR_54 ) { case VAR_55 : return VAR_56 ( ) ; case VAR_57 : return VAR_58 ( ) ; case VAR_59 : return true ; case VAR_60 : return VAR_61 ( ) ; default : assert false : STRING_4 + VAR_54 ; return false ; } } public static void VAR_62 ( ) { final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_64 = VAR_65 . getValue ( ) * VAR_66 ; final long VAR_67 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_70 , INT_2 ) ; if ( VAR_64 <= 0 || VAR_67 <= 0 ) return ; if ( VAR_63 - VAR_67 >= VAR_64 ) { VAR_68 . getInstance ( ) . VAR_71 ( VAR_72 ( VAR_57 ) , 0 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_74 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_70 ) ; } } private static boolean VAR_56 ( ) { boolean VAR_75 = VAR_68 . getInstance ( ) . VAR_76 ( VAR_77 , false ) ; return VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_55 ) ) < VAR_36 && ! VAR_75 ; } private static boolean VAR_79 ( ) { final long VAR_80 = VAR_81 . getValue ( ) * VAR_66 ; if ( VAR_80 <= 0 ) return false ; final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_82 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 , INT_2 ) ; return VAR_82 > 0 && VAR_63 - VAR_82 >= VAR_80 ; } private static boolean VAR_58 ( ) { int VAR_83 = VAR_84 ( VAR_85 , STRING_5 , VAR_86 ) ; if ( VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_57 ) ) >= VAR_83 || VAR_79 ( ) ) { return false ; } if ( VAR_68 . getInstance ( ) . VAR_76 ( VAR_87 , false ) ) { return false ; } if ( VAR_88 ( VAR_89 ) ) { return false ; } final final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; return VAR_93 == null || VAR_94 ( VAR_93 ) . VAR_95 ( false ) ; } private static boolean VAR_61 ( ) { VAR_68 VAR_96 = VAR_68 . getInstance ( ) ; boolean VAR_75 = VAR_97 ( VAR_98 , false ) ; return VAR_99 ( VAR_72 ( VAR_60 ) ) < VAR_37 && ! VAR_75 ; } private static final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; VAR_105 VAR_93 = VAR_106 ( VAR_107 ( VAR_108 ) ) ; final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; if ( VAR_93 == null ) { VAR_93 = VAR_109 ( VAR_110 ( ) ) ; } return VAR_93 ; } public static String VAR_72 ( switch ( VAR_54 ) { case VAR_55 : return VAR_111 ( VAR_38 ) ; case VAR_57 : return VAR_111 ( VAR_39 ) ; case VAR_60 : return VAR_111 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_54 ) ; } } public VAR_32 ( VAR_112 = VAR_54 ; VAR_50 = VAR_113 ; switch ( VAR_112 ) { case VAR_55 : VAR_41 = STRING_6 ; VAR_212 = STRING_44 ; VAR_42 = STRING_7 ; VAR_114 = VAR_115 ; VAR_43 = STRING_8 ; VAR_44 = STRING_9 ; VAR_45 = STRING_10 ; VAR_46 = STRING_11 ; VAR_47 = STRING_12 ; VAR_48 = STRING_13 ; VAR_116 = VAR_77 ; VAR_117 = STRING_14 ; VAR_118 = STRING_15 ; VAR_119 = STRING_16 ; VAR_120 = VAR_121 ; VAR_122 = VAR_123 ; break ; case VAR_57 : VAR_41 = STRING_17 ; VAR_212 = STRING_45 ; VAR_42 = STRING_18 ; VAR_114 = VAR_124 ; VAR_43 = STRING_19 ; VAR_44 = STRING_20 ; VAR_45 = STRING_21 ; VAR_46 = STRING_22 ; VAR_47 = STRING_23 ; VAR_48 = STRING_24 ; VAR_116 = VAR_87 ; VAR_117 = null ; VAR_118 = null ; VAR_119 = STRING_25 ; VAR_120 = VAR_125 ; VAR_122 = VAR_126 ; break ; case VAR_59 : VAR_41 = STRING_6 ; VAR_212 = STRING_44 ; VAR_42 = null ; VAR_114 = null ; VAR_43 = STRING_26 ; VAR_44 = STRING_27 ; VAR_45 = STRING_28 ; VAR_46 = STRING_29 ; VAR_47 = STRING_30 ; VAR_48 = STRING_31 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = null ; VAR_120 = VAR_127 ; VAR_122 = VAR_128 ; break ; case VAR_60 : VAR_41 = STRING_32 ; VAR_212 = STRING_46 ; VAR_42 = STRING_33 ; VAR_114 = VAR_129 ; VAR_43 = STRING_34 ; VAR_44 = STRING_35 ; VAR_46 = STRING_36 ; VAR_47 = STRING_37 ; VAR_48 = STRING_38 ; VAR_45 = STRING_39 ; VAR_116 = VAR_98 ; VAR_117 = STRING_40 ; VAR_118 = STRING_41 ; VAR_119 = STRING_42 ; VAR_120 = VAR_130 ; VAR_122 = VAR_131 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_112 ) ; } } public void VAR_132 ( VAR_133 VAR_134 , VAR_135 view , VAR_136 listener ) { final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; assert ! VAR_137 ( VAR_138 ) : STRING_43 ; final if ( VAR_93 == null ) { VAR_139 ( view , null , listener ) ; return ; } VAR_139 ( view , VAR_140 ( VAR_93 . name ) , listener ) ; } public void VAR_141 ( ) { if ( ! VAR_51 || VAR_52 || VAR_117 == null ) { return ; } VAR_142 ( VAR_117 , VAR_143 ( ) ) ; } private void VAR_139 ( VAR_135 view , final final if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } VAR_144 = new VAR_146 ( view ) ; VAR_145 ( new VAR_147 ( this : : VAR_148 ) ) ; VAR_149 = VAR_150 ; VAR_51 = true ; if ( VAR_149 == null ) { VAR_151 ( view ) ; } else { VAR_152 ( view ) ; } if ( VAR_153 != null ) { VAR_154 ( ) . VAR_155 ( VAR_156 ) ; VAR_154 ( ) . VAR_157 ( VAR_158 - > { assert VAR_119 != null ; assert VAR_116 != null ; VAR_52 = true ; VAR_142 ( VAR_119 , VAR_143 ( ) ) ; VAR_68 . getInstance ( ) . VAR_159 ( VAR_116 , true ) ; VAR_166 ( VAR_42 ) ; VAR_160 ( ) ; } ) ; } else { VAR_154 ( ) . VAR_155 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } } public void VAR_163 ( ) { if ( VAR_112 != VAR_59 ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_72 ( VAR_112 ) ) ; } VAR_68 . getInstance ( ) . VAR_164 ( VAR_165 ) ; VAR_166 ( VAR_41 ) ; if ( VAR_112 == VAR_57 ) { final long VAR_63 = System . currentTimeMillis ( ) ; if ( VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 ) == 0 ) { VAR_68 . getInstance ( ) . VAR_167 ( VAR_74 , VAR_63 ) ; } VAR_68 . getInstance ( ) . VAR_167 ( VAR_70 , VAR_63 ) ; } } private void VAR_151 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_169 ( ) . VAR_170 ( VAR_171 ) ; VAR_172 ( context , view , VAR_173 ) ; VAR_174 ( ) . setText ( VAR_122 ) ; VAR_175 ( ) . setText ( VAR_176 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_177 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } private void VAR_152 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_179 VAR_180 = VAR_181 ( ) ; VAR_169 ( ) . VAR_182 ( VAR_180 ) ; VAR_172 ( context , view , VAR_183 ) ; VAR_174 ( ) . setText ( VAR_120 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_184 ( context ) ) ; if ( VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) . VAR_185 ( VAR_108 ) ) { VAR_175 ( ) . setText ( VAR_176 ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } else { final String VAR_186 = VAR_88 ( VAR_187 ) ? context . getString ( VAR_188 , VAR_189 ( ) ) : context . getString ( VAR_176 ) ; VAR_175 ( ) . setText ( VAR_186 ) ; VAR_178 ( ) . setText ( VAR_190 ) ; VAR_178 ( ) . VAR_157 ( v - > VAR_191 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_156 ) ; } } private int VAR_143 ( ) { return VAR_68 . getInstance ( ) . VAR_78 ( VAR_114 ) ; } private void VAR_177 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_48 ) ; VAR_194 ( context , VAR_112 ) ; } private void VAR_184 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_46 ) ; VAR_195 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_191 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_47 ) ; VAR_197 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_192 ( ) { VAR_52 = true ; VAR_166 ( VAR_212 ) ; if ( VAR_118 != null ) { VAR_142 ( VAR_118 , VAR_143 ( ) ) ; } } private void VAR_166 ( String VAR_198 ) { VAR_199 ( VAR_198 , VAR_68 . getInstance ( ) . VAR_78 ( VAR_165 ) , VAR_35 ) ; } private void VAR_172 ( Context context , VAR_135 view , VAR_200 VAR_201 = VAR_169 ( ) . VAR_202 ( ) ; VAR_203 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_207 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_169 ( ) . VAR_208 ( VAR_201 ) ; } private void VAR_148 ( ) { VAR_193 . record ( VAR_43 ) ; if ( VAR_149 == null ) { VAR_193 . record ( VAR_45 ) ; } else { VAR_193 . record ( VAR_44 ) ; } if ( VAR_114 != null ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_114 ) ; } } public static void VAR_209 ( boolean VAR_210 ) { VAR_68 . getInstance ( ) . VAR_159 ( VAR_77 , VAR_210 ) ; } public static int VAR_211 ( ) { return VAR_36 ; } }",Should we also change the histogram name to Continued..?
24,667f3941_7034dd1b,239.0,Done,239.0,239.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";', '    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;', '    private final String mImpressionCountHistogramName;']}, {'a': ['    private final String mSigninAfterImpressionsHistogramName;'], 'b': ['    private final String mContinuedAfterImpressionsHistogramName;']}, {'ab': ['    private final String mDismissedAfterImpressionsHistogramName;', '    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;', '    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.', '    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName = ""Signin.Promo.NTP.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.NTP.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.ContinuedAfterImpressions"";', ""                // Recent Tabs promos can't be dismissed.""], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Other.DismissedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName = null;', '                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:', '                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";']}, {'a': ['                mSigninAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.ContinuedAfterImpressions"";'], 'b': ['                mContinuedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.CompletedAfterImpressions"";']}, {'ab': ['                mDismissedAfterImpressionsHistogramName =', '                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                recordImpressionCountHistogram(mDismissedAfterImpressionsHistogramName);'], 'b': ['                RecordHistogram.recordExactLinearHistogram(mDismissedAfterImpressionsHistogramName,', '                        SharedPreferencesManager.getInstance().readInt(', '                                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                        MAX_TOTAL_PROMO_SHOW_COUNT);']}, {'ab': ['                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '', '    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {', '        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }', '        SharedPreferencesManager.getInstance().incrementInt(', '                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);', '        recordImpressionCountHistogram(mImpressionCountHistogramName);', '', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mSigninAfterImpressionsHistogramName);'], 'b': ['        recordImpressionCountHistogram(mContinuedAfterImpressionsHistogramName);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '', '    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '', '    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,5f2b5ec993951ca0e5215ca0e3464dd173b2176e,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,667f3941_7034dd1b_before.java,667f3941_7034dd1b_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_42 ; private final private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final String VAR_48 ; private final private final private final private final private final private final private final VAR_49 VAR_50 ; private boolean VAR_51 ; private boolean VAR_52 ; public static boolean VAR_53 ( switch ( VAR_54 ) { case VAR_55 : return VAR_56 ( ) ; case VAR_57 : return VAR_58 ( ) ; case VAR_59 : return true ; case VAR_60 : return VAR_61 ( ) ; default : assert false : STRING_4 + VAR_54 ; return false ; } } public static void VAR_62 ( ) { final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_64 = VAR_65 . getValue ( ) * VAR_66 ; final long VAR_67 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_70 , INT_2 ) ; if ( VAR_64 <= 0 || VAR_67 <= 0 ) return ; if ( VAR_63 - VAR_67 >= VAR_64 ) { VAR_68 . getInstance ( ) . VAR_71 ( VAR_72 ( VAR_57 ) , 0 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_74 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_70 ) ; } } private static boolean VAR_56 ( ) { boolean VAR_75 = VAR_68 . getInstance ( ) . VAR_76 ( VAR_77 , false ) ; return VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_55 ) ) < VAR_36 && ! VAR_75 ; } private static boolean VAR_79 ( ) { final long VAR_80 = VAR_81 . getValue ( ) * VAR_66 ; if ( VAR_80 <= 0 ) return false ; final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_82 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 , INT_2 ) ; return VAR_82 > 0 && VAR_63 - VAR_82 >= VAR_80 ; } private static boolean VAR_58 ( ) { int VAR_83 = VAR_84 ( VAR_85 , STRING_5 , VAR_86 ) ; if ( VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_57 ) ) >= VAR_83 || VAR_79 ( ) ) { return false ; } if ( VAR_68 . getInstance ( ) . VAR_76 ( VAR_87 , false ) ) { return false ; } if ( VAR_88 ( VAR_89 ) ) { return false ; } final final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; return VAR_93 == null || VAR_94 ( VAR_93 ) . VAR_95 ( false ) ; } private static boolean VAR_61 ( ) { VAR_68 VAR_96 = VAR_68 . getInstance ( ) ; boolean VAR_75 = VAR_97 ( VAR_98 , false ) ; return VAR_99 ( VAR_72 ( VAR_60 ) ) < VAR_37 && ! VAR_75 ; } private static final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; VAR_105 VAR_93 = VAR_106 ( VAR_107 ( VAR_108 ) ) ; final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; if ( VAR_93 == null ) { VAR_93 = VAR_109 ( VAR_110 ( ) ) ; } return VAR_93 ; } public static String VAR_72 ( switch ( VAR_54 ) { case VAR_55 : return VAR_111 ( VAR_38 ) ; case VAR_57 : return VAR_111 ( VAR_39 ) ; case VAR_60 : return VAR_111 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_54 ) ; } } public VAR_32 ( VAR_112 = VAR_54 ; VAR_50 = VAR_113 ; switch ( VAR_112 ) { case VAR_55 : VAR_41 = STRING_6 ; VAR_42 = STRING_7 ; VAR_114 = VAR_115 ; VAR_43 = STRING_8 ; VAR_44 = STRING_9 ; VAR_45 = STRING_10 ; VAR_46 = STRING_11 ; VAR_47 = STRING_12 ; VAR_48 = STRING_13 ; VAR_116 = VAR_77 ; VAR_117 = STRING_14 ; VAR_118 = STRING_15 ; VAR_119 = STRING_16 ; VAR_120 = VAR_121 ; VAR_122 = VAR_123 ; break ; case VAR_57 : VAR_41 = STRING_17 ; VAR_42 = STRING_18 ; VAR_114 = VAR_124 ; VAR_43 = STRING_19 ; VAR_44 = STRING_20 ; VAR_45 = STRING_21 ; VAR_46 = STRING_22 ; VAR_47 = STRING_23 ; VAR_48 = STRING_24 ; VAR_116 = VAR_87 ; VAR_117 = null ; VAR_118 = null ; VAR_119 = STRING_25 ; VAR_120 = VAR_125 ; VAR_122 = VAR_126 ; break ; case VAR_59 : VAR_41 = STRING_6 ; VAR_42 = null ; VAR_114 = null ; VAR_43 = STRING_26 ; VAR_44 = STRING_27 ; VAR_45 = STRING_28 ; VAR_46 = STRING_29 ; VAR_47 = STRING_30 ; VAR_48 = STRING_31 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = null ; VAR_120 = VAR_127 ; VAR_122 = VAR_128 ; break ; case VAR_60 : VAR_41 = STRING_32 ; VAR_42 = STRING_33 ; VAR_114 = VAR_129 ; VAR_43 = STRING_34 ; VAR_44 = STRING_35 ; VAR_46 = STRING_36 ; VAR_47 = STRING_37 ; VAR_48 = STRING_38 ; VAR_45 = STRING_39 ; VAR_116 = VAR_98 ; VAR_117 = STRING_40 ; VAR_118 = STRING_41 ; VAR_119 = STRING_42 ; VAR_120 = VAR_130 ; VAR_122 = VAR_131 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_112 ) ; } } public void VAR_132 ( VAR_133 VAR_134 , VAR_135 view , VAR_136 listener ) { final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; assert ! VAR_137 ( VAR_138 ) : STRING_43 ; final if ( VAR_93 == null ) { VAR_139 ( view , null , listener ) ; return ; } VAR_139 ( view , VAR_140 ( VAR_93 . name ) , listener ) ; } public void VAR_141 ( ) { if ( ! VAR_51 || VAR_52 || VAR_117 == null ) { return ; } VAR_142 ( VAR_117 , VAR_143 ( ) ) ; } private void VAR_139 ( VAR_135 view , final final if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } VAR_144 = new VAR_146 ( view ) ; VAR_145 ( new VAR_147 ( this : : VAR_148 ) ) ; VAR_149 = VAR_150 ; VAR_51 = true ; if ( VAR_149 == null ) { VAR_151 ( view ) ; } else { VAR_152 ( view ) ; } if ( VAR_153 != null ) { VAR_154 ( ) . VAR_155 ( VAR_156 ) ; VAR_154 ( ) . VAR_157 ( VAR_158 - > { assert VAR_119 != null ; assert VAR_116 != null ; VAR_52 = true ; VAR_142 ( VAR_119 , VAR_143 ( ) ) ; VAR_68 . getInstance ( ) . VAR_159 ( VAR_116 , true ) ; VAR_160 ( ) ; } ) ; } else { VAR_154 ( ) . VAR_155 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } } public void VAR_163 ( ) { if ( VAR_112 != VAR_59 ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_72 ( VAR_112 ) ) ; } VAR_68 . getInstance ( ) . VAR_164 ( VAR_165 ) ; VAR_166 ( VAR_41 ) ; if ( VAR_112 == VAR_57 ) { final long VAR_63 = System . currentTimeMillis ( ) ; if ( VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 ) == 0 ) { VAR_68 . getInstance ( ) . VAR_167 ( VAR_74 , VAR_63 ) ; } VAR_68 . getInstance ( ) . VAR_167 ( VAR_70 , VAR_63 ) ; } } private void VAR_151 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_169 ( ) . VAR_170 ( VAR_171 ) ; VAR_172 ( context , view , VAR_173 ) ; VAR_174 ( ) . setText ( VAR_122 ) ; VAR_175 ( ) . setText ( VAR_176 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_177 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } private void VAR_152 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_179 VAR_180 = VAR_181 ( ) ; VAR_169 ( ) . VAR_182 ( VAR_180 ) ; VAR_172 ( context , view , VAR_183 ) ; VAR_174 ( ) . setText ( VAR_120 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_184 ( context ) ) ; if ( VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) . VAR_185 ( VAR_108 ) ) { VAR_175 ( ) . setText ( VAR_176 ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } else { final String VAR_186 = VAR_88 ( VAR_187 ) ? context . getString ( VAR_188 , VAR_189 ( ) ) : context . getString ( VAR_176 ) ; VAR_175 ( ) . setText ( VAR_186 ) ; VAR_178 ( ) . setText ( VAR_190 ) ; VAR_178 ( ) . VAR_157 ( v - > VAR_191 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_156 ) ; } } private int VAR_143 ( ) { return VAR_68 . getInstance ( ) . VAR_78 ( VAR_114 ) ; } private void VAR_177 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_48 ) ; VAR_194 ( context , VAR_112 ) ; } private void VAR_184 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_46 ) ; VAR_195 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_191 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_47 ) ; VAR_197 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_192 ( ) { VAR_52 = true ; if ( VAR_118 != null ) { VAR_142 ( VAR_118 , VAR_143 ( ) ) ; } } private void VAR_166 ( String VAR_198 ) { VAR_199 ( VAR_198 , VAR_68 . getInstance ( ) . VAR_78 ( VAR_165 ) , VAR_35 ) ; } private void VAR_172 ( Context context , VAR_135 view , VAR_200 VAR_201 = VAR_169 ( ) . VAR_202 ( ) ; VAR_203 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_207 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_169 ( ) . VAR_208 ( VAR_201 ) ; } private void VAR_148 ( ) { VAR_193 . record ( VAR_43 ) ; if ( VAR_149 == null ) { VAR_193 . record ( VAR_45 ) ; } else { VAR_193 . record ( VAR_44 ) ; } if ( VAR_114 != null ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_114 ) ; } } public static void VAR_209 ( boolean VAR_210 ) { VAR_68 . getInstance ( ) . VAR_159 ( VAR_77 , VAR_210 ) ; } public static int VAR_211 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_212 ; private final String VAR_42 ; private final private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final String VAR_48 ; private final private final private final private final private final private final private final VAR_49 VAR_50 ; private boolean VAR_51 ; private boolean VAR_52 ; public static boolean VAR_53 ( switch ( VAR_54 ) { case VAR_55 : return VAR_56 ( ) ; case VAR_57 : return VAR_58 ( ) ; case VAR_59 : return true ; case VAR_60 : return VAR_61 ( ) ; default : assert false : STRING_4 + VAR_54 ; return false ; } } public static void VAR_62 ( ) { final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_64 = VAR_65 . getValue ( ) * VAR_66 ; final long VAR_67 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_70 , INT_2 ) ; if ( VAR_64 <= 0 || VAR_67 <= 0 ) return ; if ( VAR_63 - VAR_67 >= VAR_64 ) { VAR_68 . getInstance ( ) . VAR_71 ( VAR_72 ( VAR_57 ) , 0 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_74 ) ; VAR_68 . getInstance ( ) . VAR_73 ( VAR_70 ) ; } } private static boolean VAR_56 ( ) { boolean VAR_75 = VAR_68 . getInstance ( ) . VAR_76 ( VAR_77 , false ) ; return VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_55 ) ) < VAR_36 && ! VAR_75 ; } private static boolean VAR_79 ( ) { final long VAR_80 = VAR_81 . getValue ( ) * VAR_66 ; if ( VAR_80 <= 0 ) return false ; final long VAR_63 = System . currentTimeMillis ( ) ; final long VAR_82 = VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 , INT_2 ) ; return VAR_82 > 0 && VAR_63 - VAR_82 >= VAR_80 ; } private static boolean VAR_58 ( ) { int VAR_83 = VAR_84 ( VAR_85 , STRING_5 , VAR_86 ) ; if ( VAR_68 . getInstance ( ) . VAR_78 ( VAR_72 ( VAR_57 ) ) >= VAR_83 || VAR_79 ( ) ) { return false ; } if ( VAR_68 . getInstance ( ) . VAR_76 ( VAR_87 , false ) ) { return false ; } if ( VAR_88 ( VAR_89 ) ) { return false ; } final final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; return VAR_93 == null || VAR_94 ( VAR_93 ) . VAR_95 ( false ) ; } private static boolean VAR_61 ( ) { VAR_68 VAR_96 = VAR_68 . getInstance ( ) ; boolean VAR_75 = VAR_97 ( VAR_98 , false ) ; return VAR_99 ( VAR_72 ( VAR_60 ) ) < VAR_37 && ! VAR_75 ; } private static final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; VAR_105 VAR_93 = VAR_106 ( VAR_107 ( VAR_108 ) ) ; final VAR_90 VAR_91 = VAR_92 . getInstance ( ) ; if ( VAR_93 == null ) { VAR_93 = VAR_109 ( VAR_110 ( ) ) ; } return VAR_93 ; } public static String VAR_72 ( switch ( VAR_54 ) { case VAR_55 : return VAR_111 ( VAR_38 ) ; case VAR_57 : return VAR_111 ( VAR_39 ) ; case VAR_60 : return VAR_111 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_54 ) ; } } public VAR_32 ( VAR_112 = VAR_54 ; VAR_50 = VAR_113 ; switch ( VAR_112 ) { case VAR_55 : VAR_41 = STRING_6 ; VAR_212 = STRING_44 ; VAR_42 = STRING_7 ; VAR_114 = VAR_115 ; VAR_43 = STRING_8 ; VAR_44 = STRING_9 ; VAR_45 = STRING_10 ; VAR_46 = STRING_11 ; VAR_47 = STRING_12 ; VAR_48 = STRING_13 ; VAR_116 = VAR_77 ; VAR_117 = STRING_14 ; VAR_118 = STRING_15 ; VAR_119 = STRING_16 ; VAR_120 = VAR_121 ; VAR_122 = VAR_123 ; break ; case VAR_57 : VAR_41 = STRING_17 ; VAR_212 = STRING_45 ; VAR_42 = STRING_18 ; VAR_114 = VAR_124 ; VAR_43 = STRING_19 ; VAR_44 = STRING_20 ; VAR_45 = STRING_21 ; VAR_46 = STRING_22 ; VAR_47 = STRING_23 ; VAR_48 = STRING_24 ; VAR_116 = VAR_87 ; VAR_117 = null ; VAR_118 = null ; VAR_119 = STRING_25 ; VAR_120 = VAR_125 ; VAR_122 = VAR_126 ; break ; case VAR_59 : VAR_41 = STRING_6 ; VAR_212 = STRING_44 ; VAR_42 = null ; VAR_114 = null ; VAR_43 = STRING_26 ; VAR_44 = STRING_27 ; VAR_45 = STRING_28 ; VAR_46 = STRING_29 ; VAR_47 = STRING_30 ; VAR_48 = STRING_31 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = null ; VAR_120 = VAR_127 ; VAR_122 = VAR_128 ; break ; case VAR_60 : VAR_41 = STRING_32 ; VAR_212 = STRING_46 ; VAR_42 = STRING_33 ; VAR_114 = VAR_129 ; VAR_43 = STRING_34 ; VAR_44 = STRING_35 ; VAR_46 = STRING_36 ; VAR_47 = STRING_37 ; VAR_48 = STRING_38 ; VAR_45 = STRING_39 ; VAR_116 = VAR_98 ; VAR_117 = STRING_40 ; VAR_118 = STRING_41 ; VAR_119 = STRING_42 ; VAR_120 = VAR_130 ; VAR_122 = VAR_131 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_112 ) ; } } public void VAR_132 ( VAR_133 VAR_134 , VAR_135 view , VAR_136 listener ) { final VAR_100 VAR_101 = VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) ; assert ! VAR_137 ( VAR_138 ) : STRING_43 ; final if ( VAR_93 == null ) { VAR_139 ( view , null , listener ) ; return ; } VAR_139 ( view , VAR_140 ( VAR_93 . name ) , listener ) ; } public void VAR_141 ( ) { if ( ! VAR_51 || VAR_52 || VAR_117 == null ) { return ; } VAR_142 ( VAR_117 , VAR_143 ( ) ) ; } private void VAR_139 ( VAR_135 view , final final if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } VAR_144 = new VAR_146 ( view ) ; VAR_145 ( new VAR_147 ( this : : VAR_148 ) ) ; VAR_149 = VAR_150 ; VAR_51 = true ; if ( VAR_149 == null ) { VAR_151 ( view ) ; } else { VAR_152 ( view ) ; } if ( VAR_153 != null ) { VAR_154 ( ) . VAR_155 ( VAR_156 ) ; VAR_154 ( ) . VAR_157 ( VAR_158 - > { assert VAR_119 != null ; assert VAR_116 != null ; VAR_52 = true ; VAR_142 ( VAR_119 , VAR_143 ( ) ) ; VAR_68 . getInstance ( ) . VAR_159 ( VAR_116 , true ) ; VAR_166 ( VAR_42 ) ; VAR_160 ( ) ; } ) ; } else { VAR_154 ( ) . VAR_155 ( VAR_161 ) ; } } public void VAR_162 ( ) { if ( VAR_144 != null ) { VAR_145 ( null ) ; VAR_144 = null ; } } public void VAR_163 ( ) { if ( VAR_112 != VAR_59 ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_72 ( VAR_112 ) ) ; } VAR_68 . getInstance ( ) . VAR_164 ( VAR_165 ) ; VAR_166 ( VAR_41 ) ; if ( VAR_112 == VAR_57 ) { final long VAR_63 = System . currentTimeMillis ( ) ; if ( VAR_68 . getInstance ( ) . VAR_69 ( VAR_74 ) == 0 ) { VAR_68 . getInstance ( ) . VAR_167 ( VAR_74 , VAR_63 ) ; } VAR_68 . getInstance ( ) . VAR_167 ( VAR_70 , VAR_63 ) ; } } private void VAR_151 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_169 ( ) . VAR_170 ( VAR_171 ) ; VAR_172 ( context , view , VAR_173 ) ; VAR_174 ( ) . setText ( VAR_122 ) ; VAR_175 ( ) . setText ( VAR_176 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_177 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } private void VAR_152 ( VAR_135 view ) { final Context context = VAR_168 ( ) ; VAR_179 VAR_180 = VAR_181 ( ) ; VAR_169 ( ) . VAR_182 ( VAR_180 ) ; VAR_172 ( context , view , VAR_183 ) ; VAR_174 ( ) . setText ( VAR_120 ) ; VAR_175 ( ) . VAR_157 ( v - > VAR_184 ( context ) ) ; if ( VAR_102 . get ( ) . VAR_103 ( VAR_104 ( ) ) . VAR_185 ( VAR_108 ) ) { VAR_175 ( ) . setText ( VAR_176 ) ; VAR_178 ( ) . VAR_155 ( VAR_161 ) ; } else { final String VAR_186 = VAR_88 ( VAR_187 ) ? context . getString ( VAR_188 , VAR_189 ( ) ) : context . getString ( VAR_176 ) ; VAR_175 ( ) . setText ( VAR_186 ) ; VAR_178 ( ) . setText ( VAR_190 ) ; VAR_178 ( ) . VAR_157 ( v - > VAR_191 ( context ) ) ; VAR_178 ( ) . VAR_155 ( VAR_156 ) ; } } private int VAR_143 ( ) { return VAR_68 . getInstance ( ) . VAR_78 ( VAR_114 ) ; } private void VAR_177 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_48 ) ; VAR_194 ( context , VAR_112 ) ; } private void VAR_184 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_46 ) ; VAR_195 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_191 ( Context context ) { VAR_192 ( ) ; VAR_193 . record ( VAR_47 ) ; VAR_197 ( context , VAR_112 , VAR_196 ( ) ) ; } private void VAR_192 ( ) { VAR_52 = true ; VAR_166 ( VAR_212 ) ; if ( VAR_118 != null ) { VAR_142 ( VAR_118 , VAR_143 ( ) ) ; } } private void VAR_166 ( String VAR_198 ) { VAR_199 ( VAR_198 , VAR_68 . getInstance ( ) . VAR_78 ( VAR_165 ) , VAR_35 ) ; } private void VAR_172 ( Context context , VAR_135 view , VAR_200 VAR_201 = VAR_169 ( ) . VAR_202 ( ) ; VAR_203 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_207 = VAR_204 ( ) . VAR_205 ( VAR_206 ) ; VAR_169 ( ) . VAR_208 ( VAR_201 ) ; } private void VAR_148 ( ) { VAR_193 . record ( VAR_43 ) ; if ( VAR_149 == null ) { VAR_193 . record ( VAR_45 ) ; } else { VAR_193 . record ( VAR_44 ) ; } if ( VAR_114 != null ) { VAR_68 . getInstance ( ) . VAR_164 ( VAR_114 ) ; } } public static void VAR_209 ( boolean VAR_210 ) { VAR_68 . getInstance ( ) . VAR_159 ( VAR_77 , VAR_210 ) ; } public static int VAR_211 ( ) { return VAR_36 ; } }",Done
27,21e86f2d_5016db6c,241.0,"I wonder if this will be easier if we can just move ""Other"" to the end and treat it as a suffix, then we don't need to add three fields for everyone, can just decide which suffix to add on the fly according to the access point.",237.0,241.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";', '    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;', '    private final String mImpressionCountHistogramName;']}, {'a': ['    private final String mContinuedAfterImpressionCountHistogramName;', '    private final String mDismissedAfterImpressionCountHistogramName;'], 'b': ['    private final String mSigninAfterImpressionsHistogramName;', '    private final String mDismissedAfterImpressionsHistogramName;']}, {'ab': ['    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;', '    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.', '    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.ContinuedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName =', '                        ""Signin.Promo.NTP.ContinuedAfterImpressions"";', '                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName = ""Signin.Promo.NTP.ContinuedAfterImpressions"";', '                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.ContinuedAfterImpressions"";', ""                // Recent Tabs promos can't be dismissed.""]}, {'a': ['                mDismissedAfterImpressionCountHistogramName = null;'], 'b': ['                mDismissedAfterImpressionsHistogramName = null;']}, {'ab': ['                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:', '                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.ContinuedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                recordImpressionCountHistogram(mDismissedAfterImpressionCountHistogramName);'], 'b': ['                recordImpressionCountHistogram(mDismissedAfterImpressionsHistogramName);']}, {'ab': ['                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '', '    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {', '        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }', '        SharedPreferencesManager.getInstance().incrementInt(', '                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);', '        recordImpressionCountHistogram(mImpressionCountHistogramName);', '', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mContinuedAfterImpressionCountHistogramName);'], 'b': ['        recordImpressionCountHistogram(mSigninAfterImpressionsHistogramName);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '', '    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '', '    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,2c6d8db935d052a5ccac1cdbbba574f7c342219a,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,21e86f2d_5016db6c_before.java,21e86f2d_5016db6c_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_4 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_5 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_41 = STRING_6 ; STRING_7 ; STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_41 = STRING_18 ; STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_41 = STRING_6 ; STRING_7 ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_41 = STRING_33 ; STRING_34 ; STRING_35 ; VAR_113 = VAR_128 ; VAR_42 = STRING_36 ; VAR_43 = STRING_37 ; VAR_45 = STRING_38 ; VAR_46 = STRING_39 ; VAR_47 = STRING_40 ; VAR_44 = STRING_41 ; VAR_115 = VAR_97 ; VAR_116 = STRING_42 ; VAR_117 = STRING_43 ; VAR_118 = STRING_44 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_45 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_159 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_160 ) ; } } public void VAR_161 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_162 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_164 ) ; VAR_165 ( VAR_41 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_166 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_166 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_168 ( ) . VAR_169 ( VAR_170 ) ; VAR_171 ( context , view , VAR_172 ) ; VAR_173 ( ) . setText ( VAR_121 ) ; VAR_174 ( ) . setText ( VAR_175 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_176 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_178 VAR_179 = VAR_180 ( ) ; VAR_168 ( ) . VAR_181 ( VAR_179 ) ; VAR_171 ( context , view , VAR_182 ) ; VAR_173 ( ) . setText ( VAR_119 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_183 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_184 ( VAR_107 ) ) { VAR_174 ( ) . setText ( VAR_175 ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } else { final String VAR_185 = VAR_87 ( VAR_186 ) ? context . getString ( VAR_187 , VAR_188 ( ) ) : context . getString ( VAR_175 ) ; VAR_174 ( ) . setText ( VAR_185 ) ; VAR_177 ( ) . setText ( VAR_189 ) ; VAR_177 ( ) . VAR_156 ( v - > VAR_190 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_176 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_47 ) ; VAR_193 ( context , VAR_111 ) ; } private void VAR_183 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_45 ) ; VAR_194 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_190 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_46 ) ; VAR_196 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_191 ( ) { VAR_51 = true ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_165 ( String VAR_197 ) { VAR_198 ( VAR_197 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_164 ) , VAR_35 ) ; } private void VAR_171 ( Context context , VAR_134 view , VAR_199 VAR_200 = VAR_168 ( ) . VAR_201 ( ) ; VAR_202 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_206 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_168 ( ) . VAR_207 ( VAR_200 ) ; } private void VAR_147 ( ) { VAR_192 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_192 . record ( VAR_44 ) ; } else { VAR_192 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_208 ( boolean VAR_209 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_209 ) ; } public static int VAR_210 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_211 ; private final String VAR_212 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_4 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_5 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_41 = STRING_6 ; VAR_211 = STRING_7 ; VAR_212 = STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_41 = STRING_18 ; VAR_211 = STRING_46 ; VAR_212 = STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_41 = STRING_6 ; VAR_211 = STRING_7 ; VAR_212 = null ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_41 = STRING_33 ; VAR_211 = STRING_34 ; VAR_212 = STRING_35 ; VAR_113 = VAR_128 ; VAR_42 = STRING_36 ; VAR_43 = STRING_37 ; VAR_45 = STRING_38 ; VAR_46 = STRING_39 ; VAR_47 = STRING_40 ; VAR_44 = STRING_41 ; VAR_115 = VAR_97 ; VAR_116 = STRING_42 ; VAR_117 = STRING_43 ; VAR_118 = STRING_44 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_45 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_165 ( VAR_212 ) ; VAR_159 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_160 ) ; } } public void VAR_161 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_162 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_164 ) ; VAR_165 ( VAR_41 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_166 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_166 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_168 ( ) . VAR_169 ( VAR_170 ) ; VAR_171 ( context , view , VAR_172 ) ; VAR_173 ( ) . setText ( VAR_121 ) ; VAR_174 ( ) . setText ( VAR_175 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_176 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_178 VAR_179 = VAR_180 ( ) ; VAR_168 ( ) . VAR_181 ( VAR_179 ) ; VAR_171 ( context , view , VAR_182 ) ; VAR_173 ( ) . setText ( VAR_119 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_183 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_184 ( VAR_107 ) ) { VAR_174 ( ) . setText ( VAR_175 ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } else { final String VAR_185 = VAR_87 ( VAR_186 ) ? context . getString ( VAR_187 , VAR_188 ( ) ) : context . getString ( VAR_175 ) ; VAR_174 ( ) . setText ( VAR_185 ) ; VAR_177 ( ) . setText ( VAR_189 ) ; VAR_177 ( ) . VAR_156 ( v - > VAR_190 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_176 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_47 ) ; VAR_193 ( context , VAR_111 ) ; } private void VAR_183 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_45 ) ; VAR_194 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_190 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_46 ) ; VAR_196 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_191 ( ) { VAR_51 = true ; VAR_165 ( VAR_211 ) ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_165 ( String VAR_197 ) { VAR_198 ( VAR_197 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_164 ) , VAR_35 ) ; } private void VAR_171 ( Context context , VAR_134 view , VAR_199 VAR_200 = VAR_168 ( ) . VAR_201 ( ) ; VAR_202 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_206 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_168 ( ) . VAR_207 ( VAR_200 ) ; } private void VAR_147 ( ) { VAR_192 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_192 . record ( VAR_44 ) ; } else { VAR_192 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_208 ( boolean VAR_209 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_209 ) ; } public static int VAR_210 ( ) { return VAR_36 ; } }","I wonder if this will be easier if we can just move ""Other"" to the end and treat it as a suffix, then we don't need to add three fields fVAR_94 everyone, can just decide which suffix to add on the fly accVAR_94ding to the access point."
28,6bed6b34_e7d40185,241.0,"From a coding perspective it would be easier. But I wonder if it would be a bit of anti-pattern to name histograms like that.
+Alex, Can you please comment on this?",237.0,241.0,"[{'ab': ['// Copyright 2017 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.signin.ui;', '', 'import android.accounts.Account;', 'import android.content.Context;', 'import android.graphics.drawable.Drawable;', 'import android.text.format.DateUtils;', 'import android.view.View;', 'import android.view.ViewGroup;', '', 'import androidx.annotation.DimenRes;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.StringRes;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.preferences.SharedPreferencesManager;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.signin.services.DisplayableProfileData;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.ProfileDataCache;', 'import org.chromium.chrome.browser.signin.ui.SyncConsentActivityLauncher.AccessPoint;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.components.browser_ui.widget.impression.ImpressionTracker;', 'import org.chromium.components.browser_ui.widget.impression.OneShotImpressionListener;', 'import org.chromium.components.signin.AccountManagerFacade;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.AccountUtils;', 'import org.chromium.components.signin.base.CoreAccountInfo;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', 'import org.chromium.components.signin.metrics.SigninAccessPoint;', '', '/**', ' * A controller for configuring the sign in promo. It sets up the sign in promo depending on the', ' * context: whether there are any Google accounts on the device which have been previously signed in', ' * or not. The controller also takes care of counting impressions, recording signin related user', ' * actions and histograms.', ' */', 'public class SigninPromoController {', '    /**', '     * Receives notifications when user clicks close button in the promo.', '     */', '    public interface OnDismissListener {', '        /**', '         * Action to be performed when the promo is being dismissed.', '         */', '        void onDismiss();', '    }', '', '    private static final int MAX_TOTAL_PROMO_SHOW_COUNT = 100;', '    private static final int MAX_IMPRESSIONS_BOOKMARKS = 20;', '    private static final int MAX_IMPRESSIONS_SETTINGS = 20;', '', '    /** Suffix strings for promo shown count preference. */', '    private static final String BOOKMARKS = ""Bookmarks"";', '    private static final String NTP = ""Ntp"";', '    private static final String SETTINGS = ""Settings"";', '', '    private @Nullable DisplayableProfileData mProfileData;', '    private @Nullable ImpressionTracker mImpressionTracker;', '    private final @AccessPoint int mAccessPoint;', '    private final String mImpressionCountHistogramName;']}, {'a': ['    private final String mContinuedAfterImpressionCountHistogramName;', '    private final String mDismissedAfterImpressionCountHistogramName;'], 'b': ['    private final String mSigninAfterImpressionsHistogramName;', '    private final String mDismissedAfterImpressionsHistogramName;']}, {'ab': ['    // TODO(https://crbug.com/1254399): Remove this field. This is over counted.', '    private final @Nullable String mImpressionCountName;', '    private final String mImpressionUserActionName;', '    private final String mImpressionWithAccountUserActionName;', '    private final String mImpressionWithNoAccountUserActionName;', '    private final String mSigninWithDefaultUserActionName;', '    private final String mSigninNotDefaultUserActionName;', '    private final String mSigninNewAccountUserActionName;', '    private final @Nullable String mSyncPromoDismissedPreferenceTracker;', '    // TODO(https://crbug.com/1254399): Remove these fields related to impressions.', '    private final @Nullable String mImpressionsTilDismissHistogramName;', '    private final @Nullable String mImpressionsTilSigninButtonsHistogramName;', '    private final @Nullable String mImpressionsTilXButtonHistogramName;', '    private final @StringRes int mDescriptionStringId;', '    private final @StringRes int mDescriptionStringIdNoAccount;', '    private final SyncConsentActivityLauncher mSyncConsentActivityLauncher;', '    private boolean mWasDisplayed;', '    private boolean mWasUsed;', '', '    /**', '     * Determines whether the Sync promo can be shown.', '     * @param accessPoint The access point for which the impression limit is being checked.', '     */', '    public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return canShowBookmarkPromo();', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return canShowNTPPromo();', '            case SigninAccessPoint.RECENT_TABS:', '                // There is no impression limit or dismiss button in Recent Tabs promo.', '                return true;', '            case SigninAccessPoint.SETTINGS:', '                return canShowSettingsPromo();', '            default:', '                assert false : ""Unexpected value for access point: "" + accessPoint;', '                return false;', '        }', '    }', '', '    /**', '     * If the signin promo card has been hidden for longer than the {@link', '     * StartSurfaceConfiguration#SIGNIN_PROMO_NTP_RESET_AFTER_HOURS}, resets the impression counts,', '     * {@link ChromePreferenceKeys#SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME} and {@link', '     * ChromePreferenceKeys#SIGNIN_PROMO_NTP_LAST_SHOWN_TIME} to allow the promo card to show again.', '     */', '    public static void resetNTPSyncPromoLimitsIfHiddenForTooLong() {', '        final long currentTime = System.currentTimeMillis();', '        final long resetAfterMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_RESET_AFTER_HOURS.getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        final long lastShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, 0L);', '        if (resetAfterMs <= 0 || lastShownTime <= 0) return;', '', '        if (currentTime - lastShownTime >= resetAfterMs) {', '            SharedPreferencesManager.getInstance().writeInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS), 0);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME);', '            SharedPreferencesManager.getInstance().removeKey(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME);', '        }', '    }', '', '    private static boolean canShowBookmarkPromo() {', '        boolean isPromoDismissed = SharedPreferencesManager.getInstance().readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, false);', '        return SharedPreferencesManager.getInstance().readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.BOOKMARK_MANAGER))', '                < MAX_IMPRESSIONS_BOOKMARKS', '                && !isPromoDismissed;', '    }', '', '    private static boolean timeElapsedSinceFirstShownExceedsLimit() {', '        final long timeSinceFirstShownLimitMs =', '                StartSurfaceConfiguration.SIGNIN_PROMO_NTP_SINCE_FIRST_TIME_SHOWN_LIMIT_HOURS', '                        .getValue()', '                * DateUtils.HOUR_IN_MILLIS;', '        if (timeSinceFirstShownLimitMs <= 0) return false;', '', '        final long currentTime = System.currentTimeMillis();', '        final long firstShownTime = SharedPreferencesManager.getInstance().readLong(', '                ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, 0L);', '        return firstShownTime > 0 && currentTime - firstShownTime >= timeSinceFirstShownLimitMs;', '    }', '', '    private static boolean canShowNTPPromo() {', '        int maxImpressions = ChromeFeatureList.getFieldTrialParamByFeatureAsInt(', '                ChromeFeatureList.ENHANCED_PROTECTION_PROMO_CARD, ""MaxSigninPromoImpressions"",', '                Integer.MAX_VALUE);', '        if (SharedPreferencesManager.getInstance().readInt(', '                    getPromoShowCountPreferenceName(SigninAccessPoint.NTP_CONTENT_SUGGESTIONS))', '                        >= maxImpressions', '                || timeElapsedSinceFirstShownExceedsLimit()) {', '            return false;', '        }', '', '        if (SharedPreferencesManager.getInstance().readBoolean(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED, false)) {', '            return false;', '        }', '', '        if (ChromeFeatureList.isEnabled(ChromeFeatureList.FORCE_DISABLE_EXTENDED_SYNC_PROMOS)) {', '            return false;', '        }', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        return visibleAccount == null', '                || accountManagerFacade.canOfferExtendedSyncPromos(visibleAccount).or(false);', '    }', '', '    private static boolean canShowSettingsPromo() {', '        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();', '        boolean isPromoDismissed = preferencesManager.readBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED, false);', '        return preferencesManager.readInt(', '                       getPromoShowCountPreferenceName(SigninAccessPoint.SETTINGS))', '                < MAX_IMPRESSIONS_SETTINGS', '                && !isPromoDismissed;', '    }', '', '    // Find the visible account for sync promos', '    private static @Nullable Account getVisibleAccount() {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        @Nullable', '        Account visibleAccount = CoreAccountInfo.getAndroidAccountFrom(', '                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));', '        final AccountManagerFacade accountManagerFacade =', '                AccountManagerFacadeProvider.getInstance();', '        if (visibleAccount == null) {', '            visibleAccount =', '                    AccountUtils.getDefaultAccountIfFulfilled(accountManagerFacade.getAccounts());', '        }', '        return visibleAccount;', '    }', '', '    @VisibleForTesting', '    public static String getPromoShowCountPreferenceName(@AccessPoint int accessPoint) {', '        switch (accessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(BOOKMARKS);', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(NTP);', '            case SigninAccessPoint.SETTINGS:', '                return ChromePreferenceKeys.SYNC_PROMO_SHOW_COUNT.createKey(SETTINGS);', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + accessPoint);', '        }', '    }', '', '    /**', '     * Creates a new SigninPromoController.', '     * @param accessPoint Specifies the AccessPoint from which the promo is to be shown.', '     * @param syncConsentActivityLauncher Launcher of {@link SyncConsentActivity}.', '     */', '    public SigninPromoController(', '            @AccessPoint int accessPoint, SyncConsentActivityLauncher syncConsentActivityLauncher) {', '        mAccessPoint = accessPoint;', '        mSyncConsentActivityLauncher = syncConsentActivityLauncher;', '        switch (mAccessPoint) {', '            case SigninAccessPoint.BOOKMARK_MANAGER:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.ContinuedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.DismissedAfterImpressions"";', '                mImpressionCountName =', '                        ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_BOOKMARKS;', '                mImpressionUserActionName = ""Signin_Impression_FromBookmarkManager"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromBookmarkManager"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromBookmarkManager"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromBookmarkManager"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromBookmarkManager"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromBookmarkManager"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.BookmarkManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_bookmarks;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_bookmarks_no_account;', '                break;', '            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:', '                mImpressionCountHistogramName = ""Signin.Promo.NTP.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName =', '                        ""Signin.Promo.NTP.ContinuedAfterImpressions"";', '                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName = ""Signin.Promo.NTP.ContinuedAfterImpressions"";', '                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.NTP.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_NTP;', '                mImpressionUserActionName = ""Signin_Impression_FromNTPContentSuggestions"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromNTPContentSuggestions"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromNTPContentSuggestions"";', '                mSigninWithDefaultUserActionName =', '                        ""Signin_SigninWithDefault_FromNTPContentSuggestions"";', '                mSigninNotDefaultUserActionName =', '                        ""Signin_SigninNotDefault_FromNTPContentSuggestions"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromNTPContentSuggestions"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_PROMO_DISMISSED;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.NTPContentSuggestions.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_ntp_content_suggestions;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_ntp_content_suggestions_no_account;', '                break;', '            case SigninAccessPoint.RECENT_TABS:', '                mImpressionCountHistogramName = ""Signin.Promo.Other.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Other.ContinuedAfterImpressions"";', ""                // Recent Tabs promos can't be dismissed.""]}, {'a': ['                mDismissedAfterImpressionCountHistogramName = null;'], 'b': ['                mDismissedAfterImpressionsHistogramName = null;']}, {'ab': ['                // There is no impression limit for Recent Tabs.', '                mImpressionCountName = null;', '                mImpressionUserActionName = ""Signin_Impression_FromRecentTabs"";', '                mImpressionWithAccountUserActionName =', '                        ""Signin_ImpressionWithAccount_FromRecentTabs"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromRecentTabs"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromRecentTabs"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromRecentTabs"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromRecentTabs"";', '                mSyncPromoDismissedPreferenceTracker = null;', '                mImpressionsTilDismissHistogramName = null;', '                mImpressionsTilSigninButtonsHistogramName = null;', '                mImpressionsTilXButtonHistogramName = null;', '                mDescriptionStringId = R.string.signin_promo_description_recent_tabs;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_recent_tabs_no_account;', '                break;', '            case SigninAccessPoint.SETTINGS:', '                mImpressionCountHistogramName = ""Signin.Promo.Settings.ShownAfterImpressions"";']}, {'a': ['                mContinuedAfterImpressionCountHistogramName ='], 'b': ['                mSigninAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.ContinuedAfterImpressions"";']}, {'a': ['                mDismissedAfterImpressionCountHistogramName ='], 'b': ['                mDismissedAfterImpressionsHistogramName =']}, {'ab': ['                        ""Signin.Promo.Settings.DismissedAfterImpressions"";', '                mImpressionCountName = ChromePreferenceKeys.SIGNIN_PROMO_IMPRESSIONS_COUNT_SETTINGS;', '                mImpressionUserActionName = ""Signin_Impression_FromSettings"";', '                mImpressionWithAccountUserActionName = ""Signin_ImpressionWithAccount_FromSettings"";', '                mSigninWithDefaultUserActionName = ""Signin_SigninWithDefault_FromSettings"";', '                mSigninNotDefaultUserActionName = ""Signin_SigninNotDefault_FromSettings"";', '                // On Android, the promo does not have a button to add and account when there is', '                // already an account on the device. Always use the NoExistingAccount variant.', '                mSigninNewAccountUserActionName =', '                        ""Signin_SigninNewAccountNoExistingAccount_FromSettings"";', '                mImpressionWithNoAccountUserActionName =', '                        ""Signin_ImpressionWithNoAccount_FromSettings"";', '                mSyncPromoDismissedPreferenceTracker =', '                        ChromePreferenceKeys.SIGNIN_PROMO_SETTINGS_PERSONALIZED_DISMISSED;', '                mImpressionsTilDismissHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilDismiss"";', '                mImpressionsTilSigninButtonsHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilSigninButtons"";', '                mImpressionsTilXButtonHistogramName =', '                        ""MobileSignInPromo.SettingsManager.ImpressionsTilXButton"";', '                mDescriptionStringId = R.string.signin_promo_description_settings;', '                mDescriptionStringIdNoAccount =', '                        R.string.signin_promo_description_settings_no_account;', '                break;', '            default:', '                throw new IllegalArgumentException(', '                        ""Unexpected value for access point: "" + mAccessPoint);', '        }', '    }', '', '    /**', '     * Sets up the sync promo view.', '     * @param profileDataCache The {@link ProfileDataCache} that stores profile data.', '     * @param view The {@link PersonalizedSigninPromoView} that should be set up.', '     * @param listener The {@link SigninPromoController.OnDismissListener} to be set to the view.', '     */', '    public void setUpSyncPromoView(ProfileDataCache profileDataCache,', '            PersonalizedSigninPromoView view, SigninPromoController.OnDismissListener listener) {', '        final IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(', '                Profile.getLastUsedRegularProfile());', '        assert !identityManager.hasPrimaryAccount(ConsentLevel.SYNC) : ""Sync is already enabled!"";', '', '        final @Nullable Account visibleAccount = getVisibleAccount();', '        // Set up the sync promo', '        if (visibleAccount == null) {', '            setupPromoView(view, /* profileData= */ null, listener);', '            return;', '        }', '        setupPromoView(', '                view, profileDataCache.getProfileDataOrDefault(visibleAccount.name), listener);', '    }', '', '    /**', '     * Called when the signin promo is destroyed.', '     */', '    public void onPromoDestroyed() {', '        if (!mWasDisplayed || mWasUsed || mImpressionsTilDismissHistogramName == null) {', '            return;', '        }', '        RecordHistogram.recordCount100Histogram(', '                mImpressionsTilDismissHistogramName, getNumImpressions());', '    }', '', '    /**', '     * Configures the signin promo view and resets the impression tracker. If this controller has', '     * been previously set up.', '     * @param view The view in which the promo will be added.', '     * @param profileData If not null, the promo will be configured to be in the hot state, using', '     *         the account image, email and full name of the user to set the picture and the text of', '     *         the promo appropriately. Otherwise, the promo will be in the cold state.', '     * @param onDismissListener Listener which handles the action of dismissing the promo. A null', '     *         onDismissListener marks that the promo is not dismissible and as a result the close', '     *         button is hidden.', '     */', '    private void setupPromoView(PersonalizedSigninPromoView view,', '            final @Nullable DisplayableProfileData profileData,', '            final @Nullable OnDismissListener onDismissListener) {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '        mImpressionTracker = new ImpressionTracker(view);', '        mImpressionTracker.setListener(', '                new OneShotImpressionListener(this::recordSigninPromoImpression));', '', '        mProfileData = profileData;', '        mWasDisplayed = true;', '        if (mProfileData == null) {', '            setupColdState(view);', '        } else {', '            setupHotState(view);', '        }', '', '        if (onDismissListener != null) {', '            view.getDismissButton().setVisibility(View.VISIBLE);', '            view.getDismissButton().setOnClickListener(promoView -> {', '                assert mImpressionsTilXButtonHistogramName != null;', '                assert mSyncPromoDismissedPreferenceTracker != null;', '                mWasUsed = true;', '                RecordHistogram.recordCount100Histogram(', '                        mImpressionsTilXButtonHistogramName, getNumImpressions());', '                SharedPreferencesManager.getInstance().writeBoolean(', '                        mSyncPromoDismissedPreferenceTracker, true);']}, {'a': ['                recordImpressionCountHistogram(mDismissedAfterImpressionCountHistogramName);'], 'b': ['                recordImpressionCountHistogram(mDismissedAfterImpressionsHistogramName);']}, {'ab': ['                onDismissListener.onDismiss();', '            });', '        } else {', '            view.getDismissButton().setVisibility(View.GONE);', '        }', '    }', '', '    /**', ""     * Should be called when the view is not in use anymore (e.g. it's being recycled)."", '     */', '    public void detach() {', '        if (mImpressionTracker != null) {', '            mImpressionTracker.setListener(null);', '            mImpressionTracker = null;', '        }', '    }', '', '    /** Increases promo show count by one. */', '    public void increasePromoShowCount() {', '        if (mAccessPoint != SigninAccessPoint.RECENT_TABS) {', '            SharedPreferencesManager.getInstance().incrementInt(', '                    getPromoShowCountPreferenceName(mAccessPoint));', '        }', '        SharedPreferencesManager.getInstance().incrementInt(', '                ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT);', '        recordImpressionCountHistogram(mImpressionCountHistogramName);', '', '        if (mAccessPoint == SigninAccessPoint.NTP_CONTENT_SUGGESTIONS) {', '            final long currentTime = System.currentTimeMillis();', '            if (SharedPreferencesManager.getInstance().readLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME)', '                    == 0) {', '                SharedPreferencesManager.getInstance().writeLong(', '                        ChromePreferenceKeys.SIGNIN_PROMO_NTP_FIRST_SHOWN_TIME, currentTime);', '            }', '            SharedPreferencesManager.getInstance().writeLong(', '                    ChromePreferenceKeys.SIGNIN_PROMO_NTP_LAST_SHOWN_TIME, currentTime);', '        }', '    }', '', '    private void setupColdState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        view.getImage().setImageResource(R.drawable.chrome_sync_logo);', '        setImageSize(context, view, R.dimen.signin_promo_cold_state_image_size);', '', '        view.getDescription().setText(mDescriptionStringIdNoAccount);', '', '        view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '        view.getPrimaryButton().setOnClickListener(v -> signinWithNewAccount(context));', '', '        view.getSecondaryButton().setVisibility(View.GONE);', '    }', '', '    private void setupHotState(PersonalizedSigninPromoView view) {', '        final Context context = view.getContext();', '        Drawable accountImage = mProfileData.getImage();', '        view.getImage().setImageDrawable(accountImage);', '        setImageSize(context, view, R.dimen.signin_promo_account_image_size);', '', '        view.getDescription().setText(mDescriptionStringId);', '', '        view.getPrimaryButton().setOnClickListener(v -> signinWithDefaultAccount(context));', '        if (IdentityServicesProvider.get()', '                        .getIdentityManager(Profile.getLastUsedRegularProfile())', '                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {', '            view.getPrimaryButton().setText(R.string.sync_promo_turn_on_sync);', '            view.getSecondaryButton().setVisibility(View.GONE);', '        } else {', '            final String primaryButtonText =', '                    ChromeFeatureList.isEnabled(', '                            ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY_PROMOS)', '                    ? context.getString(R.string.signin_promo_continue_as,', '                            mProfileData.getGivenNameOrFullNameOrEmail())', '                    : context.getString(R.string.sync_promo_turn_on_sync);', '            view.getPrimaryButton().setText(primaryButtonText);', '', '            view.getSecondaryButton().setText(R.string.signin_promo_choose_another_account);', '            view.getSecondaryButton().setOnClickListener(v -> signinWithNotDefaultAccount(context));', '            view.getSecondaryButton().setVisibility(View.VISIBLE);', '        }', '    }', '', '    private int getNumImpressions() {', '        return SharedPreferencesManager.getInstance().readInt(mImpressionCountName);', '    }', '', '    private void signinWithNewAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNewAccountUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoAddAccountFlow(context, mAccessPoint);', '    }', '', '    private void signinWithDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninWithDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoDefaultFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void signinWithNotDefaultAccount(Context context) {', '        recordSigninButtonUsed();', '        RecordUserAction.record(mSigninNotDefaultUserActionName);', '        mSyncConsentActivityLauncher.launchActivityForPromoChooseAccountFlow(', '                context, mAccessPoint, mProfileData.getAccountEmail());', '    }', '', '    private void recordSigninButtonUsed() {', '        mWasUsed = true;']}, {'a': ['        recordImpressionCountHistogram(mContinuedAfterImpressionCountHistogramName);'], 'b': ['        recordImpressionCountHistogram(mSigninAfterImpressionsHistogramName);']}, {'ab': ['        if (mImpressionsTilSigninButtonsHistogramName != null) {', '            RecordHistogram.recordCount100Histogram(', '                    mImpressionsTilSigninButtonsHistogramName, getNumImpressions());', '        }', '    }', '', '    private void recordImpressionCountHistogram(String histogramName) {', '        RecordHistogram.recordExactLinearHistogram(histogramName,', '                SharedPreferencesManager.getInstance().readInt(', '                        ChromePreferenceKeys.SYNC_PROMO_TOTAL_SHOW_COUNT),', '                MAX_TOTAL_PROMO_SHOW_COUNT);', '    }', '', '    private void setImageSize(', '            Context context, PersonalizedSigninPromoView view, @DimenRes int dimenResId) {', '        ViewGroup.LayoutParams layoutParams = view.getImage().getLayoutParams();', '        layoutParams.height = context.getResources().getDimensionPixelSize(dimenResId);', '        layoutParams.width = context.getResources().getDimensionPixelSize(dimenResId);', '        view.getImage().setLayoutParams(layoutParams);', '    }', '', '    private void recordSigninPromoImpression() {', '        RecordUserAction.record(mImpressionUserActionName);', '        if (mProfileData == null) {', '            RecordUserAction.record(mImpressionWithNoAccountUserActionName);', '        } else {', '            RecordUserAction.record(mImpressionWithAccountUserActionName);', '        }', '', '        // If mImpressionCountName is not null then we should record impressions.', '        if (mImpressionCountName != null) {', '            SharedPreferencesManager.getInstance().incrementInt(mImpressionCountName);', '        }', '    }', '', '    @VisibleForTesting', '    public static void setPrefSigninPromoDeclinedBookmarksForTests(boolean isDeclined) {', '        SharedPreferencesManager.getInstance().writeBoolean(', '                ChromePreferenceKeys.SIGNIN_PROMO_BOOKMARKS_DECLINED, isDeclined);', '    }', '', '    @VisibleForTesting', '    public static int getMaxImpressionsBookmarksForTests() {', '        return MAX_IMPRESSIONS_BOOKMARKS;', '    }', '}', '']}]",chromium%2Fsrc~main~I23061b243395b039a3757d5b40679f388a32c23f,2c6d8db935d052a5ccac1cdbbba574f7c342219a,chrome/browser/signin/ui/android/java/src/org/chromium/chrome/browser/signin/ui/SigninPromoController.java,6bed6b34_e7d40185_before.java,6bed6b34_e7d40185_after.java,SigninPromoController::SigninPromoController,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_4 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_5 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_41 = STRING_6 ; STRING_7 ; STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_41 = STRING_18 ; STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_41 = STRING_6 ; STRING_7 ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_41 = STRING_33 ; STRING_34 ; STRING_35 ; VAR_113 = VAR_128 ; VAR_42 = STRING_36 ; VAR_43 = STRING_37 ; VAR_45 = STRING_38 ; VAR_46 = STRING_39 ; VAR_47 = STRING_40 ; VAR_44 = STRING_41 ; VAR_115 = VAR_97 ; VAR_116 = STRING_42 ; VAR_117 = STRING_43 ; VAR_118 = STRING_44 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_45 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_159 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_160 ) ; } } public void VAR_161 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_162 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_164 ) ; VAR_165 ( VAR_41 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_166 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_166 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_168 ( ) . VAR_169 ( VAR_170 ) ; VAR_171 ( context , view , VAR_172 ) ; VAR_173 ( ) . setText ( VAR_121 ) ; VAR_174 ( ) . setText ( VAR_175 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_176 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_178 VAR_179 = VAR_180 ( ) ; VAR_168 ( ) . VAR_181 ( VAR_179 ) ; VAR_171 ( context , view , VAR_182 ) ; VAR_173 ( ) . setText ( VAR_119 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_183 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_184 ( VAR_107 ) ) { VAR_174 ( ) . setText ( VAR_175 ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } else { final String VAR_185 = VAR_87 ( VAR_186 ) ? context . getString ( VAR_187 , VAR_188 ( ) ) : context . getString ( VAR_175 ) ; VAR_174 ( ) . setText ( VAR_185 ) ; VAR_177 ( ) . setText ( VAR_189 ) ; VAR_177 ( ) . VAR_156 ( v - > VAR_190 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_176 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_47 ) ; VAR_193 ( context , VAR_111 ) ; } private void VAR_183 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_45 ) ; VAR_194 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_190 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_46 ) ; VAR_196 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_191 ( ) { VAR_51 = true ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_165 ( String VAR_197 ) { VAR_198 ( VAR_197 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_164 ) , VAR_35 ) ; } private void VAR_171 ( Context context , VAR_134 view , VAR_199 VAR_200 = VAR_168 ( ) . VAR_201 ( ) ; VAR_202 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_206 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_168 ( ) . VAR_207 ( VAR_200 ) ; } private void VAR_147 ( ) { VAR_192 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_192 . record ( VAR_44 ) ; } else { VAR_192 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_208 ( boolean VAR_209 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_209 ) ; } public static int VAR_210 ( ) { return VAR_36 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 . Context ; import VAR_4 ; import VAR_5 ; import VAR_6 . View ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; public class VAR_32 { public interface VAR_33 { void VAR_34 ( ) ; } private static final int VAR_35 = 100 ; private static final int VAR_36 = INT_1 ; private static final int VAR_37 = INT_1 ; private static final String VAR_38 = STRING_1 ; private static final String VAR_39 = STRING_2 ; private static final String VAR_40 = STRING_3 ; private private private final private final String VAR_41 ; private final String VAR_211 ; private final String VAR_212 ; private final private final String VAR_42 ; private final String VAR_43 ; private final String VAR_44 ; private final String VAR_45 ; private final String VAR_46 ; private final String VAR_47 ; private final private final private final private final private final private final private final VAR_48 VAR_49 ; private boolean VAR_50 ; private boolean VAR_51 ; public static boolean VAR_52 ( switch ( VAR_53 ) { case VAR_54 : return VAR_55 ( ) ; case VAR_56 : return VAR_57 ( ) ; case VAR_58 : return true ; case VAR_59 : return VAR_60 ( ) ; default : assert false : STRING_4 + VAR_53 ; return false ; } } public static void VAR_61 ( ) { final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_63 = VAR_64 . getValue ( ) * VAR_65 ; final long VAR_66 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_69 , INT_2 ) ; if ( VAR_63 <= 0 || VAR_66 <= 0 ) return ; if ( VAR_62 - VAR_66 >= VAR_63 ) { VAR_67 . getInstance ( ) . VAR_70 ( VAR_71 ( VAR_56 ) , 0 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_73 ) ; VAR_67 . getInstance ( ) . VAR_72 ( VAR_69 ) ; } } private static boolean VAR_55 ( ) { boolean VAR_74 = VAR_67 . getInstance ( ) . VAR_75 ( VAR_76 , false ) ; return VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_54 ) ) < VAR_36 && ! VAR_74 ; } private static boolean VAR_78 ( ) { final long VAR_79 = VAR_80 . getValue ( ) * VAR_65 ; if ( VAR_79 <= 0 ) return false ; final long VAR_62 = System . currentTimeMillis ( ) ; final long VAR_81 = VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 , INT_2 ) ; return VAR_81 > 0 && VAR_62 - VAR_81 >= VAR_79 ; } private static boolean VAR_57 ( ) { int VAR_82 = VAR_83 ( VAR_84 , STRING_5 , VAR_85 ) ; if ( VAR_67 . getInstance ( ) . VAR_77 ( VAR_71 ( VAR_56 ) ) >= VAR_82 || VAR_78 ( ) ) { return false ; } if ( VAR_67 . getInstance ( ) . VAR_75 ( VAR_86 , false ) ) { return false ; } if ( VAR_87 ( VAR_88 ) ) { return false ; } final final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; return VAR_92 == null || VAR_93 ( VAR_92 ) . VAR_94 ( false ) ; } private static boolean VAR_60 ( ) { VAR_67 VAR_95 = VAR_67 . getInstance ( ) ; boolean VAR_74 = VAR_96 ( VAR_97 , false ) ; return VAR_98 ( VAR_71 ( VAR_59 ) ) < VAR_37 && ! VAR_74 ; } private static final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; VAR_104 VAR_92 = VAR_105 ( VAR_106 ( VAR_107 ) ) ; final VAR_89 VAR_90 = VAR_91 . getInstance ( ) ; if ( VAR_92 == null ) { VAR_92 = VAR_108 ( VAR_109 ( ) ) ; } return VAR_92 ; } public static String VAR_71 ( switch ( VAR_53 ) { case VAR_54 : return VAR_110 ( VAR_38 ) ; case VAR_56 : return VAR_110 ( VAR_39 ) ; case VAR_59 : return VAR_110 ( VAR_40 ) ; default : throw new IllegalArgumentException ( STRING_4 + VAR_53 ) ; } } public VAR_32 ( VAR_111 = VAR_53 ; VAR_49 = VAR_112 ; switch ( VAR_111 ) { case VAR_54 : VAR_41 = STRING_6 ; VAR_211 = STRING_7 ; VAR_212 = STRING_8 ; VAR_113 = VAR_114 ; VAR_42 = STRING_9 ; VAR_43 = STRING_10 ; VAR_44 = STRING_11 ; VAR_45 = STRING_12 ; VAR_46 = STRING_13 ; VAR_47 = STRING_14 ; VAR_115 = VAR_76 ; VAR_116 = STRING_15 ; VAR_117 = STRING_16 ; VAR_118 = STRING_17 ; VAR_119 = VAR_120 ; VAR_121 = VAR_122 ; break ; case VAR_56 : VAR_41 = STRING_18 ; VAR_211 = STRING_46 ; VAR_212 = STRING_19 ; VAR_113 = VAR_123 ; VAR_42 = STRING_20 ; VAR_43 = STRING_21 ; VAR_44 = STRING_22 ; VAR_45 = STRING_23 ; VAR_46 = STRING_24 ; VAR_47 = STRING_25 ; VAR_115 = VAR_86 ; VAR_116 = null ; VAR_117 = null ; VAR_118 = STRING_26 ; VAR_119 = VAR_124 ; VAR_121 = VAR_125 ; break ; case VAR_58 : VAR_41 = STRING_6 ; VAR_211 = STRING_7 ; VAR_212 = null ; VAR_113 = null ; VAR_42 = STRING_27 ; VAR_43 = STRING_28 ; VAR_44 = STRING_29 ; VAR_45 = STRING_30 ; VAR_46 = STRING_31 ; VAR_47 = STRING_32 ; VAR_115 = null ; VAR_116 = null ; VAR_117 = null ; VAR_118 = null ; VAR_119 = VAR_126 ; VAR_121 = VAR_127 ; break ; case VAR_59 : VAR_41 = STRING_33 ; VAR_211 = STRING_34 ; VAR_212 = STRING_35 ; VAR_113 = VAR_128 ; VAR_42 = STRING_36 ; VAR_43 = STRING_37 ; VAR_45 = STRING_38 ; VAR_46 = STRING_39 ; VAR_47 = STRING_40 ; VAR_44 = STRING_41 ; VAR_115 = VAR_97 ; VAR_116 = STRING_42 ; VAR_117 = STRING_43 ; VAR_118 = STRING_44 ; VAR_119 = VAR_129 ; VAR_121 = VAR_130 ; break ; default : throw new IllegalArgumentException ( STRING_4 + VAR_111 ) ; } } public void VAR_131 ( VAR_132 VAR_133 , VAR_134 view , VAR_135 listener ) { final VAR_99 VAR_100 = VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) ; assert ! VAR_136 ( VAR_137 ) : STRING_45 ; final if ( VAR_92 == null ) { VAR_138 ( view , null , listener ) ; return ; } VAR_138 ( view , VAR_139 ( VAR_92 . name ) , listener ) ; } public void VAR_140 ( ) { if ( ! VAR_50 || VAR_51 || VAR_116 == null ) { return ; } VAR_141 ( VAR_116 , VAR_142 ( ) ) ; } private void VAR_138 ( VAR_134 view , final final if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } VAR_143 = new VAR_145 ( view ) ; VAR_144 ( new VAR_146 ( this : : VAR_147 ) ) ; VAR_148 = VAR_149 ; VAR_50 = true ; if ( VAR_148 == null ) { VAR_150 ( view ) ; } else { VAR_151 ( view ) ; } if ( VAR_152 != null ) { VAR_153 ( ) . VAR_154 ( VAR_155 ) ; VAR_153 ( ) . VAR_156 ( VAR_157 - > { assert VAR_118 != null ; assert VAR_115 != null ; VAR_51 = true ; VAR_141 ( VAR_118 , VAR_142 ( ) ) ; VAR_67 . getInstance ( ) . VAR_158 ( VAR_115 , true ) ; VAR_165 ( VAR_212 ) ; VAR_159 ( ) ; } ) ; } else { VAR_153 ( ) . VAR_154 ( VAR_160 ) ; } } public void VAR_161 ( ) { if ( VAR_143 != null ) { VAR_144 ( null ) ; VAR_143 = null ; } } public void VAR_162 ( ) { if ( VAR_111 != VAR_58 ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_71 ( VAR_111 ) ) ; } VAR_67 . getInstance ( ) . VAR_163 ( VAR_164 ) ; VAR_165 ( VAR_41 ) ; if ( VAR_111 == VAR_56 ) { final long VAR_62 = System . currentTimeMillis ( ) ; if ( VAR_67 . getInstance ( ) . VAR_68 ( VAR_73 ) == 0 ) { VAR_67 . getInstance ( ) . VAR_166 ( VAR_73 , VAR_62 ) ; } VAR_67 . getInstance ( ) . VAR_166 ( VAR_69 , VAR_62 ) ; } } private void VAR_150 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_168 ( ) . VAR_169 ( VAR_170 ) ; VAR_171 ( context , view , VAR_172 ) ; VAR_173 ( ) . setText ( VAR_121 ) ; VAR_174 ( ) . setText ( VAR_175 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_176 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } private void VAR_151 ( VAR_134 view ) { final Context context = VAR_167 ( ) ; VAR_178 VAR_179 = VAR_180 ( ) ; VAR_168 ( ) . VAR_181 ( VAR_179 ) ; VAR_171 ( context , view , VAR_182 ) ; VAR_173 ( ) . setText ( VAR_119 ) ; VAR_174 ( ) . VAR_156 ( v - > VAR_183 ( context ) ) ; if ( VAR_101 . get ( ) . VAR_102 ( VAR_103 ( ) ) . VAR_184 ( VAR_107 ) ) { VAR_174 ( ) . setText ( VAR_175 ) ; VAR_177 ( ) . VAR_154 ( VAR_160 ) ; } else { final String VAR_185 = VAR_87 ( VAR_186 ) ? context . getString ( VAR_187 , VAR_188 ( ) ) : context . getString ( VAR_175 ) ; VAR_174 ( ) . setText ( VAR_185 ) ; VAR_177 ( ) . setText ( VAR_189 ) ; VAR_177 ( ) . VAR_156 ( v - > VAR_190 ( context ) ) ; VAR_177 ( ) . VAR_154 ( VAR_155 ) ; } } private int VAR_142 ( ) { return VAR_67 . getInstance ( ) . VAR_77 ( VAR_113 ) ; } private void VAR_176 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_47 ) ; VAR_193 ( context , VAR_111 ) ; } private void VAR_183 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_45 ) ; VAR_194 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_190 ( Context context ) { VAR_191 ( ) ; VAR_192 . record ( VAR_46 ) ; VAR_196 ( context , VAR_111 , VAR_195 ( ) ) ; } private void VAR_191 ( ) { VAR_51 = true ; VAR_165 ( VAR_211 ) ; if ( VAR_117 != null ) { VAR_141 ( VAR_117 , VAR_142 ( ) ) ; } } private void VAR_165 ( String VAR_197 ) { VAR_198 ( VAR_197 , VAR_67 . getInstance ( ) . VAR_77 ( VAR_164 ) , VAR_35 ) ; } private void VAR_171 ( Context context , VAR_134 view , VAR_199 VAR_200 = VAR_168 ( ) . VAR_201 ( ) ; VAR_202 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_206 = VAR_203 ( ) . VAR_204 ( VAR_205 ) ; VAR_168 ( ) . VAR_207 ( VAR_200 ) ; } private void VAR_147 ( ) { VAR_192 . record ( VAR_42 ) ; if ( VAR_148 == null ) { VAR_192 . record ( VAR_44 ) ; } else { VAR_192 . record ( VAR_43 ) ; } if ( VAR_113 != null ) { VAR_67 . getInstance ( ) . VAR_163 ( VAR_113 ) ; } } public static void VAR_208 ( boolean VAR_209 ) { VAR_67 . getInstance ( ) . VAR_158 ( VAR_76 , VAR_209 ) ; } public static int VAR_210 ( ) { return VAR_36 ; } }","From a coding perspective it would be easier. But I wonder if it would be a bit of anti-pattern to name histograms like that.
+Alex, Can you please comment on this?"
36,d9bf9954_21f98b78,64.0,"Why this late change?
1) Did you mean != 0 in the check?
2) It looks like it can never be 0 anyway? https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/data/AuthenticatorOption.java;l=85;drc=0f7b26dc2dcf3aa5098a852fc2c02329b25ad98d",57.0,64.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', 'import android.view.ViewGroup;', 'import android.widget.ImageView;', 'import android.widget.RadioButton;', 'import android.widget.TextView;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', 'import androidx.recyclerview.widget.RecyclerView.ViewHolder;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', '', 'import java.util.List;', '', '/** Adapter for showing the authenticator options in a {@link RecyclerView}. */', 'public class AuthenticatorOptionsAdapter extends RecyclerView.Adapter<ViewHolder> {', '    /** Interface for callers to be notified when an item is selected. */', '    public interface ItemClickListener {', '        void onItemClicked(AuthenticatorOption option);', '    }', '', '    private final List<AuthenticatorOption> mAuthenticatorOptions;', '    private final ItemClickListener mItemClickListener;', '    private final Context mContext;', '', '    private int mSelectedAuthenticatorIndex;', '', '    public AuthenticatorOptionsAdapter(Context context,', '            List<AuthenticatorOption> authenticatorOptions, ItemClickListener itemClickListener) {', '        this.mAuthenticatorOptions = authenticatorOptions;', '        this.mItemClickListener = itemClickListener;', '        this.mContext = context;', '    }', '', '    @Override', '    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {', '        View view = LayoutInflater.from(parent.getContext())', '                            .inflate(R.layout.authenticator_option, parent, false);', '        return new AuthenticatorOptionViewHolder(view, mItemClickListener);', '    }', '', '    @Override', '    public void onBindViewHolder(ViewHolder viewHolder, final int position) {', '        AuthenticatorOptionViewHolder holder = (AuthenticatorOptionViewHolder) viewHolder;', '        AuthenticatorOption option = mAuthenticatorOptions.get(position);', '        if (getItemCount() == 1) {', '            holder.getRadioButton().setVisibility(View.GONE);', '            int iconResId = option.getIconResId();']}, {'a': ['            if (iconResId != 0) {'], 'b': ['            if (iconResId == 0) {']}, {'ab': ['                holder.getIconImageView().setVisibility(View.VISIBLE);', '                holder.getIconImageView().setImageDrawable(ResourcesCompat.getDrawable(', '                        mContext.getResources(), iconResId, mContext.getTheme()));', '            } else {', '                holder.getIconImageView().setVisibility(View.GONE);', '            }', '        } else {', '            holder.getIconImageView().setVisibility(View.GONE);', '            holder.getRadioButton().setVisibility(View.VISIBLE);', '            holder.getRadioButton().setChecked(position == mSelectedAuthenticatorIndex);', '        }', '        holder.getTitleTextView().setText(option.getTitle());', '        holder.getDescriptionTextView().setText(option.getDescription());', '    }', '', '    @Override', '    public int getItemCount() {', '        return mAuthenticatorOptions.size();', '    }', '', '    class AuthenticatorOptionViewHolder extends RecyclerView.ViewHolder {', '        private final TextView mTitleTextView;', '        private final TextView mDescriptionTextView;', '        private final ImageView mIconImageView;', '        private final RadioButton mRadioButton;', '', '        AuthenticatorOptionViewHolder(View view, ItemClickListener itemClickListener) {', '            super(view);', '            mTitleTextView = view.findViewById(R.id.authenticator_option_title);', '            mDescriptionTextView = view.findViewById(R.id.authenticator_option_description);', '            mIconImageView = view.findViewById(R.id.authenticator_option_icon);', '            mRadioButton = view.findViewById(R.id.authenticator_option_radio_btn);', '            mRadioButton.setOnClickListener(radioButtonView -> {', '                int lastAuthenticatorIndex = mSelectedAuthenticatorIndex;', '                mSelectedAuthenticatorIndex = getAdapterPosition();', '                // Update both the previous and the current selection so that the radio button is', '                // updated.', '                notifyItemChanged(lastAuthenticatorIndex);', '                notifyItemChanged(mSelectedAuthenticatorIndex);', '                itemClickListener.onItemClicked(', '                        mAuthenticatorOptions.get(mSelectedAuthenticatorIndex));', '            });', '        }', '', '        public TextView getTitleTextView() {', '            return mTitleTextView;', '        }', '', '        public TextView getDescriptionTextView() {', '            return mDescriptionTextView;', '        }', '', '        public ImageView getIconImageView() {', '            return mIconImageView;', '        }', '', '        public RadioButton getRadioButton() {', '            return mRadioButton;', '        }', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,2125e5b302625020ff4247f18c2050f913aa9a7c,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorOptionsAdapter.java,d9bf9954_21f98b78_before.java,d9bf9954_21f98b78_after.java,AuthenticatorOptionsAdapter::onBindViewHolder,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; if ( VAR_43 != 0 ) { VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","Why this late change?
1) Did you mean != 0 in the check?
2) It looks like it can never be 0 anyway? https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/data/VAR_20.java;l=85;drc=0f7b26dc2dcf3aa5098a852fc2c02329b25ad98d"
37,e39333af_38929a00,64.0,"This change came out of this discussion: https://chromium-review.googlesource.com/c/chromium/src/+/3192612/comments/1352903e_913850c6

I've fixed the logic error, and I've removed the assertion from AuthenticatorOption.java.

Thanks for catching this!",57.0,64.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', 'import android.view.ViewGroup;', 'import android.widget.ImageView;', 'import android.widget.RadioButton;', 'import android.widget.TextView;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', 'import androidx.recyclerview.widget.RecyclerView.ViewHolder;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', '', 'import java.util.List;', '', '/** Adapter for showing the authenticator options in a {@link RecyclerView}. */', 'public class AuthenticatorOptionsAdapter extends RecyclerView.Adapter<ViewHolder> {', '    /** Interface for callers to be notified when an item is selected. */', '    public interface ItemClickListener {', '        void onItemClicked(AuthenticatorOption option);', '    }', '', '    private final List<AuthenticatorOption> mAuthenticatorOptions;', '    private final ItemClickListener mItemClickListener;', '    private final Context mContext;', '', '    private int mSelectedAuthenticatorIndex;', '', '    public AuthenticatorOptionsAdapter(Context context,', '            List<AuthenticatorOption> authenticatorOptions, ItemClickListener itemClickListener) {', '        this.mAuthenticatorOptions = authenticatorOptions;', '        this.mItemClickListener = itemClickListener;', '        this.mContext = context;', '    }', '', '    @Override', '    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {', '        View view = LayoutInflater.from(parent.getContext())', '                            .inflate(R.layout.authenticator_option, parent, false);', '        return new AuthenticatorOptionViewHolder(view, mItemClickListener);', '    }', '', '    @Override', '    public void onBindViewHolder(ViewHolder viewHolder, final int position) {', '        AuthenticatorOptionViewHolder holder = (AuthenticatorOptionViewHolder) viewHolder;', '        AuthenticatorOption option = mAuthenticatorOptions.get(position);', '        if (getItemCount() == 1) {', '            holder.getRadioButton().setVisibility(View.GONE);', '            int iconResId = option.getIconResId();']}, {'a': ['            if (iconResId != 0) {'], 'b': ['            if (iconResId == 0) {']}, {'ab': ['                holder.getIconImageView().setVisibility(View.VISIBLE);', '                holder.getIconImageView().setImageDrawable(ResourcesCompat.getDrawable(', '                        mContext.getResources(), iconResId, mContext.getTheme()));', '            } else {', '                holder.getIconImageView().setVisibility(View.GONE);', '            }', '        } else {', '            holder.getIconImageView().setVisibility(View.GONE);', '            holder.getRadioButton().setVisibility(View.VISIBLE);', '            holder.getRadioButton().setChecked(position == mSelectedAuthenticatorIndex);', '        }', '        holder.getTitleTextView().setText(option.getTitle());', '        holder.getDescriptionTextView().setText(option.getDescription());', '    }', '', '    @Override', '    public int getItemCount() {', '        return mAuthenticatorOptions.size();', '    }', '', '    class AuthenticatorOptionViewHolder extends RecyclerView.ViewHolder {', '        private final TextView mTitleTextView;', '        private final TextView mDescriptionTextView;', '        private final ImageView mIconImageView;', '        private final RadioButton mRadioButton;', '', '        AuthenticatorOptionViewHolder(View view, ItemClickListener itemClickListener) {', '            super(view);', '            mTitleTextView = view.findViewById(R.id.authenticator_option_title);', '            mDescriptionTextView = view.findViewById(R.id.authenticator_option_description);', '            mIconImageView = view.findViewById(R.id.authenticator_option_icon);', '            mRadioButton = view.findViewById(R.id.authenticator_option_radio_btn);', '            mRadioButton.setOnClickListener(radioButtonView -> {', '                int lastAuthenticatorIndex = mSelectedAuthenticatorIndex;', '                mSelectedAuthenticatorIndex = getAdapterPosition();', '                // Update both the previous and the current selection so that the radio button is', '                // updated.', '                notifyItemChanged(lastAuthenticatorIndex);', '                notifyItemChanged(mSelectedAuthenticatorIndex);', '                itemClickListener.onItemClicked(', '                        mAuthenticatorOptions.get(mSelectedAuthenticatorIndex));', '            });', '        }', '', '        public TextView getTitleTextView() {', '            return mTitleTextView;', '        }', '', '        public TextView getDescriptionTextView() {', '            return mDescriptionTextView;', '        }', '', '        public ImageView getIconImageView() {', '            return mIconImageView;', '        }', '', '        public RadioButton getRadioButton() {', '            return mRadioButton;', '        }', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,2125e5b302625020ff4247f18c2050f913aa9a7c,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorOptionsAdapter.java,e39333af_38929a00_before.java,e39333af_38929a00_after.java,AuthenticatorOptionsAdapter::onBindViewHolder,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; if ( VAR_43 != 0 ) { VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","This change came out of this discussion: https://chromium-review.googlesource.com/c/chromium/src/+/3192612/comments/1352903e_913850c6

I've fixed the logic error, and I've removed the assertion from VAR_20.java.

Thanks for catching this!"
38,ccc0eec1_c716bbe1,64.0,"I missed that it can't be 0 anyway. In that case, we'd need to either throw an exception while creating the AuthenticatorSelectionDialogBridge or allow the iconResId to be 0.

Personally, I'd prefer the latter as when there are multiple authenticators, then we use radio buttons instead of the iconResId.",57.0,64.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', 'import android.view.ViewGroup;', 'import android.widget.ImageView;', 'import android.widget.RadioButton;', 'import android.widget.TextView;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', 'import androidx.recyclerview.widget.RecyclerView.ViewHolder;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', '', 'import java.util.List;', '', '/** Adapter for showing the authenticator options in a {@link RecyclerView}. */', 'public class AuthenticatorOptionsAdapter extends RecyclerView.Adapter<ViewHolder> {', '    /** Interface for callers to be notified when an item is selected. */', '    public interface ItemClickListener {', '        void onItemClicked(AuthenticatorOption option);', '    }', '', '    private final List<AuthenticatorOption> mAuthenticatorOptions;', '    private final ItemClickListener mItemClickListener;', '    private final Context mContext;', '', '    private int mSelectedAuthenticatorIndex;', '', '    public AuthenticatorOptionsAdapter(Context context,', '            List<AuthenticatorOption> authenticatorOptions, ItemClickListener itemClickListener) {', '        this.mAuthenticatorOptions = authenticatorOptions;', '        this.mItemClickListener = itemClickListener;', '        this.mContext = context;', '    }', '', '    @Override', '    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {', '        View view = LayoutInflater.from(parent.getContext())', '                            .inflate(R.layout.authenticator_option, parent, false);', '        return new AuthenticatorOptionViewHolder(view, mItemClickListener);', '    }', '', '    @Override', '    public void onBindViewHolder(ViewHolder viewHolder, final int position) {', '        AuthenticatorOptionViewHolder holder = (AuthenticatorOptionViewHolder) viewHolder;', '        AuthenticatorOption option = mAuthenticatorOptions.get(position);', '        if (getItemCount() == 1) {', '            holder.getRadioButton().setVisibility(View.GONE);', '            int iconResId = option.getIconResId();']}, {'a': ['            if (iconResId != 0) {'], 'b': ['            if (iconResId == 0) {']}, {'ab': ['                holder.getIconImageView().setVisibility(View.VISIBLE);', '                holder.getIconImageView().setImageDrawable(ResourcesCompat.getDrawable(', '                        mContext.getResources(), iconResId, mContext.getTheme()));', '            } else {', '                holder.getIconImageView().setVisibility(View.GONE);', '            }', '        } else {', '            holder.getIconImageView().setVisibility(View.GONE);', '            holder.getRadioButton().setVisibility(View.VISIBLE);', '            holder.getRadioButton().setChecked(position == mSelectedAuthenticatorIndex);', '        }', '        holder.getTitleTextView().setText(option.getTitle());', '        holder.getDescriptionTextView().setText(option.getDescription());', '    }', '', '    @Override', '    public int getItemCount() {', '        return mAuthenticatorOptions.size();', '    }', '', '    class AuthenticatorOptionViewHolder extends RecyclerView.ViewHolder {', '        private final TextView mTitleTextView;', '        private final TextView mDescriptionTextView;', '        private final ImageView mIconImageView;', '        private final RadioButton mRadioButton;', '', '        AuthenticatorOptionViewHolder(View view, ItemClickListener itemClickListener) {', '            super(view);', '            mTitleTextView = view.findViewById(R.id.authenticator_option_title);', '            mDescriptionTextView = view.findViewById(R.id.authenticator_option_description);', '            mIconImageView = view.findViewById(R.id.authenticator_option_icon);', '            mRadioButton = view.findViewById(R.id.authenticator_option_radio_btn);', '            mRadioButton.setOnClickListener(radioButtonView -> {', '                int lastAuthenticatorIndex = mSelectedAuthenticatorIndex;', '                mSelectedAuthenticatorIndex = getAdapterPosition();', '                // Update both the previous and the current selection so that the radio button is', '                // updated.', '                notifyItemChanged(lastAuthenticatorIndex);', '                notifyItemChanged(mSelectedAuthenticatorIndex);', '                itemClickListener.onItemClicked(', '                        mAuthenticatorOptions.get(mSelectedAuthenticatorIndex));', '            });', '        }', '', '        public TextView getTitleTextView() {', '            return mTitleTextView;', '        }', '', '        public TextView getDescriptionTextView() {', '            return mDescriptionTextView;', '        }', '', '        public ImageView getIconImageView() {', '            return mIconImageView;', '        }', '', '        public RadioButton getRadioButton() {', '            return mRadioButton;', '        }', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,2125e5b302625020ff4247f18c2050f913aa9a7c,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorOptionsAdapter.java,ccc0eec1_c716bbe1_before.java,ccc0eec1_c716bbe1_after.java,AuthenticatorOptionsAdapter::onBindViewHolder,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; if ( VAR_43 != 0 ) { VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","I missed that it can't be 0 anyway. In that case, we'd need to either throw an exception while creating the AuthenticatorSelectionDialogBridge or allow the VAR_43 to be 0.

Personally, I'd prefer the latter as when there are multiple authenticators, then we use radio buttons instead of the VAR_43."
39,aef60e12_40ecd0bb,64.0,"Ok thanks.  I'll defer to Android experts/owners on if removing the assert is fine, but from the comment thread you linked it sounds like that's the desired approach.",57.0,64.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', 'import android.view.ViewGroup;', 'import android.widget.ImageView;', 'import android.widget.RadioButton;', 'import android.widget.TextView;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', 'import androidx.recyclerview.widget.RecyclerView.ViewHolder;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', '', 'import java.util.List;', '', '/** Adapter for showing the authenticator options in a {@link RecyclerView}. */', 'public class AuthenticatorOptionsAdapter extends RecyclerView.Adapter<ViewHolder> {', '    /** Interface for callers to be notified when an item is selected. */', '    public interface ItemClickListener {', '        void onItemClicked(AuthenticatorOption option);', '    }', '', '    private final List<AuthenticatorOption> mAuthenticatorOptions;', '    private final ItemClickListener mItemClickListener;', '    private final Context mContext;', '', '    private int mSelectedAuthenticatorIndex;', '', '    public AuthenticatorOptionsAdapter(Context context,', '            List<AuthenticatorOption> authenticatorOptions, ItemClickListener itemClickListener) {', '        this.mAuthenticatorOptions = authenticatorOptions;', '        this.mItemClickListener = itemClickListener;', '        this.mContext = context;', '    }', '', '    @Override', '    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {', '        View view = LayoutInflater.from(parent.getContext())', '                            .inflate(R.layout.authenticator_option, parent, false);', '        return new AuthenticatorOptionViewHolder(view, mItemClickListener);', '    }', '', '    @Override', '    public void onBindViewHolder(ViewHolder viewHolder, final int position) {', '        AuthenticatorOptionViewHolder holder = (AuthenticatorOptionViewHolder) viewHolder;', '        AuthenticatorOption option = mAuthenticatorOptions.get(position);', '        if (getItemCount() == 1) {', '            holder.getRadioButton().setVisibility(View.GONE);', '            int iconResId = option.getIconResId();']}, {'a': ['            if (iconResId != 0) {'], 'b': ['            if (iconResId == 0) {']}, {'ab': ['                holder.getIconImageView().setVisibility(View.VISIBLE);', '                holder.getIconImageView().setImageDrawable(ResourcesCompat.getDrawable(', '                        mContext.getResources(), iconResId, mContext.getTheme()));', '            } else {', '                holder.getIconImageView().setVisibility(View.GONE);', '            }', '        } else {', '            holder.getIconImageView().setVisibility(View.GONE);', '            holder.getRadioButton().setVisibility(View.VISIBLE);', '            holder.getRadioButton().setChecked(position == mSelectedAuthenticatorIndex);', '        }', '        holder.getTitleTextView().setText(option.getTitle());', '        holder.getDescriptionTextView().setText(option.getDescription());', '    }', '', '    @Override', '    public int getItemCount() {', '        return mAuthenticatorOptions.size();', '    }', '', '    class AuthenticatorOptionViewHolder extends RecyclerView.ViewHolder {', '        private final TextView mTitleTextView;', '        private final TextView mDescriptionTextView;', '        private final ImageView mIconImageView;', '        private final RadioButton mRadioButton;', '', '        AuthenticatorOptionViewHolder(View view, ItemClickListener itemClickListener) {', '            super(view);', '            mTitleTextView = view.findViewById(R.id.authenticator_option_title);', '            mDescriptionTextView = view.findViewById(R.id.authenticator_option_description);', '            mIconImageView = view.findViewById(R.id.authenticator_option_icon);', '            mRadioButton = view.findViewById(R.id.authenticator_option_radio_btn);', '            mRadioButton.setOnClickListener(radioButtonView -> {', '                int lastAuthenticatorIndex = mSelectedAuthenticatorIndex;', '                mSelectedAuthenticatorIndex = getAdapterPosition();', '                // Update both the previous and the current selection so that the radio button is', '                // updated.', '                notifyItemChanged(lastAuthenticatorIndex);', '                notifyItemChanged(mSelectedAuthenticatorIndex);', '                itemClickListener.onItemClicked(', '                        mAuthenticatorOptions.get(mSelectedAuthenticatorIndex));', '            });', '        }', '', '        public TextView getTitleTextView() {', '            return mTitleTextView;', '        }', '', '        public TextView getDescriptionTextView() {', '            return mDescriptionTextView;', '        }', '', '        public ImageView getIconImageView() {', '            return mIconImageView;', '        }', '', '        public RadioButton getRadioButton() {', '            return mRadioButton;', '        }', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,2125e5b302625020ff4247f18c2050f913aa9a7c,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorOptionsAdapter.java,aef60e12_40ecd0bb_before.java,aef60e12_40ecd0bb_after.java,AuthenticatorOptionsAdapter::onBindViewHolder,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . R ; import VAR_14 . List ; public class VAR_15 extends VAR_16 < VAR_17 > { public interface VAR_18 { void VAR_19 ( VAR_20 VAR_21 ) ; } private final List < VAR_20 > VAR_22 ; private final VAR_18 VAR_23 ; private final Context VAR_24 ; private int VAR_25 ; public VAR_15 ( Context context , List < VAR_20 > VAR_26 , VAR_18 VAR_27 ) { this . VAR_22 = VAR_26 ; this . VAR_23 = VAR_27 ; this . VAR_24 = context ; } public VAR_17 VAR_28 ( VAR_29 parent , int VAR_30 ) { View view = VAR_31 . from ( VAR_32 ( ) ) . VAR_33 ( VAR_34 , parent , false ) ; return new VAR_35 ( view , VAR_23 ) ; } public void VAR_36 ( VAR_17 VAR_37 , final int position ) { VAR_35 VAR_38 = ( VAR_35 ) VAR_37 ; VAR_20 VAR_21 = VAR_22 . get ( position ) ; if ( VAR_39 ( ) == 1 ) { VAR_40 ( ) . VAR_41 ( VAR_42 ) ; int VAR_43 = VAR_44 ( ) ; if ( VAR_43 != 0 ) { VAR_45 ( ) . VAR_41 ( VAR_46 ) ; VAR_45 ( ) . VAR_47 ( VAR_48 ( VAR_49 ( ) , VAR_43 , VAR_50 ( ) ) ) ; } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; } } else { VAR_45 ( ) . VAR_41 ( VAR_42 ) ; VAR_40 ( ) . VAR_41 ( VAR_46 ) ; VAR_40 ( ) . VAR_51 ( position == VAR_25 ) ; } VAR_52 ( ) . setText ( VAR_53 ( ) ) ; VAR_54 ( ) . setText ( VAR_55 ( ) ) ; } public int VAR_39 ( ) { return VAR_22 . size ( ) ; } class VAR_35 extends VAR_56 { private final VAR_57 VAR_58 ; private final VAR_57 VAR_59 ; private final VAR_60 VAR_61 ; private final VAR_62 VAR_63 ; VAR_35 ( View view , VAR_18 VAR_27 ) { super ( view ) ; VAR_58 = VAR_64 ( VAR_65 ) ; VAR_59 = VAR_64 ( VAR_66 ) ; VAR_61 = VAR_64 ( VAR_67 ) ; VAR_63 = VAR_64 ( VAR_68 ) ; VAR_69 ( VAR_70 - > { int VAR_71 = VAR_25 ; VAR_25 = VAR_72 ( ) ; VAR_73 ( VAR_71 ) ; VAR_73 ( VAR_25 ) ; VAR_74 ( VAR_22 . get ( VAR_25 ) ) ; } ) ; } public VAR_57 VAR_75 ( ) { return VAR_58 ; } public VAR_57 VAR_76 ( ) { return VAR_59 ; } public VAR_60 VAR_77 ( ) { return VAR_61 ; } public VAR_62 VAR_78 ( ) { return VAR_63 ; } } }","Ok thanks.  I'll defer to Android experts/owners on if removing the assert is fine, but from the comment thread you linked it sounds like that's the desired approach."
44,3c9dffbe_11cfa28e,102.0,remove addition,102.0,102.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.modaldialog.ModalDialogProperties;', 'import org.chromium.ui.modelutil.PropertyModel;', '', 'import java.util.List;', '', '/**', ' * Dialog that presents {@link AuthenticatorOption}s to the user to choose from for fetching credit', ' * card information from the backend.', ' */', 'public class AuthenticatorSelectionDialog implements AuthenticatorOptionsAdapter.ItemClickListener {', '    private static final int ANIMATION_DURATION_MS = 250;', '    /** Interface for the caller to be notified of user actions. */', '    public interface Listener {', '        /** Notify that the user selected an authenticator option. */', '        void onOptionSelected(String authenticatorOptionIdentifier);', '        /** Notify that the dialog was dismissed. */', '        void onDialogDismissed();', '    }', '', '    private final ModalDialogProperties.Controller mModalDialogController =', '            new ModalDialogProperties.Controller() {', '                @Override', '                public void onClick(PropertyModel model, int buttonType) {', '                    switch (buttonType) {', '                        case ModalDialogProperties.ButtonType.POSITIVE:', '                            mListener.onOptionSelected(', '                                    mSelectedAuthenticatorOption.getIdentifier());', '                            showProgressBarOverlay();', '                            break;', '                        case ModalDialogProperties.ButtonType.NEGATIVE:', '                            mModalDialogManager.dismissDialog(', '                                    model, DialogDismissalCause.NEGATIVE_BUTTON_CLICKED);', '                            break;', '                    }', '                }', '', '                @Override', '                public void onDismiss(PropertyModel model, int dismissalCause) {', '                    mListener.onDialogDismissed();', '                }', '            };', '', '    private final Context mContext;', '    private final Listener mListener;', '    private final ModalDialogManager mModalDialogManager;', '    private View mProgressBarOverlayView;', '    private View mAuthenticatorSelectionDialogContentsView;', '    private RecyclerView mAuthenticationOptionsRecyclerView;', '    private AuthenticatorOptionsAdapter mAuthenticatorOptionsAdapter;', '', '    private PropertyModel mDialogModel;', '    private AuthenticatorOption mSelectedAuthenticatorOption;', '', '    public AuthenticatorSelectionDialog(', '            Context context, Listener listener, ModalDialogManager modalDialogManager) {', '        this.mContext = context;', '        this.mListener = listener;', '        this.mModalDialogManager = modalDialogManager;', '    }', '', '    @Override', '    public void onItemClicked(AuthenticatorOption option) {', '        mSelectedAuthenticatorOption = option;', '    }', '', '    /**', '     * Shows an Authenticator Selection dialog.', '     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        // By default, the first option will be selected.', '        mSelectedAuthenticatorOption = authenticatorOptions.get(0);', '        View view = LayoutInflater.from(mContext).inflate(', '                R.layout.authenticator_selection_dialog, null);', '        mAuthenticatorSelectionDialogContentsView =', '                view.findViewById(R.id.authenticator_selection_dialog_contents);', '        mProgressBarOverlayView = view.findViewById(R.id.progress_bar_overlay);', '        mProgressBarOverlayView.setVisibility(View.GONE);', '        // Set up the recycler view.', '        mAuthenticationOptionsRecyclerView =', '                (RecyclerView) view.findViewById(R.id.authenticator_options_view);', '        mAuthenticatorOptionsAdapter =', '                new AuthenticatorOptionsAdapter(mContext, authenticatorOptions, this);', '        mAuthenticationOptionsRecyclerView.setAdapter(mAuthenticatorOptionsAdapter);']}, {'a': ['        // Set up the ModalDialog.'], 'b': ['        // Set up the ModalDilsalog.']}, {'ab': ['        PropertyModel.Builder builder =', '                new PropertyModel.Builder(ModalDialogProperties.ALL_KEYS)', '                        .with(ModalDialogProperties.CONTROLLER, mModalDialogController)', '                        .with(ModalDialogProperties.CUSTOM_VIEW, view)', '                        .with(ModalDialogProperties.TITLE,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_title))', '                        .with(ModalDialogProperties.TITLE_ICON,', '                                ResourcesCompat.getDrawable(mContext.getResources(),', '                                        R.drawable.google_pay_with_divider, mContext.getTheme()))', '                        .with(ModalDialogProperties.NEGATIVE_BUTTON_TEXT,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_negative_button_label))', '                        .with(ModalDialogProperties.POSITIVE_BUTTON_TEXT,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_positive_button_label));', '        mDialogModel = builder.build();', '        mModalDialogManager.showDialog(mDialogModel, ModalDialogManager.ModalDialogType.TAB);', '    }', '', '    public void dismiss(int cause) {', '        mModalDialogManager.dismissDialog(mDialogModel, cause);', '    }', '', '    private void showProgressBarOverlay() {', '        mProgressBarOverlayView.setVisibility(View.VISIBLE);', '        mProgressBarOverlayView.setAlpha(0f);', '        mProgressBarOverlayView.animate().alpha(1f).setDuration(ANIMATION_DURATION_MS);', '        mAuthenticatorSelectionDialogContentsView.animate().alpha(0f).setDuration(', '                ANIMATION_DURATION_MS);', '        mDialogModel.set(ModalDialogProperties.POSITIVE_BUTTON_DISABLED, true);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialog.java,3c9dffbe_11cfa28e_before.java,3c9dffbe_11cfa28e_after.java,AuthenticatorSelectionDialog::show,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . List ; public class VAR_14 implements VAR_15 { private static final int VAR_16 = INT_1 ; public interface VAR_17 { void VAR_18 ( String VAR_19 ) ; void VAR_20 ( ) ; } private final VAR_21 VAR_22 = new VAR_21 ( ) { public void VAR_23 ( VAR_24 model , int VAR_25 ) { switch ( VAR_25 ) { case VAR_26 : VAR_27 ( VAR_28 ( ) ) ; VAR_29 ( ) ; break ; case VAR_30 : VAR_31 ( model , VAR_32 ) ; break ; } } public void VAR_33 ( VAR_24 model , int VAR_34 ) { VAR_35 ( ) ; } } ; private final Context VAR_36 ; private final VAR_17 VAR_37 ; private final VAR_38 VAR_39 ; private View VAR_40 ; private View VAR_41 ; private VAR_42 VAR_43 ; private VAR_44 VAR_45 ; private VAR_24 VAR_46 ; private VAR_47 VAR_48 ; public VAR_14 ( Context context , VAR_17 listener , VAR_38 VAR_49 ) { this . VAR_36 = context ; this . VAR_37 = listener ; this . VAR_39 = VAR_49 ; } public void VAR_50 ( VAR_47 VAR_51 ) { VAR_48 = VAR_51 ; } public void VAR_52 ( List < VAR_47 > VAR_53 ) { VAR_48 = VAR_53 . get ( 0 ) ; View view = VAR_54 . from ( VAR_36 ) . VAR_55 ( VAR_56 , null ) ; VAR_41 = VAR_57 ( VAR_58 ) ; VAR_40 = VAR_57 ( VAR_59 ) ; VAR_60 ( VAR_61 ) ; VAR_43 = ( VAR_42 ) VAR_57 ( VAR_62 ) ; VAR_45 = new VAR_44 ( VAR_36 , VAR_53 , this ) ; VAR_63 ( VAR_45 ) ; VAR_24 . Builder builder = new VAR_24 . Builder ( VAR_64 ) . VAR_65 ( VAR_66 , VAR_22 ) . VAR_65 ( VAR_67 , view ) . VAR_65 ( VAR_68 , VAR_69 ( ) . getString ( VAR_70 ) ) . VAR_65 ( VAR_71 , VAR_72 ( VAR_69 ( ) , VAR_73 , VAR_74 ( ) ) ) . VAR_65 ( VAR_75 , VAR_69 ( ) . getString ( VAR_76 ) ) . VAR_65 ( VAR_77 , VAR_69 ( ) . getString ( VAR_78 ) ) ; VAR_46 = builder . build ( ) ; VAR_79 ( VAR_46 , VAR_80 ) ; } public void VAR_81 ( int VAR_82 ) { VAR_31 ( VAR_46 , VAR_82 ) ; } private void VAR_29 ( ) { VAR_60 ( VAR_83 ) ; VAR_84 ( FLOAT_1 ) ; VAR_85 ( ) . VAR_86 ( FLOAT_2 ) . VAR_87 ( VAR_16 ) ; VAR_88 ( ) . VAR_86 ( FLOAT_1 ) . VAR_87 ( VAR_16 ) ; VAR_46 . set ( VAR_89 , true ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . List ; public class VAR_14 implements VAR_15 { private static final int VAR_16 = INT_1 ; public interface VAR_17 { void VAR_18 ( String VAR_19 ) ; void VAR_20 ( ) ; } private final VAR_21 VAR_22 = new VAR_21 ( ) { public void VAR_23 ( VAR_24 model , int VAR_25 ) { switch ( VAR_25 ) { case VAR_26 : VAR_27 ( VAR_28 ( ) ) ; VAR_29 ( ) ; break ; case VAR_30 : VAR_31 ( model , VAR_32 ) ; break ; } } public void VAR_33 ( VAR_24 model , int VAR_34 ) { VAR_35 ( ) ; } } ; private final Context VAR_36 ; private final VAR_17 VAR_37 ; private final VAR_38 VAR_39 ; private View VAR_40 ; private View VAR_41 ; private VAR_42 VAR_43 ; private VAR_44 VAR_45 ; private VAR_24 VAR_46 ; private VAR_47 VAR_48 ; public VAR_14 ( Context context , VAR_17 listener , VAR_38 VAR_49 ) { this . VAR_36 = context ; this . VAR_37 = listener ; this . VAR_39 = VAR_49 ; } public void VAR_50 ( VAR_47 VAR_51 ) { VAR_48 = VAR_51 ; } public void VAR_52 ( List < VAR_47 > VAR_53 ) { VAR_48 = VAR_53 . get ( 0 ) ; View view = VAR_54 . from ( VAR_36 ) . VAR_55 ( VAR_56 , null ) ; VAR_41 = VAR_57 ( VAR_58 ) ; VAR_40 = VAR_57 ( VAR_59 ) ; VAR_60 ( VAR_61 ) ; VAR_43 = ( VAR_42 ) VAR_57 ( VAR_62 ) ; VAR_45 = new VAR_44 ( VAR_36 , VAR_53 , this ) ; VAR_63 ( VAR_45 ) ; VAR_24 . Builder builder = new VAR_24 . Builder ( VAR_64 ) . VAR_65 ( VAR_66 , VAR_22 ) . VAR_65 ( VAR_67 , view ) . VAR_65 ( VAR_68 , VAR_69 ( ) . getString ( VAR_70 ) ) . VAR_65 ( VAR_71 , VAR_72 ( VAR_69 ( ) , VAR_73 , VAR_74 ( ) ) ) . VAR_65 ( VAR_75 , VAR_69 ( ) . getString ( VAR_76 ) ) . VAR_65 ( VAR_77 , VAR_69 ( ) . getString ( VAR_78 ) ) ; VAR_46 = builder . build ( ) ; VAR_79 ( VAR_46 , VAR_80 ) ; } public void VAR_81 ( int VAR_82 ) { VAR_31 ( VAR_46 , VAR_82 ) ; } private void VAR_29 ( ) { VAR_60 ( VAR_83 ) ; VAR_84 ( FLOAT_1 ) ; VAR_85 ( ) . VAR_86 ( FLOAT_2 ) . VAR_87 ( VAR_16 ) ; VAR_88 ( ) . VAR_86 ( FLOAT_1 ) . VAR_87 ( VAR_16 ) ; VAR_46 . set ( VAR_89 , true ) ; } }",remove addition
45,3aba56b0_3679af05,102.0,Done,102.0,102.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', 'import android.view.LayoutInflater;', 'import android.view.View;', '', 'import androidx.core.content.res.ResourcesCompat;', 'import androidx.recyclerview.widget.RecyclerView;', '', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.modaldialog.ModalDialogProperties;', 'import org.chromium.ui.modelutil.PropertyModel;', '', 'import java.util.List;', '', '/**', ' * Dialog that presents {@link AuthenticatorOption}s to the user to choose from for fetching credit', ' * card information from the backend.', ' */', 'public class AuthenticatorSelectionDialog implements AuthenticatorOptionsAdapter.ItemClickListener {', '    private static final int ANIMATION_DURATION_MS = 250;', '    /** Interface for the caller to be notified of user actions. */', '    public interface Listener {', '        /** Notify that the user selected an authenticator option. */', '        void onOptionSelected(String authenticatorOptionIdentifier);', '        /** Notify that the dialog was dismissed. */', '        void onDialogDismissed();', '    }', '', '    private final ModalDialogProperties.Controller mModalDialogController =', '            new ModalDialogProperties.Controller() {', '                @Override', '                public void onClick(PropertyModel model, int buttonType) {', '                    switch (buttonType) {', '                        case ModalDialogProperties.ButtonType.POSITIVE:', '                            mListener.onOptionSelected(', '                                    mSelectedAuthenticatorOption.getIdentifier());', '                            showProgressBarOverlay();', '                            break;', '                        case ModalDialogProperties.ButtonType.NEGATIVE:', '                            mModalDialogManager.dismissDialog(', '                                    model, DialogDismissalCause.NEGATIVE_BUTTON_CLICKED);', '                            break;', '                    }', '                }', '', '                @Override', '                public void onDismiss(PropertyModel model, int dismissalCause) {', '                    mListener.onDialogDismissed();', '                }', '            };', '', '    private final Context mContext;', '    private final Listener mListener;', '    private final ModalDialogManager mModalDialogManager;', '    private View mProgressBarOverlayView;', '    private View mAuthenticatorSelectionDialogContentsView;', '    private RecyclerView mAuthenticationOptionsRecyclerView;', '    private AuthenticatorOptionsAdapter mAuthenticatorOptionsAdapter;', '', '    private PropertyModel mDialogModel;', '    private AuthenticatorOption mSelectedAuthenticatorOption;', '', '    public AuthenticatorSelectionDialog(', '            Context context, Listener listener, ModalDialogManager modalDialogManager) {', '        this.mContext = context;', '        this.mListener = listener;', '        this.mModalDialogManager = modalDialogManager;', '    }', '', '    @Override', '    public void onItemClicked(AuthenticatorOption option) {', '        mSelectedAuthenticatorOption = option;', '    }', '', '    /**', '     * Shows an Authenticator Selection dialog.', '     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        // By default, the first option will be selected.', '        mSelectedAuthenticatorOption = authenticatorOptions.get(0);', '        View view = LayoutInflater.from(mContext).inflate(', '                R.layout.authenticator_selection_dialog, null);', '        mAuthenticatorSelectionDialogContentsView =', '                view.findViewById(R.id.authenticator_selection_dialog_contents);', '        mProgressBarOverlayView = view.findViewById(R.id.progress_bar_overlay);', '        mProgressBarOverlayView.setVisibility(View.GONE);', '        // Set up the recycler view.', '        mAuthenticationOptionsRecyclerView =', '                (RecyclerView) view.findViewById(R.id.authenticator_options_view);', '        mAuthenticatorOptionsAdapter =', '                new AuthenticatorOptionsAdapter(mContext, authenticatorOptions, this);', '        mAuthenticationOptionsRecyclerView.setAdapter(mAuthenticatorOptionsAdapter);']}, {'a': ['        // Set up the ModalDialog.'], 'b': ['        // Set up the ModalDilsalog.']}, {'ab': ['        PropertyModel.Builder builder =', '                new PropertyModel.Builder(ModalDialogProperties.ALL_KEYS)', '                        .with(ModalDialogProperties.CONTROLLER, mModalDialogController)', '                        .with(ModalDialogProperties.CUSTOM_VIEW, view)', '                        .with(ModalDialogProperties.TITLE,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_title))', '                        .with(ModalDialogProperties.TITLE_ICON,', '                                ResourcesCompat.getDrawable(mContext.getResources(),', '                                        R.drawable.google_pay_with_divider, mContext.getTheme()))', '                        .with(ModalDialogProperties.NEGATIVE_BUTTON_TEXT,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_negative_button_label))', '                        .with(ModalDialogProperties.POSITIVE_BUTTON_TEXT,', '                                mContext.getResources().getString(', '                                        R.string.autofill_payments_authenticator_selection_dialog_positive_button_label));', '        mDialogModel = builder.build();', '        mModalDialogManager.showDialog(mDialogModel, ModalDialogManager.ModalDialogType.TAB);', '    }', '', '    public void dismiss(int cause) {', '        mModalDialogManager.dismissDialog(mDialogModel, cause);', '    }', '', '    private void showProgressBarOverlay() {', '        mProgressBarOverlayView.setVisibility(View.VISIBLE);', '        mProgressBarOverlayView.setAlpha(0f);', '        mProgressBarOverlayView.animate().alpha(1f).setDuration(ANIMATION_DURATION_MS);', '        mAuthenticatorSelectionDialogContentsView.animate().alpha(0f).setDuration(', '                ANIMATION_DURATION_MS);', '        mDialogModel.set(ModalDialogProperties.POSITIVE_BUTTON_DISABLED, true);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialog.java,3aba56b0_3679af05_before.java,3aba56b0_3679af05_after.java,AuthenticatorSelectionDialog::show,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . List ; public class VAR_14 implements VAR_15 { private static final int VAR_16 = INT_1 ; public interface VAR_17 { void VAR_18 ( String VAR_19 ) ; void VAR_20 ( ) ; } private final VAR_21 VAR_22 = new VAR_21 ( ) { public void VAR_23 ( VAR_24 model , int VAR_25 ) { switch ( VAR_25 ) { case VAR_26 : VAR_27 ( VAR_28 ( ) ) ; VAR_29 ( ) ; break ; case VAR_30 : VAR_31 ( model , VAR_32 ) ; break ; } } public void VAR_33 ( VAR_24 model , int VAR_34 ) { VAR_35 ( ) ; } } ; private final Context VAR_36 ; private final VAR_17 VAR_37 ; private final VAR_38 VAR_39 ; private View VAR_40 ; private View VAR_41 ; private VAR_42 VAR_43 ; private VAR_44 VAR_45 ; private VAR_24 VAR_46 ; private VAR_47 VAR_48 ; public VAR_14 ( Context context , VAR_17 listener , VAR_38 VAR_49 ) { this . VAR_36 = context ; this . VAR_37 = listener ; this . VAR_39 = VAR_49 ; } public void VAR_50 ( VAR_47 VAR_51 ) { VAR_48 = VAR_51 ; } public void VAR_52 ( List < VAR_47 > VAR_53 ) { VAR_48 = VAR_53 . get ( 0 ) ; View view = VAR_54 . from ( VAR_36 ) . VAR_55 ( VAR_56 , null ) ; VAR_41 = VAR_57 ( VAR_58 ) ; VAR_40 = VAR_57 ( VAR_59 ) ; VAR_60 ( VAR_61 ) ; VAR_43 = ( VAR_42 ) VAR_57 ( VAR_62 ) ; VAR_45 = new VAR_44 ( VAR_36 , VAR_53 , this ) ; VAR_63 ( VAR_45 ) ; VAR_24 . Builder builder = new VAR_24 . Builder ( VAR_64 ) . VAR_65 ( VAR_66 , VAR_22 ) . VAR_65 ( VAR_67 , view ) . VAR_65 ( VAR_68 , VAR_69 ( ) . getString ( VAR_70 ) ) . VAR_65 ( VAR_71 , VAR_72 ( VAR_69 ( ) , VAR_73 , VAR_74 ( ) ) ) . VAR_65 ( VAR_75 , VAR_69 ( ) . getString ( VAR_76 ) ) . VAR_65 ( VAR_77 , VAR_69 ( ) . getString ( VAR_78 ) ) ; VAR_46 = builder . build ( ) ; VAR_79 ( VAR_46 , VAR_80 ) ; } public void VAR_81 ( int VAR_82 ) { VAR_31 ( VAR_46 , VAR_82 ) ; } private void VAR_29 ( ) { VAR_60 ( VAR_83 ) ; VAR_84 ( FLOAT_1 ) ; VAR_85 ( ) . VAR_86 ( FLOAT_2 ) . VAR_87 ( VAR_16 ) ; VAR_88 ( ) . VAR_86 ( FLOAT_1 ) . VAR_87 ( VAR_16 ) ; VAR_46 . set ( VAR_89 , true ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 . View ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 . List ; public class VAR_14 implements VAR_15 { private static final int VAR_16 = INT_1 ; public interface VAR_17 { void VAR_18 ( String VAR_19 ) ; void VAR_20 ( ) ; } private final VAR_21 VAR_22 = new VAR_21 ( ) { public void VAR_23 ( VAR_24 model , int VAR_25 ) { switch ( VAR_25 ) { case VAR_26 : VAR_27 ( VAR_28 ( ) ) ; VAR_29 ( ) ; break ; case VAR_30 : VAR_31 ( model , VAR_32 ) ; break ; } } public void VAR_33 ( VAR_24 model , int VAR_34 ) { VAR_35 ( ) ; } } ; private final Context VAR_36 ; private final VAR_17 VAR_37 ; private final VAR_38 VAR_39 ; private View VAR_40 ; private View VAR_41 ; private VAR_42 VAR_43 ; private VAR_44 VAR_45 ; private VAR_24 VAR_46 ; private VAR_47 VAR_48 ; public VAR_14 ( Context context , VAR_17 listener , VAR_38 VAR_49 ) { this . VAR_36 = context ; this . VAR_37 = listener ; this . VAR_39 = VAR_49 ; } public void VAR_50 ( VAR_47 VAR_51 ) { VAR_48 = VAR_51 ; } public void VAR_52 ( List < VAR_47 > VAR_53 ) { VAR_48 = VAR_53 . get ( 0 ) ; View view = VAR_54 . from ( VAR_36 ) . VAR_55 ( VAR_56 , null ) ; VAR_41 = VAR_57 ( VAR_58 ) ; VAR_40 = VAR_57 ( VAR_59 ) ; VAR_60 ( VAR_61 ) ; VAR_43 = ( VAR_42 ) VAR_57 ( VAR_62 ) ; VAR_45 = new VAR_44 ( VAR_36 , VAR_53 , this ) ; VAR_63 ( VAR_45 ) ; VAR_24 . Builder builder = new VAR_24 . Builder ( VAR_64 ) . VAR_65 ( VAR_66 , VAR_22 ) . VAR_65 ( VAR_67 , view ) . VAR_65 ( VAR_68 , VAR_69 ( ) . getString ( VAR_70 ) ) . VAR_65 ( VAR_71 , VAR_72 ( VAR_69 ( ) , VAR_73 , VAR_74 ( ) ) ) . VAR_65 ( VAR_75 , VAR_69 ( ) . getString ( VAR_76 ) ) . VAR_65 ( VAR_77 , VAR_69 ( ) . getString ( VAR_78 ) ) ; VAR_46 = builder . build ( ) ; VAR_79 ( VAR_46 , VAR_80 ) ; } public void VAR_81 ( int VAR_82 ) { VAR_31 ( VAR_46 , VAR_82 ) ; } private void VAR_29 ( ) { VAR_60 ( VAR_83 ) ; VAR_84 ( FLOAT_1 ) ; VAR_85 ( ) . VAR_86 ( FLOAT_2 ) . VAR_87 ( VAR_16 ) ; VAR_88 ( ) . VAR_86 ( FLOAT_1 ) . VAR_87 ( VAR_16 ) ; VAR_46 . set ( VAR_89 , true ) ; } }",Done
46,1352903e_913850c6,74.0,C++ would do NOTREACHED() here which would crash a debug build...I wonder if this should do something similar?  Throwing an exception would crash even a non-debug build though...,74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,1352903e_913850c6_before.java,1352903e_913850c6_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",C++ would do NOTREACHED() here which would crash a debug build...I wonder if this should do something similar?  Throwing an exception would crash even a non-debug build though...
47,b900a0c3_a7e3d737,74.0,"The only way I think we handle it gracefully is to leave it as is and maybe add a Log statement [1]

To avoid any crashes, we'd also need to update the AuthenticatorOptionsAdapter[2] to handle cases where the iconResId is 0, so that it does not fail trying fetch an icon for that id.

[1]https://sites.google.com/a/google.com/clank/engineering/best-practices/logging 
[2]https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorOptionsAdapter.java;l=58;drc=0f7b26dc2dcf3aa5098a852fc2c02329b25ad98d",74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,b900a0c3_a7e3d737_before.java,b900a0c3_a7e3d737_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","The only way I think we handle it gracefully is to leave it as is and maybe add a Log statement [1]

To avoid any crashes, we'd also need to update the VAR_26sAdapter[2] to handle cases where the VAR_31 is 0, so that it does not fail trying fetch an icon for that id.

[1]https://sites.google.com/a/google.com/clank/engineering/best-practices/logging 
[2]https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/VAR_26sAdapter.java;l=58;drc=0f7b26dc2dcf3aa5098a852fc2c02329b25ad98d"
48,5cae2ef7_508cb6bf,74.0,"Theoretically, this should never happen. However, if it's as you say (NOTREACHED() only takes effect on debug builds), throwing an exception here might not be desirable. I'd prefer a more graceful way of handling error conditions in release builds than just straight up crashing... Is there a way to catch an exception across the JNI build?",74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,5cae2ef7_508cb6bf_before.java,5cae2ef7_508cb6bf_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","Theoretically, this should never happen. However, if it's as you say (NOTREACHED() only takes effect on debug builds), throwing an exception here might not be desirable. I'd prefer a more graceful way of handling error conditions in release builds than just straight up crashing... Is there a way to catch an exception across the JNI build?"
49,06b8ae77_bfb8df07,74.0,"Good question, agreed that throwing an exception isn't desirable either.  As for your question, not sure, unfortunately.  Maybe Sid knows?  Maybe we just have to leave it be.",74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,06b8ae77_bfb8df07_before.java,06b8ae77_bfb8df07_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","Good question, agreed that throwing an exception isn't desirable either.  As for your question, not sure, unfortunately.  Maybe Sid knows?  Maybe we just have to leave it be."
50,9bab2220_9319950a,74.0,Done,74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,9bab2220_9319950a_before.java,9bab2220_9319950a_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",Done
51,fd75ad03_194bf6ad,74.0,Done,74.0,74.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,fd75ad03_194bf6ad_before.java,fd75ad03_194bf6ad_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",Done
52,c095cb5c_e76f3e7a,83.0,"If nothing happens in the end if |list| is null, maybe starting off this function with `if (list == null) return;` would be better, to avoid unnecessary object construction?",83.0,83.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,c095cb5c_e76f3e7a_before.java,c095cb5c_e76f3e7a_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","If nothing happens in the end if |list| is null, maybe starting off this function with `if (list == null) return;` would be better, to avoid unnecessary object construction?"
53,e1d80ebe_8ea8359d,83.0,Done,83.0,83.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,e1d80ebe_8ea8359d_before.java,e1d80ebe_8ea8359d_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",Done
56,0a880965_e08adf83,112.0,nit: This comment seems unrelated.,110.0,112.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,0a880965_e08adf83_before.java,0a880965_e08adf83_after.java,AuthenticatorSelectionDialogBridge::onOptionSelected,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",nit: This comment seems unrelated.
57,b01514fd_4e89dd9c,112.0,Done,110.0,112.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.']}, {'a': ['     *']}, {'ab': ['     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.']}, {'a': ['     *']}, {'ab': ['     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) return;', '']}, {'ab': ['        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();']}, {'a': ['        list.add(authenticatorOption);'], 'b': ['        if (list != null) list.add(authenticatorOption);']}, {'ab': ['    }', '', '    /**', '     * Shows an Authenticator Selection dialog.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**']}, {'a': ['     * Dismisses the Authenticator Selection Dialog.'], 'b': ['     * Dismissies the Authenticator Selection Dialog.']}, {'ab': ['     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.']}, {'a': ['     *']}, {'ab': ['     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {']}, {'b': ['            // This call passes the account fields directly as String and GURL parameters as an', '            // optimization to avoid needing multiple JNI getters on the Account class on for each', '            // field.']}, {'ab': ['            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,441af9cb02c689929a9e8fe4cb26a036d34e1bc4,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,b01514fd_4e89dd9c_before.java,b01514fd_4e89dd9c_after.java,AuthenticatorSelectionDialogBridge::onOptionSelected,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) return ; int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",Done
58,98c0be16_09d2e17a,69.0,"I think Java requires curly braces even in C++, sorry for my misleading comment earlier. :)

  if (list == null) {
    return;
  }",69.0,69.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.', '     *', '     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.', '     *', '     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) {', '            return;', '        }'], 'b': ['        if (list == null) return;']}, {'ab': ['', '        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();', '        list.add(authenticatorOption);', '    }', '', '    /**', '     * Shows an Authenticator Selection dialog.', '     *', '     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**', '     * Dismisses the Authenticator Selection Dialog.', '     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.', '     *', '     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,11fb33a4b231001e7909a98c0029e54ed954d416,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,98c0be16_09d2e17a_before.java,98c0be16_09d2e17a_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) { return ; } int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","I think Java requires curly braces even in C++, sorry for my misleading comment earlier. :)

  if (list == null) {
    return;
  }"
59,f78ff58c_5da46b46,69.0,Done,69.0,69.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.autofill;', '', 'import android.content.Context;', '', 'import org.chromium.base.annotations.CalledByNative;', 'import org.chromium.base.annotations.JNINamespace;', 'import org.chromium.base.annotations.NativeMethods;', 'import org.chromium.chrome.browser.ui.autofill.data.AuthenticatorOption;', 'import org.chromium.chrome.browser.ui.autofill.data.CardUnmaskChallengeOptionType;', 'import org.chromium.chrome.browser.ui.autofill.internal.R;', 'import org.chromium.ui.base.WindowAndroid;', 'import org.chromium.ui.modaldialog.DialogDismissalCause;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', '', 'import java.util.ArrayList;', 'import java.util.List;', '', '/**', ' * JNI Bridge for {@link AuthenticatorSelectionDialog}', ' */', '@JNINamespace(""autofill"")', 'public class AuthenticatorSelectionDialogBridge implements AuthenticatorSelectionDialog.Listener {', '    private final long mNativeCardUnmaskAuthenticationSelectionDialogView;', '    private final Context mContext;', '    private AuthenticatorSelectionDialog mAuthenticatorSelectionDialog;', '', '    public AuthenticatorSelectionDialogBridge(long nativeAuthenticatorSelectionDialogView,', '            Context context, ModalDialogManager modalDialogManager) {', '        mNativeCardUnmaskAuthenticationSelectionDialogView = nativeAuthenticatorSelectionDialogView;', '        mContext = context;', '        mAuthenticatorSelectionDialog =', '                new AuthenticatorSelectionDialog(context, this, modalDialogManager);', '    }', '', '    @CalledByNative', '    public static AuthenticatorSelectionDialogBridge create(', '            long nativeAuthenticatorSelectionDialogView, WindowAndroid windowAndroid) {', '        return new AuthenticatorSelectionDialogBridge(nativeAuthenticatorSelectionDialogView,', '                windowAndroid.getActivity().get(), windowAndroid.getModalDialogManager());', '    }', '', '    /**', '     * Create a Java List of {@link AuthenticatorOption} and return it.', '     *', '     * @return List of AuthenticatorOptions.', '     */', '    @CalledByNative', '    private static List<AuthenticatorOption> createAuthenticatorOptionList() {', '        return new ArrayList<>();', '    }', '', '    /**', '     * Constructs an {@link AuthenticatorOption} object and adds it to the list that was passed in.', '     *', '     * @param list List to add to.', '     * @param title Title of {@link AuthenticatorOption}.', '     * @param identifier id of {@link AuthenticatorOption}.', '     * @param description Description of {@link AuthenticatorOption}.', '     * @param type type of {@link CardUnmaskChallengeOptionType}. Used to determine the icon that', '     *         should be shown.', '     */', '    @CalledByNative', '    private static void createAuthenticatorOptionAndAddToList(List<AuthenticatorOption> list,', '            String title, String identifier, String description, int type) {']}, {'a': ['        if (list == null) {', '            return;', '        }'], 'b': ['        if (list == null) return;']}, {'ab': ['', '        int iconResId = 0;', ""        // We need to map the icon on this side, since the ID isn't available on the C++ side."", '        switch (type) {', '            case CardUnmaskChallengeOptionType.SmsOtp:', '                iconResId = R.drawable.outline_sms_24;', '                break;', '            case CardUnmaskChallengeOptionType.UnknownType:', '                // This should never happen', '                break;', '        }', '        AuthenticatorOption authenticatorOption = new AuthenticatorOption.Builder()', '                                                          .setTitle(title)', '                                                          .setIdentifier(identifier)', '                                                          .setDescription(description)', '                                                          .setIconResId(iconResId)', '                                                          .build();', '        list.add(authenticatorOption);', '    }', '', '    /**', '     * Shows an Authenticator Selection dialog.', '     *', '     * @param authenticatorOptions The authenticator options available to the user.', '     */', '    @CalledByNative', '    public void show(List<AuthenticatorOption> authenticatorOptions) {', '        mAuthenticatorSelectionDialog.show(authenticatorOptions);', '    }', '', '    /**', '     * Dismisses the Authenticator Selection Dialog.', '     */', '    @CalledByNative', '    public void dismiss() {', '        mAuthenticatorSelectionDialog.dismiss(DialogDismissalCause.DISMISSED_BY_NATIVE);', '    }', '', '    /**', '     * Notify that the user selected an authenticator option.', '     *', '     * @param authenticatorOptionIdentifier the identifier of the selected option.', '     */', '    @Override', '    public void onOptionSelected(String authenticatorOptionIdentifier) {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onOptionSelected(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView,', '                    authenticatorOptionIdentifier);', '        }', '    }', '', '    /** Notify that the dialog was dismissed. */', '    @Override', '    public void onDialogDismissed() {', '        if (mNativeCardUnmaskAuthenticationSelectionDialogView != 0) {', '            AuthenticatorSelectionDialogBridgeJni.get().onDismissed(', '                    mNativeCardUnmaskAuthenticationSelectionDialogView);', '        }', '    }', '', '    @NativeMethods', '    interface Natives {', '        void onOptionSelected(long nativeAuthenticatorSelectionDialogViewAndroid,', '                String authenticatorOptionIdentifier);', '        void onDismissed(long nativeAuthenticatorSelectionDialogViewAndroid);', '    }', '}', '']}]",chromium%2Fsrc~main~I3d59ceed76d30e2d6ba1517727bba4c56b07c261,11fb33a4b231001e7909a98c0029e54ed954d416,chrome/browser/ui/android/autofill/internal/java/src/org/chromium/chrome/browser/ui/autofill/AuthenticatorSelectionDialogBridge.java,f78ff58c_5da46b46_before.java,f78ff58c_5da46b46_after.java,AuthenticatorSelectionDialogBridge::createAuthenticatorOptionAndAddToList,True,True,"package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }","package VAR_1 ; import VAR_2 . Context ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 . R ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 . ArrayList ; import VAR_12 . List ; public class VAR_13 implements VAR_14 { private final long VAR_15 ; private final Context VAR_16 ; private VAR_17 VAR_18 ; public VAR_13 ( long VAR_19 , Context context , VAR_20 VAR_21 ) { VAR_15 = VAR_19 ; VAR_16 = context ; VAR_18 = new VAR_17 ( context , this , VAR_21 ) ; } public static VAR_13 create ( long VAR_19 , VAR_22 VAR_23 ) { return new VAR_13 ( VAR_19 , VAR_24 ( ) . get ( ) , VAR_25 ( ) ) ; } private static List < VAR_26 > VAR_27 ( ) { return new ArrayList < > ( ) ; } private static void VAR_28 ( List < VAR_26 > list , String VAR_29 , String VAR_30 , String description , int type ) { if ( list == null ) { return ; } int VAR_31 = 0 ; switch ( type ) { case VAR_32 : VAR_31 = VAR_33 ; break ; case VAR_34 : break ; } VAR_26 VAR_35 = new VAR_26 . Builder ( ) . VAR_36 ( VAR_29 ) . VAR_37 ( VAR_30 ) . VAR_38 ( description ) . VAR_39 ( VAR_31 ) . build ( ) ; list . add ( VAR_35 ) ; } public void VAR_40 ( List < VAR_26 > VAR_41 ) { VAR_42 ( VAR_41 ) ; } public void VAR_43 ( ) { VAR_44 ( VAR_45 ) ; } public void VAR_46 ( String VAR_47 ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_46 ( VAR_15 , VAR_47 ) ; } } public void VAR_49 ( ) { if ( VAR_15 != 0 ) { VAR_48 . get ( ) . VAR_50 ( VAR_15 ) ; } } interface VAR_51 { void VAR_46 ( long VAR_52 , String VAR_47 ) ; void VAR_50 ( long VAR_52 ) ; } }",Done
67,f40d885f_697ef2a8,153.0,"nit: addAccounts(accounts, /*areAccountsClickable=*/!hasSingleAccount);
go/java-practices/methods#call-site-literals",153.0,153.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.android.webid;', '', 'import android.os.Handler;', '', 'import androidx.annotation.Px;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.AccountProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.AutoSignInCancelButtonProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.ContinueButtonProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.DataSharingConsentProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.HeaderProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.HeaderProperties.HeaderType;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.ItemType;', 'import org.chromium.chrome.browser.ui.android.webid.data.Account;', 'import org.chromium.chrome.browser.ui.android.webid.data.ClientIdMetadata;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetContent;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetController.StateChangeReason;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetObserver;', 'import org.chromium.components.browser_ui.bottomsheet.EmptyBottomSheetObserver;', 'import org.chromium.components.favicon.LargeIconBridge;', 'import org.chromium.components.favicon.LargeIconBridge.LargeIconCallback;', 'import org.chromium.components.image_fetcher.ImageFetcher;', 'import org.chromium.components.url_formatter.SchemeDisplay;', 'import org.chromium.components.url_formatter.UrlFormatter;', 'import org.chromium.ui.modelutil.MVCListAdapter.ListItem;', 'import org.chromium.ui.modelutil.MVCListAdapter.ModelList;', 'import org.chromium.ui.modelutil.PropertyModel;', 'import org.chromium.url.GURL;', '', 'import java.util.List;', '', '/**', ' * Contains the logic for the AccountSelection component. It sets the state of the model and reacts', ' * to events like clicks.', ' */', 'class AccountSelectionMediator {', '    private boolean mVisible;', '    private final AccountSelectionComponent.Delegate mDelegate;', '    private final ModelList mSheetItems;', '    private final ImageFetcher mImageFetcher;', '    private final LargeIconBridge mLargeIconBridge;', '    private final @Px int mDesiredAvatarSize;', '    private final @Px int mDesiredIconSize;', '', '    private final BottomSheetController mBottomSheetController;', '    private final BottomSheetContent mBottomSheetContent;', '    private final BottomSheetObserver mBottomSheetObserver;', '    private final Handler mAutoSignInTaskHandler = new Handler();', '    // TODO(yigu): Increase the time after adding a continue button for users to', '    // proceed. Eventually this should be specified by IDPs.', '    private static final int AUTO_SIGN_IN_CANCELLATION_TIMER_MS = 5000;', '', '    AccountSelectionMediator(AccountSelectionComponent.Delegate delegate, ModelList sheetItems,', '            BottomSheetController bottomSheetController, BottomSheetContent bottomSheetContent,', '            ImageFetcher imageFetcher, @Px int desiredAvatarSize, LargeIconBridge largeIconBridge,', '            @Px int desiredIconSize) {', '        assert delegate != null;', '        mVisible = false;', '        mDelegate = delegate;', '        mSheetItems = sheetItems;', '        mImageFetcher = imageFetcher;', '        mDesiredAvatarSize = desiredAvatarSize;', '        mLargeIconBridge = largeIconBridge;', '        mDesiredIconSize = desiredIconSize;', '        mBottomSheetController = bottomSheetController;', '        mBottomSheetContent = bottomSheetContent;', '', '        mBottomSheetObserver = new EmptyBottomSheetObserver() {', '            // TODO(majidvp): We should override #onSheetStateChanged() and react to HIDDEN state', '            // since closed is a legacy fixture that can get out of sync with the state is some', '            // situations. https://crbug.com/1215174', '            @Override', '            public void onSheetClosed(@BottomSheetController.StateChangeReason int reason) {', '                super.onSheetClosed(reason);', '                mBottomSheetController.removeObserver(mBottomSheetObserver);', '', '                if (!mVisible) return;', '                onDismissed(reason);', '            }', '        };', '    }', '', '    void addHeader(String url, List<Account> accounts) {', '        boolean useSignInHeader = false;', '        for (Account account : accounts) {', '            if (!account.isSignIn()) continue;', '            useSignInHeader = true;', '            break;', '        }', '        HeaderType headerType;', '        if (useSignInHeader) {', '            headerType = HeaderType.SIGN_IN;', '        } else {', '            headerType =', '                    accounts.size() == 1 ? HeaderType.SINGLE_ACCOUNT : HeaderType.MULTIPLE_ACCOUNT;', '        }', '        String site_url =', '                UrlFormatter.formatUrlForSecurityDisplay(url, SchemeDisplay.OMIT_HTTP_AND_HTTPS);', '', '        // We remove the HTTPS from URL since it is the only protocol that is', '        // allowed with WebID.', '        mSheetItems.add(new ListItem(ItemType.HEADER,', '                new PropertyModel.Builder(HeaderProperties.ALL_KEYS)', '                        .with(HeaderProperties.TYPE, headerType)', '                        .with(HeaderProperties.FORMATTED_URL, site_url)', '                        .build()));', '    }', '', '    void addAccounts(List<Account> accounts, boolean areAccountsClickable) {', '        for (Account account : accounts) {', '            final PropertyModel model = createAccountItem(account, areAccountsClickable);', '            mSheetItems.add(new ListItem(ItemType.ACCOUNT, model));', '            requestIconOrFallbackImage(model);', '            requestAvatarImage(model);', '        }', '    }', '', '    void addButton(Account account, ClientIdMetadata metadata, boolean isAutoSignIn) {', '        if (isAutoSignIn) {', '            assert account.isSignIn();', '            final PropertyModel cancelBtnModel = createAutoSignInCancelBtnItem();', '            mSheetItems.add(new ListItem(ItemType.AUTO_SIGN_IN_CANCEL_BUTTON, cancelBtnModel));', '', '            mAutoSignInTaskHandler.postDelayed(', '                    () -> onAccountSelected(account), AUTO_SIGN_IN_CANCELLATION_TIMER_MS);', '            return;', '        }', '', '        // Shows the continue button for both sign-up and non auto-sign-in.', '        final PropertyModel continueBtnModel = createContinueBtnItem(account);', '        mSheetItems.add(new ListItem(ItemType.CONTINUE_BUTTON, continueBtnModel));', '', '        // Only show the user data sharing consent text for sign up.', '        if (!account.isSignIn()) {', '            String provider_url = UrlFormatter.formatUrlForSecurityDisplay(', '                    account.getOriginUrl(), SchemeDisplay.OMIT_HTTP_AND_HTTPS);', '            mSheetItems.add(new ListItem(ItemType.DATA_SHARING_CONSENT,', '                    createDataSharingConsentItem(provider_url, metadata)));', '        }', '    }', '', '    void showAccounts(', '            String url, List<Account> accounts, ClientIdMetadata metadata, boolean isAutoSignIn) {', '        mSheetItems.clear();', '        addHeader(url, accounts);', '        boolean hasSingleAccount = (accounts.size() == 1);']}, {'a': ['        addAccounts(accounts, /*areAccountsClickable=*/!hasSingleAccount);'], 'b': ['        addAccounts(accounts, !hasSingleAccount /* areAccountsClickable */);']}, {'ab': ['        if (hasSingleAccount) {', '            addButton(accounts.get(0), metadata, isAutoSignIn);', '        }', '', '        showContent();', '    }', '', '    /**', '     * Requests to show the bottom sheet. If it is not possible to immediately show the content', '     * (e.g., higher priority content is being shown) it removes the request from the bottom sheet', '     * controller queue and notifies the delegate of the dismissal.', '     */', '    @VisibleForTesting', '    void showContent() {', '        if (mBottomSheetController.requestShowContent(mBottomSheetContent, true)) {', '            mVisible = true;', '            mBottomSheetController.addObserver(mBottomSheetObserver);', '        } else {', '            onDismissed(BottomSheetController.StateChangeReason.NONE);', '        }', '    }', '', '    /**', '     * Requests to hide the bottom sheet.', '     */', '    void hideContent() {', '        mVisible = false;', '        mBottomSheetController.hideContent(mBottomSheetContent, true);', '    }', '', '    private void requestAvatarImage(PropertyModel accountModel) {', '        Account account = accountModel.get(AccountProperties.ACCOUNT);', '        final String name = account.getName();', '        final String avatarURL = account.getPictureUrl().getSpec();', '', '        if (!avatarURL.isEmpty()) {', '            ImageFetcher.Params params = ImageFetcher.Params.create(avatarURL,', '                    ImageFetcher.WEB_ID_ACCOUNT_SELECTION_UMA_CLIENT_NAME, mDesiredAvatarSize,', '                    mDesiredAvatarSize);', '', '            mImageFetcher.fetchImage(params, bitmap -> {', '                accountModel.set(AccountProperties.AVATAR,', '                        new AccountProperties.Avatar(name, bitmap, mDesiredAvatarSize));', '            });', '        } else {', '            accountModel.set(AccountProperties.AVATAR,', '                    new AccountProperties.Avatar(name, null, mDesiredAvatarSize));', '        }', '    }', '', '    private void requestIconOrFallbackImage(PropertyModel accountModel) {', '        Account account = accountModel.get(AccountProperties.ACCOUNT);', '        final GURL iconOrigin = account.getOriginUrl();', '        final LargeIconCallback setIcon = (icon, fallbackColor, hasDefaultColor, type) -> {', '            accountModel.set(AccountProperties.FAVICON_OR_FALLBACK,', '                    new AccountProperties.FaviconOrFallback(', '                            iconOrigin, icon, fallbackColor, mDesiredIconSize));', '        };', '        mLargeIconBridge.getLargeIconForUrl(iconOrigin, mDesiredIconSize, setIcon);', '    }', '', '    boolean isVisible() {', '        return mVisible;', '    }', '', '    void onAccountSelected(Account account) {', '        if (!mVisible) return;', '        hideContent();', '        mDelegate.onAccountSelected(account);', '    }', '', '    void onDismissed(@StateChangeReason int reason) {', '        hideContent();', '        mDelegate.onDismissed();', '    }', '', '    void onAutoSignInCancelled() {', '        hideContent();', '        mDelegate.onAutoSignInCancelled();', '    }', '', '    private PropertyModel createAccountItem(Account account, boolean isAccountClickable) {', '        PropertyModel.Builder modelBuilder = new PropertyModel.Builder(AccountProperties.ALL_KEYS)', '                                                     .with(AccountProperties.ACCOUNT, account);', '        if (isAccountClickable) {', '            modelBuilder.with(AccountProperties.ON_CLICK_LISTENER, this::onAccountSelected);', '        }', '        return modelBuilder.build();', '    }', '', '    private PropertyModel createContinueBtnItem(Account account) {', '        return new PropertyModel.Builder(ContinueButtonProperties.ALL_KEYS)', '                .with(ContinueButtonProperties.ACCOUNT, account)', '                .with(ContinueButtonProperties.ON_CLICK_LISTENER, this::onAccountSelected)', '                .build();', '    }', '', '    private PropertyModel createAutoSignInCancelBtnItem() {', '        return new PropertyModel.Builder(AutoSignInCancelButtonProperties.ALL_KEYS)', '                .with(AutoSignInCancelButtonProperties.ON_CLICK_LISTENER,', '                        this::onAutoSignInCancelled)', '                .build();', '    }', '', '    private PropertyModel createDataSharingConsentItem(String provider, ClientIdMetadata metadata) {', '        return new PropertyModel.Builder(DataSharingConsentProperties.ALL_KEYS)', '                .with(DataSharingConsentProperties.PROVIDER_URL, provider)', '                .with(DataSharingConsentProperties.TERMS_OF_SERVICE_URL,', '                        metadata.getTermsOfServiceUrl().getValidSpecOrEmpty())', '                .with(DataSharingConsentProperties.PRIVACY_POLICY_URL,', '                        metadata.getPrivacyPolicyUrl().getValidSpecOrEmpty())', '                .build();', '    }', '}', '']}]",chromium%2Fsrc~main~Ia8d49728a83d1db67ef658d13e9dee307480e922,f2396dc030d632db7e00809b1d7b4e89673cd62a,chrome/browser/ui/android/webid/internal/java/src/org/chromium/chrome/browser/ui/android/webid/AccountSelectionMediator.java,f40d885f_697ef2a8_before.java,f40d885f_697ef2a8_after.java,AccountSelectionMediator::showAccounts,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 . List ; class VAR_29 { private boolean VAR_30 ; private final VAR_31 VAR_32 ; private final VAR_33 VAR_34 ; private final VAR_35 VAR_36 ; private final VAR_37 VAR_38 ; private final private final private final VAR_39 VAR_40 ; private final VAR_41 VAR_42 ; private final VAR_43 VAR_44 ; private final VAR_45 VAR_46 = new VAR_45 ( ) ; private static final int VAR_47 = INT_1 ; VAR_29 ( VAR_31 VAR_48 , VAR_33 VAR_49 , VAR_39 VAR_50 , VAR_41 VAR_51 , VAR_35 VAR_52 , assert VAR_48 != null ; VAR_30 = false ; VAR_32 = VAR_48 ; VAR_34 = VAR_49 ; VAR_36 = VAR_52 ; VAR_53 = VAR_54 ; VAR_38 = VAR_55 ; VAR_56 = VAR_57 ; VAR_40 = VAR_50 ; VAR_42 = VAR_51 ; VAR_44 = new VAR_58 ( ) { public void VAR_59 ( super . VAR_59 ( VAR_60 ) ; VAR_61 ( VAR_44 ) ; if ( ! VAR_30 ) return ; VAR_62 ( VAR_60 ) ; } } ; } void VAR_63 ( String url , List < VAR_64 > VAR_65 ) { boolean VAR_66 = false ; for ( VAR_64 VAR_67 : VAR_65 ) { if ( ! VAR_68 ( ) ) continue ; VAR_66 = true ; break ; } VAR_69 VAR_70 ; if ( VAR_66 ) { VAR_70 = VAR_71 ; } else { VAR_70 = VAR_65 . size ( ) == 1 ? VAR_72 : VAR_73 ; } String VAR_74 = VAR_75 ( url , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_78 , new VAR_79 . Builder ( VAR_80 ) . VAR_81 ( VAR_82 , VAR_70 ) . VAR_81 ( VAR_83 , VAR_74 ) . build ( ) ) ) ; } void VAR_84 ( List < VAR_64 > VAR_65 , boolean VAR_85 ) { for ( VAR_64 VAR_67 : VAR_65 ) { final VAR_79 model = VAR_86 ( VAR_67 , VAR_85 ) ; VAR_34 . add ( new VAR_77 ( VAR_87 , model ) ) ; VAR_88 ( model ) ; VAR_89 ( model ) ; } } void VAR_90 ( VAR_64 VAR_67 , VAR_91 metadata , boolean VAR_92 ) { if ( VAR_92 ) { assert VAR_68 ( ) ; final VAR_79 VAR_93 = VAR_94 ( ) ; VAR_34 . add ( new VAR_77 ( VAR_95 , VAR_93 ) ) ; VAR_96 ( ( ) - > VAR_97 ( VAR_67 ) , VAR_47 ) ; return ; } final VAR_79 VAR_98 = VAR_99 ( VAR_67 ) ; VAR_34 . add ( new VAR_77 ( VAR_100 , VAR_98 ) ) ; if ( ! VAR_68 ( ) ) { String VAR_101 = VAR_75 ( VAR_102 ( ) , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_103 , VAR_104 ( VAR_101 , metadata ) ) ) ; } } void VAR_105 ( String url , List < VAR_64 > VAR_65 , VAR_91 metadata , boolean VAR_92 ) { VAR_34 . clear ( ) ; VAR_63 ( url , VAR_65 ) ; boolean VAR_106 = ( VAR_65 . size ( ) == 1 ) ; if ( VAR_106 ) { VAR_90 ( VAR_65 . get ( 0 ) , metadata , VAR_92 ) ; } VAR_107 ( ) ; } void VAR_107 ( ) { if ( VAR_108 ( VAR_42 , true ) ) { VAR_30 = true ; VAR_109 ( VAR_44 ) ; } else { VAR_62 ( VAR_110 . NONE ) ; } } void VAR_111 ( ) { VAR_30 = false ; VAR_112 ( VAR_42 , true ) ; } private void VAR_89 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final String name = VAR_67 . getName ( ) ; final String VAR_115 = VAR_116 ( ) . VAR_117 ( ) ; if ( ! VAR_115 . isEmpty ( ) ) { VAR_118 params = VAR_118 . create ( VAR_115 , VAR_119 , VAR_53 , VAR_53 ) ; VAR_120 ( params , VAR_121 - > { VAR_113 . set ( VAR_122 , new VAR_123 ( name , VAR_121 , VAR_53 ) ) ; } ) ; } else { VAR_113 . set ( VAR_122 , new VAR_123 ( name , null , VAR_53 ) ) ; } } private void VAR_88 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final VAR_124 VAR_125 = VAR_102 ( ) ; final VAR_126 VAR_127 = ( VAR_128 , VAR_129 , VAR_130 , type ) - > { VAR_113 . set ( VAR_131 , new VAR_132 ( VAR_125 , VAR_128 , VAR_129 , VAR_56 ) ) ; } ; VAR_133 ( VAR_125 , VAR_56 , VAR_127 ) ; } boolean VAR_134 ( ) { return VAR_30 ; } void VAR_97 ( VAR_64 VAR_67 ) { if ( ! VAR_30 ) return ; VAR_111 ( ) ; VAR_135 ( VAR_67 ) ; } void VAR_62 ( VAR_111 ( ) ; VAR_136 ( ) ; } void VAR_137 ( ) { VAR_111 ( ) ; VAR_138 ( ) ; } private VAR_79 VAR_86 ( VAR_64 VAR_67 , boolean VAR_139 ) { VAR_79 . Builder VAR_140 = new VAR_79 . Builder ( VAR_141 ) . VAR_81 ( VAR_114 , VAR_67 ) ; if ( VAR_139 ) { VAR_142 ( VAR_143 , this : : VAR_97 ) ; } return VAR_140 . build ( ) ; } private VAR_79 VAR_99 ( VAR_64 VAR_67 ) { return new VAR_79 . Builder ( VAR_144 ) . VAR_81 ( VAR_145 , VAR_67 ) . VAR_81 ( VAR_146 , this : : VAR_97 ) . build ( ) ; } private VAR_79 VAR_94 ( ) { return new VAR_79 . Builder ( VAR_147 ) . VAR_81 ( VAR_148 , this : : VAR_137 ) . build ( ) ; } private VAR_79 VAR_104 ( String VAR_149 , VAR_91 metadata ) { return new VAR_79 . Builder ( VAR_150 ) . VAR_81 ( VAR_151 , VAR_149 ) . VAR_81 ( VAR_152 , VAR_153 ( ) . VAR_154 ( ) ) . VAR_81 ( VAR_155 , VAR_156 ( ) . VAR_154 ( ) ) . build ( ) ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 . List ; class VAR_29 { private boolean VAR_30 ; private final VAR_31 VAR_32 ; private final VAR_33 VAR_34 ; private final VAR_35 VAR_36 ; private final VAR_37 VAR_38 ; private final private final private final VAR_39 VAR_40 ; private final VAR_41 VAR_42 ; private final VAR_43 VAR_44 ; private final VAR_45 VAR_46 = new VAR_45 ( ) ; private static final int VAR_47 = INT_1 ; VAR_29 ( VAR_31 VAR_48 , VAR_33 VAR_49 , VAR_39 VAR_50 , VAR_41 VAR_51 , VAR_35 VAR_52 , assert VAR_48 != null ; VAR_30 = false ; VAR_32 = VAR_48 ; VAR_34 = VAR_49 ; VAR_36 = VAR_52 ; VAR_53 = VAR_54 ; VAR_38 = VAR_55 ; VAR_56 = VAR_57 ; VAR_40 = VAR_50 ; VAR_42 = VAR_51 ; VAR_44 = new VAR_58 ( ) { public void VAR_59 ( super . VAR_59 ( VAR_60 ) ; VAR_61 ( VAR_44 ) ; if ( ! VAR_30 ) return ; VAR_62 ( VAR_60 ) ; } } ; } void VAR_63 ( String url , List < VAR_64 > VAR_65 ) { boolean VAR_66 = false ; for ( VAR_64 VAR_67 : VAR_65 ) { if ( ! VAR_68 ( ) ) continue ; VAR_66 = true ; break ; } VAR_69 VAR_70 ; if ( VAR_66 ) { VAR_70 = VAR_71 ; } else { VAR_70 = VAR_65 . size ( ) == 1 ? VAR_72 : VAR_73 ; } String VAR_74 = VAR_75 ( url , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_78 , new VAR_79 . Builder ( VAR_80 ) . VAR_81 ( VAR_82 , VAR_70 ) . VAR_81 ( VAR_83 , VAR_74 ) . build ( ) ) ) ; } void VAR_84 ( List < VAR_64 > VAR_65 , boolean VAR_85 ) { for ( VAR_64 VAR_67 : VAR_65 ) { final VAR_79 model = VAR_86 ( VAR_67 , VAR_85 ) ; VAR_34 . add ( new VAR_77 ( VAR_87 , model ) ) ; VAR_88 ( model ) ; VAR_89 ( model ) ; } } void VAR_90 ( VAR_64 VAR_67 , VAR_91 metadata , boolean VAR_92 ) { if ( VAR_92 ) { assert VAR_68 ( ) ; final VAR_79 VAR_93 = VAR_94 ( ) ; VAR_34 . add ( new VAR_77 ( VAR_95 , VAR_93 ) ) ; VAR_96 ( ( ) - > VAR_97 ( VAR_67 ) , VAR_47 ) ; return ; } final VAR_79 VAR_98 = VAR_99 ( VAR_67 ) ; VAR_34 . add ( new VAR_77 ( VAR_100 , VAR_98 ) ) ; if ( ! VAR_68 ( ) ) { String VAR_101 = VAR_75 ( VAR_102 ( ) , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_103 , VAR_104 ( VAR_101 , metadata ) ) ) ; } } void VAR_105 ( String url , List < VAR_64 > VAR_65 , VAR_91 metadata , boolean VAR_92 ) { VAR_34 . clear ( ) ; VAR_63 ( url , VAR_65 ) ; boolean VAR_106 = ( VAR_65 . size ( ) == 1 ) ; VAR_84 ( VAR_65 , ! VAR_106 ) ; if ( VAR_106 ) { VAR_90 ( VAR_65 . get ( 0 ) , metadata , VAR_92 ) ; } VAR_107 ( ) ; } void VAR_107 ( ) { if ( VAR_108 ( VAR_42 , true ) ) { VAR_30 = true ; VAR_109 ( VAR_44 ) ; } else { VAR_62 ( VAR_110 . NONE ) ; } } void VAR_111 ( ) { VAR_30 = false ; VAR_112 ( VAR_42 , true ) ; } private void VAR_89 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final String name = VAR_67 . getName ( ) ; final String VAR_115 = VAR_116 ( ) . VAR_117 ( ) ; if ( ! VAR_115 . isEmpty ( ) ) { VAR_118 params = VAR_118 . create ( VAR_115 , VAR_119 , VAR_53 , VAR_53 ) ; VAR_120 ( params , VAR_121 - > { VAR_113 . set ( VAR_122 , new VAR_123 ( name , VAR_121 , VAR_53 ) ) ; } ) ; } else { VAR_113 . set ( VAR_122 , new VAR_123 ( name , null , VAR_53 ) ) ; } } private void VAR_88 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final VAR_124 VAR_125 = VAR_102 ( ) ; final VAR_126 VAR_127 = ( VAR_128 , VAR_129 , VAR_130 , type ) - > { VAR_113 . set ( VAR_131 , new VAR_132 ( VAR_125 , VAR_128 , VAR_129 , VAR_56 ) ) ; } ; VAR_133 ( VAR_125 , VAR_56 , VAR_127 ) ; } boolean VAR_134 ( ) { return VAR_30 ; } void VAR_97 ( VAR_64 VAR_67 ) { if ( ! VAR_30 ) return ; VAR_111 ( ) ; VAR_135 ( VAR_67 ) ; } void VAR_62 ( VAR_111 ( ) ; VAR_136 ( ) ; } void VAR_137 ( ) { VAR_111 ( ) ; VAR_138 ( ) ; } private VAR_79 VAR_86 ( VAR_64 VAR_67 , boolean VAR_139 ) { VAR_79 . Builder VAR_140 = new VAR_79 . Builder ( VAR_141 ) . VAR_81 ( VAR_114 , VAR_67 ) ; if ( VAR_139 ) { VAR_142 ( VAR_143 , this : : VAR_97 ) ; } return VAR_140 . build ( ) ; } private VAR_79 VAR_99 ( VAR_64 VAR_67 ) { return new VAR_79 . Builder ( VAR_144 ) . VAR_81 ( VAR_145 , VAR_67 ) . VAR_81 ( VAR_146 , this : : VAR_97 ) . build ( ) ; } private VAR_79 VAR_94 ( ) { return new VAR_79 . Builder ( VAR_147 ) . VAR_81 ( VAR_148 , this : : VAR_137 ) . build ( ) ; } private VAR_79 VAR_104 ( String VAR_149 , VAR_91 metadata ) { return new VAR_79 . Builder ( VAR_150 ) . VAR_81 ( VAR_151 , VAR_149 ) . VAR_81 ( VAR_152 , VAR_153 ( ) . VAR_154 ( ) ) . VAR_81 ( VAR_155 , VAR_156 ( ) . VAR_154 ( ) ) . build ( ) ; } }","nit: addVAR_64s(VAR_65, /*areVAR_64sClickable=*/!hasSingleVAR_64);
go/java-practices/methods#call-site-literals"
68,c2c02c8f_99d2f0a6,153.0,Done,153.0,153.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.ui.android.webid;', '', 'import android.os.Handler;', '', 'import androidx.annotation.Px;', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.AccountProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.AutoSignInCancelButtonProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.ContinueButtonProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.DataSharingConsentProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.HeaderProperties;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.HeaderProperties.HeaderType;', 'import org.chromium.chrome.browser.ui.android.webid.AccountSelectionProperties.ItemType;', 'import org.chromium.chrome.browser.ui.android.webid.data.Account;', 'import org.chromium.chrome.browser.ui.android.webid.data.ClientIdMetadata;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetContent;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetController.StateChangeReason;', 'import org.chromium.components.browser_ui.bottomsheet.BottomSheetObserver;', 'import org.chromium.components.browser_ui.bottomsheet.EmptyBottomSheetObserver;', 'import org.chromium.components.favicon.LargeIconBridge;', 'import org.chromium.components.favicon.LargeIconBridge.LargeIconCallback;', 'import org.chromium.components.image_fetcher.ImageFetcher;', 'import org.chromium.components.url_formatter.SchemeDisplay;', 'import org.chromium.components.url_formatter.UrlFormatter;', 'import org.chromium.ui.modelutil.MVCListAdapter.ListItem;', 'import org.chromium.ui.modelutil.MVCListAdapter.ModelList;', 'import org.chromium.ui.modelutil.PropertyModel;', 'import org.chromium.url.GURL;', '', 'import java.util.List;', '', '/**', ' * Contains the logic for the AccountSelection component. It sets the state of the model and reacts', ' * to events like clicks.', ' */', 'class AccountSelectionMediator {', '    private boolean mVisible;', '    private final AccountSelectionComponent.Delegate mDelegate;', '    private final ModelList mSheetItems;', '    private final ImageFetcher mImageFetcher;', '    private final LargeIconBridge mLargeIconBridge;', '    private final @Px int mDesiredAvatarSize;', '    private final @Px int mDesiredIconSize;', '', '    private final BottomSheetController mBottomSheetController;', '    private final BottomSheetContent mBottomSheetContent;', '    private final BottomSheetObserver mBottomSheetObserver;', '    private final Handler mAutoSignInTaskHandler = new Handler();', '    // TODO(yigu): Increase the time after adding a continue button for users to', '    // proceed. Eventually this should be specified by IDPs.', '    private static final int AUTO_SIGN_IN_CANCELLATION_TIMER_MS = 5000;', '', '    AccountSelectionMediator(AccountSelectionComponent.Delegate delegate, ModelList sheetItems,', '            BottomSheetController bottomSheetController, BottomSheetContent bottomSheetContent,', '            ImageFetcher imageFetcher, @Px int desiredAvatarSize, LargeIconBridge largeIconBridge,', '            @Px int desiredIconSize) {', '        assert delegate != null;', '        mVisible = false;', '        mDelegate = delegate;', '        mSheetItems = sheetItems;', '        mImageFetcher = imageFetcher;', '        mDesiredAvatarSize = desiredAvatarSize;', '        mLargeIconBridge = largeIconBridge;', '        mDesiredIconSize = desiredIconSize;', '        mBottomSheetController = bottomSheetController;', '        mBottomSheetContent = bottomSheetContent;', '', '        mBottomSheetObserver = new EmptyBottomSheetObserver() {', '            // TODO(majidvp): We should override #onSheetStateChanged() and react to HIDDEN state', '            // since closed is a legacy fixture that can get out of sync with the state is some', '            // situations. https://crbug.com/1215174', '            @Override', '            public void onSheetClosed(@BottomSheetController.StateChangeReason int reason) {', '                super.onSheetClosed(reason);', '                mBottomSheetController.removeObserver(mBottomSheetObserver);', '', '                if (!mVisible) return;', '                onDismissed(reason);', '            }', '        };', '    }', '', '    void addHeader(String url, List<Account> accounts) {', '        boolean useSignInHeader = false;', '        for (Account account : accounts) {', '            if (!account.isSignIn()) continue;', '            useSignInHeader = true;', '            break;', '        }', '        HeaderType headerType;', '        if (useSignInHeader) {', '            headerType = HeaderType.SIGN_IN;', '        } else {', '            headerType =', '                    accounts.size() == 1 ? HeaderType.SINGLE_ACCOUNT : HeaderType.MULTIPLE_ACCOUNT;', '        }', '        String site_url =', '                UrlFormatter.formatUrlForSecurityDisplay(url, SchemeDisplay.OMIT_HTTP_AND_HTTPS);', '', '        // We remove the HTTPS from URL since it is the only protocol that is', '        // allowed with WebID.', '        mSheetItems.add(new ListItem(ItemType.HEADER,', '                new PropertyModel.Builder(HeaderProperties.ALL_KEYS)', '                        .with(HeaderProperties.TYPE, headerType)', '                        .with(HeaderProperties.FORMATTED_URL, site_url)', '                        .build()));', '    }', '', '    void addAccounts(List<Account> accounts, boolean areAccountsClickable) {', '        for (Account account : accounts) {', '            final PropertyModel model = createAccountItem(account, areAccountsClickable);', '            mSheetItems.add(new ListItem(ItemType.ACCOUNT, model));', '            requestIconOrFallbackImage(model);', '            requestAvatarImage(model);', '        }', '    }', '', '    void addButton(Account account, ClientIdMetadata metadata, boolean isAutoSignIn) {', '        if (isAutoSignIn) {', '            assert account.isSignIn();', '            final PropertyModel cancelBtnModel = createAutoSignInCancelBtnItem();', '            mSheetItems.add(new ListItem(ItemType.AUTO_SIGN_IN_CANCEL_BUTTON, cancelBtnModel));', '', '            mAutoSignInTaskHandler.postDelayed(', '                    () -> onAccountSelected(account), AUTO_SIGN_IN_CANCELLATION_TIMER_MS);', '            return;', '        }', '', '        // Shows the continue button for both sign-up and non auto-sign-in.', '        final PropertyModel continueBtnModel = createContinueBtnItem(account);', '        mSheetItems.add(new ListItem(ItemType.CONTINUE_BUTTON, continueBtnModel));', '', '        // Only show the user data sharing consent text for sign up.', '        if (!account.isSignIn()) {', '            String provider_url = UrlFormatter.formatUrlForSecurityDisplay(', '                    account.getOriginUrl(), SchemeDisplay.OMIT_HTTP_AND_HTTPS);', '            mSheetItems.add(new ListItem(ItemType.DATA_SHARING_CONSENT,', '                    createDataSharingConsentItem(provider_url, metadata)));', '        }', '    }', '', '    void showAccounts(', '            String url, List<Account> accounts, ClientIdMetadata metadata, boolean isAutoSignIn) {', '        mSheetItems.clear();', '        addHeader(url, accounts);', '        boolean hasSingleAccount = (accounts.size() == 1);']}, {'a': ['        addAccounts(accounts, /*areAccountsClickable=*/!hasSingleAccount);'], 'b': ['        addAccounts(accounts, !hasSingleAccount /* areAccountsClickable */);']}, {'ab': ['        if (hasSingleAccount) {', '            addButton(accounts.get(0), metadata, isAutoSignIn);', '        }', '', '        showContent();', '    }', '', '    /**', '     * Requests to show the bottom sheet. If it is not possible to immediately show the content', '     * (e.g., higher priority content is being shown) it removes the request from the bottom sheet', '     * controller queue and notifies the delegate of the dismissal.', '     */', '    @VisibleForTesting', '    void showContent() {', '        if (mBottomSheetController.requestShowContent(mBottomSheetContent, true)) {', '            mVisible = true;', '            mBottomSheetController.addObserver(mBottomSheetObserver);', '        } else {', '            onDismissed(BottomSheetController.StateChangeReason.NONE);', '        }', '    }', '', '    /**', '     * Requests to hide the bottom sheet.', '     */', '    void hideContent() {', '        mVisible = false;', '        mBottomSheetController.hideContent(mBottomSheetContent, true);', '    }', '', '    private void requestAvatarImage(PropertyModel accountModel) {', '        Account account = accountModel.get(AccountProperties.ACCOUNT);', '        final String name = account.getName();', '        final String avatarURL = account.getPictureUrl().getSpec();', '', '        if (!avatarURL.isEmpty()) {', '            ImageFetcher.Params params = ImageFetcher.Params.create(avatarURL,', '                    ImageFetcher.WEB_ID_ACCOUNT_SELECTION_UMA_CLIENT_NAME, mDesiredAvatarSize,', '                    mDesiredAvatarSize);', '', '            mImageFetcher.fetchImage(params, bitmap -> {', '                accountModel.set(AccountProperties.AVATAR,', '                        new AccountProperties.Avatar(name, bitmap, mDesiredAvatarSize));', '            });', '        } else {', '            accountModel.set(AccountProperties.AVATAR,', '                    new AccountProperties.Avatar(name, null, mDesiredAvatarSize));', '        }', '    }', '', '    private void requestIconOrFallbackImage(PropertyModel accountModel) {', '        Account account = accountModel.get(AccountProperties.ACCOUNT);', '        final GURL iconOrigin = account.getOriginUrl();', '        final LargeIconCallback setIcon = (icon, fallbackColor, hasDefaultColor, type) -> {', '            accountModel.set(AccountProperties.FAVICON_OR_FALLBACK,', '                    new AccountProperties.FaviconOrFallback(', '                            iconOrigin, icon, fallbackColor, mDesiredIconSize));', '        };', '        mLargeIconBridge.getLargeIconForUrl(iconOrigin, mDesiredIconSize, setIcon);', '    }', '', '    boolean isVisible() {', '        return mVisible;', '    }', '', '    void onAccountSelected(Account account) {', '        if (!mVisible) return;', '        hideContent();', '        mDelegate.onAccountSelected(account);', '    }', '', '    void onDismissed(@StateChangeReason int reason) {', '        hideContent();', '        mDelegate.onDismissed();', '    }', '', '    void onAutoSignInCancelled() {', '        hideContent();', '        mDelegate.onAutoSignInCancelled();', '    }', '', '    private PropertyModel createAccountItem(Account account, boolean isAccountClickable) {', '        PropertyModel.Builder modelBuilder = new PropertyModel.Builder(AccountProperties.ALL_KEYS)', '                                                     .with(AccountProperties.ACCOUNT, account);', '        if (isAccountClickable) {', '            modelBuilder.with(AccountProperties.ON_CLICK_LISTENER, this::onAccountSelected);', '        }', '        return modelBuilder.build();', '    }', '', '    private PropertyModel createContinueBtnItem(Account account) {', '        return new PropertyModel.Builder(ContinueButtonProperties.ALL_KEYS)', '                .with(ContinueButtonProperties.ACCOUNT, account)', '                .with(ContinueButtonProperties.ON_CLICK_LISTENER, this::onAccountSelected)', '                .build();', '    }', '', '    private PropertyModel createAutoSignInCancelBtnItem() {', '        return new PropertyModel.Builder(AutoSignInCancelButtonProperties.ALL_KEYS)', '                .with(AutoSignInCancelButtonProperties.ON_CLICK_LISTENER,', '                        this::onAutoSignInCancelled)', '                .build();', '    }', '', '    private PropertyModel createDataSharingConsentItem(String provider, ClientIdMetadata metadata) {', '        return new PropertyModel.Builder(DataSharingConsentProperties.ALL_KEYS)', '                .with(DataSharingConsentProperties.PROVIDER_URL, provider)', '                .with(DataSharingConsentProperties.TERMS_OF_SERVICE_URL,', '                        metadata.getTermsOfServiceUrl().getValidSpecOrEmpty())', '                .with(DataSharingConsentProperties.PRIVACY_POLICY_URL,', '                        metadata.getPrivacyPolicyUrl().getValidSpecOrEmpty())', '                .build();', '    }', '}', '']}]",chromium%2Fsrc~main~Ia8d49728a83d1db67ef658d13e9dee307480e922,f2396dc030d632db7e00809b1d7b4e89673cd62a,chrome/browser/ui/android/webid/internal/java/src/org/chromium/chrome/browser/ui/android/webid/AccountSelectionMediator.java,c2c02c8f_99d2f0a6_before.java,c2c02c8f_99d2f0a6_after.java,AccountSelectionMediator::showAccounts,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 . List ; class VAR_29 { private boolean VAR_30 ; private final VAR_31 VAR_32 ; private final VAR_33 VAR_34 ; private final VAR_35 VAR_36 ; private final VAR_37 VAR_38 ; private final private final private final VAR_39 VAR_40 ; private final VAR_41 VAR_42 ; private final VAR_43 VAR_44 ; private final VAR_45 VAR_46 = new VAR_45 ( ) ; private static final int VAR_47 = INT_1 ; VAR_29 ( VAR_31 VAR_48 , VAR_33 VAR_49 , VAR_39 VAR_50 , VAR_41 VAR_51 , VAR_35 VAR_52 , assert VAR_48 != null ; VAR_30 = false ; VAR_32 = VAR_48 ; VAR_34 = VAR_49 ; VAR_36 = VAR_52 ; VAR_53 = VAR_54 ; VAR_38 = VAR_55 ; VAR_56 = VAR_57 ; VAR_40 = VAR_50 ; VAR_42 = VAR_51 ; VAR_44 = new VAR_58 ( ) { public void VAR_59 ( super . VAR_59 ( VAR_60 ) ; VAR_61 ( VAR_44 ) ; if ( ! VAR_30 ) return ; VAR_62 ( VAR_60 ) ; } } ; } void VAR_63 ( String url , List < VAR_64 > VAR_65 ) { boolean VAR_66 = false ; for ( VAR_64 VAR_67 : VAR_65 ) { if ( ! VAR_68 ( ) ) continue ; VAR_66 = true ; break ; } VAR_69 VAR_70 ; if ( VAR_66 ) { VAR_70 = VAR_71 ; } else { VAR_70 = VAR_65 . size ( ) == 1 ? VAR_72 : VAR_73 ; } String VAR_74 = VAR_75 ( url , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_78 , new VAR_79 . Builder ( VAR_80 ) . VAR_81 ( VAR_82 , VAR_70 ) . VAR_81 ( VAR_83 , VAR_74 ) . build ( ) ) ) ; } void VAR_84 ( List < VAR_64 > VAR_65 , boolean VAR_85 ) { for ( VAR_64 VAR_67 : VAR_65 ) { final VAR_79 model = VAR_86 ( VAR_67 , VAR_85 ) ; VAR_34 . add ( new VAR_77 ( VAR_87 , model ) ) ; VAR_88 ( model ) ; VAR_89 ( model ) ; } } void VAR_90 ( VAR_64 VAR_67 , VAR_91 metadata , boolean VAR_92 ) { if ( VAR_92 ) { assert VAR_68 ( ) ; final VAR_79 VAR_93 = VAR_94 ( ) ; VAR_34 . add ( new VAR_77 ( VAR_95 , VAR_93 ) ) ; VAR_96 ( ( ) - > VAR_97 ( VAR_67 ) , VAR_47 ) ; return ; } final VAR_79 VAR_98 = VAR_99 ( VAR_67 ) ; VAR_34 . add ( new VAR_77 ( VAR_100 , VAR_98 ) ) ; if ( ! VAR_68 ( ) ) { String VAR_101 = VAR_75 ( VAR_102 ( ) , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_103 , VAR_104 ( VAR_101 , metadata ) ) ) ; } } void VAR_105 ( String url , List < VAR_64 > VAR_65 , VAR_91 metadata , boolean VAR_92 ) { VAR_34 . clear ( ) ; VAR_63 ( url , VAR_65 ) ; boolean VAR_106 = ( VAR_65 . size ( ) == 1 ) ; if ( VAR_106 ) { VAR_90 ( VAR_65 . get ( 0 ) , metadata , VAR_92 ) ; } VAR_107 ( ) ; } void VAR_107 ( ) { if ( VAR_108 ( VAR_42 , true ) ) { VAR_30 = true ; VAR_109 ( VAR_44 ) ; } else { VAR_62 ( VAR_110 . NONE ) ; } } void VAR_111 ( ) { VAR_30 = false ; VAR_112 ( VAR_42 , true ) ; } private void VAR_89 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final String name = VAR_67 . getName ( ) ; final String VAR_115 = VAR_116 ( ) . VAR_117 ( ) ; if ( ! VAR_115 . isEmpty ( ) ) { VAR_118 params = VAR_118 . create ( VAR_115 , VAR_119 , VAR_53 , VAR_53 ) ; VAR_120 ( params , VAR_121 - > { VAR_113 . set ( VAR_122 , new VAR_123 ( name , VAR_121 , VAR_53 ) ) ; } ) ; } else { VAR_113 . set ( VAR_122 , new VAR_123 ( name , null , VAR_53 ) ) ; } } private void VAR_88 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final VAR_124 VAR_125 = VAR_102 ( ) ; final VAR_126 VAR_127 = ( VAR_128 , VAR_129 , VAR_130 , type ) - > { VAR_113 . set ( VAR_131 , new VAR_132 ( VAR_125 , VAR_128 , VAR_129 , VAR_56 ) ) ; } ; VAR_133 ( VAR_125 , VAR_56 , VAR_127 ) ; } boolean VAR_134 ( ) { return VAR_30 ; } void VAR_97 ( VAR_64 VAR_67 ) { if ( ! VAR_30 ) return ; VAR_111 ( ) ; VAR_135 ( VAR_67 ) ; } void VAR_62 ( VAR_111 ( ) ; VAR_136 ( ) ; } void VAR_137 ( ) { VAR_111 ( ) ; VAR_138 ( ) ; } private VAR_79 VAR_86 ( VAR_64 VAR_67 , boolean VAR_139 ) { VAR_79 . Builder VAR_140 = new VAR_79 . Builder ( VAR_141 ) . VAR_81 ( VAR_114 , VAR_67 ) ; if ( VAR_139 ) { VAR_142 ( VAR_143 , this : : VAR_97 ) ; } return VAR_140 . build ( ) ; } private VAR_79 VAR_99 ( VAR_64 VAR_67 ) { return new VAR_79 . Builder ( VAR_144 ) . VAR_81 ( VAR_145 , VAR_67 ) . VAR_81 ( VAR_146 , this : : VAR_97 ) . build ( ) ; } private VAR_79 VAR_94 ( ) { return new VAR_79 . Builder ( VAR_147 ) . VAR_81 ( VAR_148 , this : : VAR_137 ) . build ( ) ; } private VAR_79 VAR_104 ( String VAR_149 , VAR_91 metadata ) { return new VAR_79 . Builder ( VAR_150 ) . VAR_81 ( VAR_151 , VAR_149 ) . VAR_81 ( VAR_152 , VAR_153 ( ) . VAR_154 ( ) ) . VAR_81 ( VAR_155 , VAR_156 ( ) . VAR_154 ( ) ) . build ( ) ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 . List ; class VAR_29 { private boolean VAR_30 ; private final VAR_31 VAR_32 ; private final VAR_33 VAR_34 ; private final VAR_35 VAR_36 ; private final VAR_37 VAR_38 ; private final private final private final VAR_39 VAR_40 ; private final VAR_41 VAR_42 ; private final VAR_43 VAR_44 ; private final VAR_45 VAR_46 = new VAR_45 ( ) ; private static final int VAR_47 = INT_1 ; VAR_29 ( VAR_31 VAR_48 , VAR_33 VAR_49 , VAR_39 VAR_50 , VAR_41 VAR_51 , VAR_35 VAR_52 , assert VAR_48 != null ; VAR_30 = false ; VAR_32 = VAR_48 ; VAR_34 = VAR_49 ; VAR_36 = VAR_52 ; VAR_53 = VAR_54 ; VAR_38 = VAR_55 ; VAR_56 = VAR_57 ; VAR_40 = VAR_50 ; VAR_42 = VAR_51 ; VAR_44 = new VAR_58 ( ) { public void VAR_59 ( super . VAR_59 ( VAR_60 ) ; VAR_61 ( VAR_44 ) ; if ( ! VAR_30 ) return ; VAR_62 ( VAR_60 ) ; } } ; } void VAR_63 ( String url , List < VAR_64 > VAR_65 ) { boolean VAR_66 = false ; for ( VAR_64 VAR_67 : VAR_65 ) { if ( ! VAR_68 ( ) ) continue ; VAR_66 = true ; break ; } VAR_69 VAR_70 ; if ( VAR_66 ) { VAR_70 = VAR_71 ; } else { VAR_70 = VAR_65 . size ( ) == 1 ? VAR_72 : VAR_73 ; } String VAR_74 = VAR_75 ( url , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_78 , new VAR_79 . Builder ( VAR_80 ) . VAR_81 ( VAR_82 , VAR_70 ) . VAR_81 ( VAR_83 , VAR_74 ) . build ( ) ) ) ; } void VAR_84 ( List < VAR_64 > VAR_65 , boolean VAR_85 ) { for ( VAR_64 VAR_67 : VAR_65 ) { final VAR_79 model = VAR_86 ( VAR_67 , VAR_85 ) ; VAR_34 . add ( new VAR_77 ( VAR_87 , model ) ) ; VAR_88 ( model ) ; VAR_89 ( model ) ; } } void VAR_90 ( VAR_64 VAR_67 , VAR_91 metadata , boolean VAR_92 ) { if ( VAR_92 ) { assert VAR_68 ( ) ; final VAR_79 VAR_93 = VAR_94 ( ) ; VAR_34 . add ( new VAR_77 ( VAR_95 , VAR_93 ) ) ; VAR_96 ( ( ) - > VAR_97 ( VAR_67 ) , VAR_47 ) ; return ; } final VAR_79 VAR_98 = VAR_99 ( VAR_67 ) ; VAR_34 . add ( new VAR_77 ( VAR_100 , VAR_98 ) ) ; if ( ! VAR_68 ( ) ) { String VAR_101 = VAR_75 ( VAR_102 ( ) , VAR_76 ) ; VAR_34 . add ( new VAR_77 ( VAR_103 , VAR_104 ( VAR_101 , metadata ) ) ) ; } } void VAR_105 ( String url , List < VAR_64 > VAR_65 , VAR_91 metadata , boolean VAR_92 ) { VAR_34 . clear ( ) ; VAR_63 ( url , VAR_65 ) ; boolean VAR_106 = ( VAR_65 . size ( ) == 1 ) ; VAR_84 ( VAR_65 , ! VAR_106 ) ; if ( VAR_106 ) { VAR_90 ( VAR_65 . get ( 0 ) , metadata , VAR_92 ) ; } VAR_107 ( ) ; } void VAR_107 ( ) { if ( VAR_108 ( VAR_42 , true ) ) { VAR_30 = true ; VAR_109 ( VAR_44 ) ; } else { VAR_62 ( VAR_110 . NONE ) ; } } void VAR_111 ( ) { VAR_30 = false ; VAR_112 ( VAR_42 , true ) ; } private void VAR_89 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final String name = VAR_67 . getName ( ) ; final String VAR_115 = VAR_116 ( ) . VAR_117 ( ) ; if ( ! VAR_115 . isEmpty ( ) ) { VAR_118 params = VAR_118 . create ( VAR_115 , VAR_119 , VAR_53 , VAR_53 ) ; VAR_120 ( params , VAR_121 - > { VAR_113 . set ( VAR_122 , new VAR_123 ( name , VAR_121 , VAR_53 ) ) ; } ) ; } else { VAR_113 . set ( VAR_122 , new VAR_123 ( name , null , VAR_53 ) ) ; } } private void VAR_88 ( VAR_79 VAR_113 ) { VAR_64 VAR_67 = VAR_113 . get ( VAR_114 ) ; final VAR_124 VAR_125 = VAR_102 ( ) ; final VAR_126 VAR_127 = ( VAR_128 , VAR_129 , VAR_130 , type ) - > { VAR_113 . set ( VAR_131 , new VAR_132 ( VAR_125 , VAR_128 , VAR_129 , VAR_56 ) ) ; } ; VAR_133 ( VAR_125 , VAR_56 , VAR_127 ) ; } boolean VAR_134 ( ) { return VAR_30 ; } void VAR_97 ( VAR_64 VAR_67 ) { if ( ! VAR_30 ) return ; VAR_111 ( ) ; VAR_135 ( VAR_67 ) ; } void VAR_62 ( VAR_111 ( ) ; VAR_136 ( ) ; } void VAR_137 ( ) { VAR_111 ( ) ; VAR_138 ( ) ; } private VAR_79 VAR_86 ( VAR_64 VAR_67 , boolean VAR_139 ) { VAR_79 . Builder VAR_140 = new VAR_79 . Builder ( VAR_141 ) . VAR_81 ( VAR_114 , VAR_67 ) ; if ( VAR_139 ) { VAR_142 ( VAR_143 , this : : VAR_97 ) ; } return VAR_140 . build ( ) ; } private VAR_79 VAR_99 ( VAR_64 VAR_67 ) { return new VAR_79 . Builder ( VAR_144 ) . VAR_81 ( VAR_145 , VAR_67 ) . VAR_81 ( VAR_146 , this : : VAR_97 ) . build ( ) ; } private VAR_79 VAR_94 ( ) { return new VAR_79 . Builder ( VAR_147 ) . VAR_81 ( VAR_148 , this : : VAR_137 ) . build ( ) ; } private VAR_79 VAR_104 ( String VAR_149 , VAR_91 metadata ) { return new VAR_79 . Builder ( VAR_150 ) . VAR_81 ( VAR_151 , VAR_149 ) . VAR_81 ( VAR_152 , VAR_153 ( ) . VAR_154 ( ) ) . VAR_81 ( VAR_155 , VAR_156 ( ) . VAR_154 ( ) ) . build ( ) ; } }",Done
69,4d806afb_8756af6a,62.0,Nit: Returns... https://google.github.io/styleguide/javaguide.html#s7.2-summary-fragment,62.0,62.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.firstrun;', '', 'import android.accounts.Account;', 'import android.app.Activity;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.net.Uri;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.provider.Settings;', '', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.ApiCompatibilityUtils;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.chrome.browser.IntentHandler;', 'import org.chromium.chrome.browser.LaunchIntentDispatcher;', 'import org.chromium.chrome.browser.childaccounts.ChildAccountService;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.net.spdyproxy.DataReductionProxySettings;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.search_engines.SearchEnginePromoType;', 'import org.chromium.chrome.browser.signin.services.FREMobileIdentityConsistencyFieldTrial;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.SigninManager;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.ChildAccountStatus;', 'import org.chromium.components.signin.ChildAccountStatus.Status;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', '', 'import java.util.List;', '', '/**', ' * A helper to determine what should be the sequence of First Run Experience screens, and whether', ' * it should be run.', ' *', ' * Usage:', ' * new FirstRunFlowSequencer(activity, launcherProvidedProperties) {', ' *     override onFlowIsKnown', ' * }.start();', ' */', 'public abstract class FirstRunFlowSequencer  {', '    private static final String TAG = ""firstrun"";', '', '    /**', '     * A delegate class to determine if first run promo pages should be shown based on various', '     * signals. Some methods may be overridden by tests to fake desired behavior.', '     */', '    @VisibleForTesting', '    public static class FirstRunFlowSequencerDelegate {']}, {'a': ['        /** Returns true if the sync consent promo page should be shown. */'], 'b': ['        /** @return true if the sync consent promo page should be shown. */']}, {'ab': ['        boolean shouldShowSyncConsentPage(', '                Activity activity, List<Account> accounts, @Status int childAccountStatus) {', '            if (ChildAccountStatus.isChild(childAccountStatus)) {']}, {'a': ['                // Always show the sync consent page for child account.'], 'b': ['                // Always show the sync consent page for child account']}, {'ab': ['                return true;', '            }', '            final IdentityManager identityManager =', '                    IdentityServicesProvider.get().getIdentityManager(', '                            Profile.getLastUsedRegularProfile());', '            if (identityManager.hasPrimaryAccount(ConsentLevel.SYNC) || !isSyncAllowed()) {', '                // No need to show the sync consent page if users already consented to sync or', '                // if sync is not allowed.', '                return false;', '            }', '            if (FREMobileIdentityConsistencyFieldTrial.isEnabled()) {', '                // Show the sync consent page only to the signed-in users.', '                return identityManager.hasPrimaryAccount(ConsentLevel.SIGNIN);', '            } else {', '                // We show the sync consent page if sync is allowed, and not signed in, and', '                // - ""skip the first use hints"" is not set, or', '                // - ""skip the first use hints"" is set, but there is at least one account.', '                return !shouldSkipFirstUseHints(activity) || !accounts.isEmpty();', '            }', '        }', '', '        /** @return true if the Data Reduction promo page should be shown. */', '        @VisibleForTesting', '        public boolean shouldShowDataReductionPage() {', '            return !DataReductionProxySettings.getInstance().isDataReductionProxyManaged()', '                    && DataReductionProxySettings.getInstance()', '                               .isDataReductionProxyFREPromoAllowed();', '        }', '', '        /** @return true if the Search Engine promo page should be shown. */', '        @VisibleForTesting', '        public boolean shouldShowSearchEnginePage() {', '            @SearchEnginePromoType', '            int searchPromoType = LocaleManager.getInstance().getSearchEnginePromoShowType();', '            return searchPromoType == SearchEnginePromoType.SHOW_NEW', '                    || searchPromoType == SearchEnginePromoType.SHOW_EXISTING;', '        }', '', '        /** @return true if Sync is allowed for the current user. */', '        @VisibleForTesting', '        protected boolean isSyncAllowed() {', '            SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(', '                    Profile.getLastUsedRegularProfile());', '            return FirstRunUtils.canAllowSync() && !signinManager.isSigninDisabledByPolicy()', '                    && signinManager.isSigninSupported();', '        }', '', '        /** @return true if first use hints should be skipped. */', '        @VisibleForTesting', '        protected boolean shouldSkipFirstUseHints(Activity activity) {', '            return Settings.Secure.getInt(', '                           activity.getContentResolver(), Settings.Secure.SKIP_FIRST_USE_HINTS, 0)', '                    != 0;', '        }', '    }', '', '    private final Activity mActivity;', '    private @ChildAccountStatus.Status int mChildAccountStatus;', '    private List<Account> mGoogleAccounts;', '', '    /**', ""     * The delegate to be used by the Sequencer. By default, it's an instance of"", ""     * {@link FirstRunFlowSequencerDelegate}, unless it's overridden by {@code sDelegateForTesting}."", '     */', '    private FirstRunFlowSequencerDelegate mDelegate;', '', '    /** If not null, overrides {@code mDelegate} for this object during tests. */', '    private static FirstRunFlowSequencerDelegate sDelegateForTesting;', '', '    /**', '     * Callback that is called once the flow is determined.', '     * If the properties is null, the First Run experience needs to finish and', '     * restart the original intent if necessary.', '     * @param freProperties Properties to be used in the First Run activity, or null.', '     */', '    public abstract void onFlowIsKnown(Bundle freProperties);', '', '    public FirstRunFlowSequencer(Activity activity) {', '        mActivity = activity;', '        mDelegate = sDelegateForTesting != null ? sDelegateForTesting', '                                                : new FirstRunFlowSequencerDelegate();', '    }', '', '    /**', '     * Starts determining parameters for the First Run.', '     * Once finished, calls onFlowIsKnown().', '     */', '    public void start() {', '        long childAccountStatusStart = SystemClock.elapsedRealtime();', '        AccountManagerFacadeProvider.getInstance().getAccounts().then(accounts -> {', '            ChildAccountService.checkChildAccountStatus(accounts, status -> {', '                RecordHistogram.recordTimesHistogram(""MobileFre.ChildAccountStatusDuration"",', '                        SystemClock.elapsedRealtime() - childAccountStatusStart);', '                initializeSharedState(status, accounts);', '                processFreEnvironmentPreNative();', '            });', '        });', '    }', '', '    protected boolean shouldShowDataReductionPage() {', '        return mDelegate.shouldShowDataReductionPage();', '    }', '', '    @VisibleForTesting', '    protected boolean shouldShowSearchEnginePage() {', '        return mDelegate.shouldShowSearchEnginePage();', '    }', '', '    private boolean shouldShowSyncConsentPage() {', '        return mDelegate.shouldShowSyncConsentPage(mActivity, mGoogleAccounts, mChildAccountStatus);', '    }', '', '    @VisibleForTesting', '    protected void setFirstRunFlowSignInComplete() {', '        FirstRunSignInProcessor.setFirstRunFlowSignInComplete(true);', '    }', '', '    @VisibleForTesting', '    void initializeSharedState(', '            @ChildAccountStatus.Status int childAccountStatus, List<Account> accounts) {', '        mChildAccountStatus = childAccountStatus;', '        mGoogleAccounts = accounts;', '    }', '', '    void processFreEnvironmentPreNative() {', '        Bundle freProperties = new Bundle();', '        freProperties.putInt(SyncConsentFirstRunFragment.CHILD_ACCOUNT_STATUS, mChildAccountStatus);', '', '        onFlowIsKnown(freProperties);', '        if (ChildAccountStatus.isChild(mChildAccountStatus)) {', '            setFirstRunFlowSignInComplete();', '        }', '    }', '', '    /**', '     * Will be called either when policies are initialized, or when native is initialized if we have', '     * no on-device policies.', '     * @param freProperties Resulting FRE properties bundle.', '     */', '    public void updateFirstRunProperties(Bundle freProperties) {', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_SYNC_CONSENT_PAGE, shouldShowSyncConsentPage());', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_DATA_REDUCTION_PAGE, shouldShowDataReductionPage());', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_SEARCH_ENGINE_PAGE, shouldShowSearchEnginePage());', '    }', '', '    /**', '     * Marks a given flow as completed.', '     * @param signInAccountName The account name for the pending sign-in request. (Or null)', '     * @param showSignInSettings Whether the user selected to see the settings once signed in.', '     */', '    public static void markFlowAsCompleted(String signInAccountName, boolean showSignInSettings) {', '        // When the user accepts ToS in the Setup Wizard, we do not show the ToS page to the user', '        // because the user has already accepted one outside FRE.', '        if (!FirstRunUtils.isFirstRunEulaAccepted()) {', '            FirstRunUtils.setEulaAccepted();', '        }', '', '        // Mark the FRE flow as complete and set the sign-in flow preferences if necessary.', '        FirstRunSignInProcessor.finalizeFirstRunFlowState(signInAccountName, showSignInSettings);', '    }', '', '    /**', '     * Checks if the First Run Experience needs to be launched.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @param fromIntent Intent used to launch the caller.', '     * @return Whether the First Run Experience needs to be launched.', '     */', '    public static boolean checkIfFirstRunIsNecessary(', '            boolean preferLightweightFre, Intent fromIntent) {', '        boolean isCct = fromIntent.getBooleanExtra(', '                                FirstRunActivityBase.EXTRA_CHROME_LAUNCH_INTENT_IS_CCT, false)', '                || LaunchIntentDispatcher.isCustomTabIntent(fromIntent);', '        return checkIfFirstRunIsNecessary(preferLightweightFre, isCct);', '    }', '', '    /**', '     * Checks if the First Run Experience needs to be launched.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @param isCct Whether this check is being made in the context of a CCT.', '     * @return Whether the First Run Experience needs to be launched.', '     */', '    public static boolean checkIfFirstRunIsNecessary(boolean preferLightweightFre, boolean isCct) {', '        // If FRE is disabled (e.g. in tests), proceed directly to the intent handling.', '        if (CommandLine.getInstance().hasSwitch(ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE)', '                || ApiCompatibilityUtils.isDemoUser()', '                || ApiCompatibilityUtils.isRunningInUserTestHarness()) {', '            return false;', '        }', '        if (FirstRunStatus.getFirstRunFlowComplete()) {', '            // Promo pages are removed, so there is nothing else to show in FRE.', '            return false;', '        }', '        if (FirstRunStatus.isFirstRunSkippedByPolicy() && (isCct || preferLightweightFre)) {', '            // Domain policies may have caused CCTs to skip the FRE. While this needs to be figured', '            // out at runtime for each app restart, it should apply to all CCTs for the duration of', ""            // the app's lifetime."", '            return false;', '        }', '        if (preferLightweightFre', '                && (FirstRunStatus.shouldSkipWelcomePage()', '                        || FirstRunStatus.getLightweightFirstRunFlowComplete())) {', '            return false;', '        }', '        return true;', '    }', '', '    /**', '     * Tries to launch the First Run Experience.  If the Activity was launched with the wrong Intent', '     * flags, we first relaunch it to make sure it runs in its own task, then trigger First Run.', '     *', '     * @param caller               Activity instance that is checking if first run is necessary.', '     * @param fromIntent           Intent used to launch the caller.', '     * @param requiresBroadcast    Whether or not the Intent triggers a BroadcastReceiver.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @return Whether startup must be blocked (e.g. via Activity#finish or dropping the Intent).', '     */', '    public static boolean launch(Context caller, Intent fromIntent, boolean requiresBroadcast,', '            boolean preferLightweightFre) {', '        // Check if the user needs to go through First Run at all.', '        if (!checkIfFirstRunIsNecessary(preferLightweightFre, fromIntent)) return false;', '', '        String intentUrl = IntentHandler.getUrlFromIntent(fromIntent);', '        Uri uri = intentUrl != null ? Uri.parse(intentUrl) : null;', '        if (uri != null && UrlConstants.CONTENT_SCHEME.equals(uri.getScheme())) {', '            caller.grantUriPermission(', '                    caller.getPackageName(), uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);', '        }', '', '        Log.d(TAG, ""Redirecting user through FRE."");', '', ""        // Launch the async restriction checking as soon as we know we'll be running FRE."", '        FirstRunAppRestrictionInfo.startInitializationHint();', '', '        if ((fromIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {', '            FreIntentCreator intentCreator = new FreIntentCreator();', '            Intent freIntent = intentCreator.create(', '                    caller, fromIntent, requiresBroadcast, preferLightweightFre);', '', '            // Although the FRE tries to run in the same task now, this is still needed for', '            // non-activity entry points like the search widget to launch at all. This flag does not', '            // seem to preclude an old task from being reused.', '            if (!(caller instanceof Activity)) {', '                freIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '            }', '', '            boolean isVrIntent = VrModuleProvider.getIntentDelegate().isVrIntent(fromIntent);', '            if (isVrIntent) {', '                freIntent =', '                        VrModuleProvider.getIntentDelegate().setupVrFreIntent(caller, freIntent);', '                // We cannot access Chrome right now, e.g. because the VR module is not installed.', '                if (freIntent == null) return true;', '            }', '            IntentUtils.safeStartActivity(caller, freIntent);', '        } else {', ""            // First Run requires that the Intent contains NEW_TASK so that it doesn't sit on top"", '            // of something else.', '            Intent newIntent = new Intent(fromIntent);', '            newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '            IntentUtils.safeStartActivity(caller, newIntent);', '        }', '        return true;', '    }', '', '    /** Defines an alternative delegate for testing. Must be reset on {@code tearDown}. */', '    @VisibleForTesting', '    public static void setDelegateForTesting(FirstRunFlowSequencerDelegate delegate) {', '        sDelegateForTesting = delegate;', '    }', '}', '']}]",chromium%2Fsrc~main~I8ba145360c3bac92658deee8bcdece7c3afd2889,8bcac7993e185af9b6da80e0bf885e23892a3ab3,chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunFlowSequencer.java,4d806afb_8756af6a_before.java,4d806afb_8756af6a_after.java,FirstRunFlowSequencer::FirstRunFlowSequencerDelegate::shouldShowSyncConsentPage,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 . Context ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Log ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_30 . Status ; import VAR_31 ; import VAR_32 ; import VAR_33 . List ; public abstract class VAR_34 { private static final String TAG = STRING_1 ; public static class VAR_35 { boolean VAR_36 ( VAR_37 VAR_38 , List < VAR_39 > VAR_40 , if ( VAR_41 ( VAR_42 ) ) { return true ; } final VAR_43 VAR_44 = VAR_45 . get ( ) . VAR_46 ( VAR_47 ( ) ) ; if ( VAR_48 ( VAR_49 ) || ! VAR_50 ( ) ) { return false ; } if ( VAR_51 ( ) ) { return VAR_48 ( VAR_52 ) ; } else { return ! VAR_53 ( VAR_38 ) || ! VAR_40 . isEmpty ( ) ; } } public boolean VAR_54 ( ) { return ! VAR_55 . getInstance ( ) . VAR_56 ( ) && VAR_55 . getInstance ( ) . VAR_57 ( ) ; } public boolean VAR_58 ( ) { int VAR_59 = VAR_60 . getInstance ( ) . VAR_61 ( ) ; return VAR_59 == VAR_62 || VAR_59 == VAR_63 ; } protected boolean VAR_50 ( ) { VAR_64 VAR_65 = VAR_45 . get ( ) . VAR_66 ( VAR_47 ( ) ) ; return VAR_67 ( ) && ! VAR_68 ( ) && VAR_69 ( ) ; } protected boolean VAR_53 ( VAR_37 VAR_38 ) { return VAR_70 . getInt ( VAR_71 ( ) , VAR_72 , 0 ) != 0 ; } } private final VAR_37 VAR_73 ; private private List < VAR_39 > VAR_74 ; private VAR_35 VAR_75 ; private static VAR_35 VAR_76 ; public abstract void VAR_77 ( VAR_78 VAR_79 ) ; public VAR_34 ( VAR_37 VAR_38 ) { VAR_73 = VAR_38 ; VAR_75 = VAR_76 != null ? VAR_76 : new VAR_35 ( ) ; } public void start ( ) { long VAR_80 = VAR_81 ( ) ; VAR_82 . getInstance ( ) . VAR_83 ( ) . VAR_84 ( VAR_40 - > { VAR_85 ( VAR_40 , status - > { VAR_86 ( STRING_2 , VAR_81 ( ) - VAR_80 ) ; VAR_87 ( status , VAR_40 ) ; VAR_88 ( ) ; } ) ; } ) ; } protected boolean VAR_54 ( ) { return VAR_89 ( ) ; } protected boolean VAR_58 ( ) { return VAR_90 ( ) ; } private boolean VAR_36 ( ) { return VAR_91 ( VAR_73 , VAR_74 , VAR_92 ) ; } protected void VAR_93 ( ) { VAR_94 ( true ) ; } void VAR_87 ( VAR_92 = VAR_42 ; VAR_74 = VAR_40 ; } void VAR_88 ( ) { VAR_78 VAR_79 = new VAR_78 ( ) ; VAR_95 ( VAR_96 , VAR_92 ) ; VAR_77 ( VAR_79 ) ; if ( VAR_41 ( VAR_92 ) ) { VAR_93 ( ) ; } } public void VAR_97 ( VAR_78 VAR_79 ) { VAR_98 ( VAR_99 , VAR_36 ( ) ) ; VAR_98 ( VAR_100 , VAR_54 ( ) ) ; VAR_98 ( VAR_101 , VAR_58 ( ) ) ; } public static void VAR_102 ( String VAR_103 , boolean VAR_104 ) { if ( ! VAR_105 ( ) ) { VAR_106 ( ) ; } VAR_107 ( VAR_103 , VAR_104 ) ; } public static boolean VAR_108 ( boolean VAR_109 , VAR_110 VAR_111 ) { boolean VAR_112 = VAR_113 ( VAR_114 , false ) || VAR_115 ( VAR_111 ) ; return VAR_108 ( VAR_109 , VAR_112 ) ; } public static boolean VAR_108 ( boolean VAR_109 , boolean VAR_112 ) { if ( VAR_116 . getInstance ( ) . VAR_117 ( VAR_118 ) || VAR_119 ( ) || VAR_120 ( ) ) { return false ; } if ( VAR_121 ( ) ) { return false ; } if ( VAR_122 ( ) && ( VAR_112 || VAR_109 ) ) { return false ; } if ( VAR_109 && ( VAR_123 ( ) || VAR_124 ( ) ) ) { return false ; } return true ; } public static boolean VAR_125 ( Context VAR_126 , VAR_110 VAR_111 , boolean VAR_127 , boolean VAR_109 ) { if ( ! VAR_108 ( VAR_109 , VAR_111 ) ) return false ; String VAR_128 = VAR_129 ( VAR_111 ) ; VAR_130 uri = VAR_128 != null ? VAR_130 . parse ( VAR_128 ) : null ; if ( uri != null && VAR_131 . equals ( VAR_132 ( ) ) ) { VAR_133 ( VAR_134 ( ) , uri , VAR_135 ) ; } Log . d ( TAG , STRING_3 ) ; VAR_136 ( ) ; if ( ( VAR_137 ( ) & VAR_138 ) != 0 ) { VAR_139 VAR_140 = new VAR_139 ( ) ; VAR_110 VAR_141 = VAR_140 . create ( VAR_126 , VAR_111 , VAR_127 , VAR_109 ) ; if ( ! ( VAR_126 instanceof VAR_37 ) ) { VAR_142 ( VAR_138 ) ; } boolean VAR_143 = VAR_144 ( ) . VAR_143 ( VAR_111 ) ; if ( VAR_143 ) { VAR_141 = VAR_144 ( ) . VAR_145 ( VAR_126 , VAR_141 ) ; if ( VAR_141 == null ) return true ; } VAR_146 ( VAR_126 , VAR_141 ) ; } else { VAR_110 VAR_147 = new VAR_110 ( VAR_111 ) ; VAR_148 ( VAR_138 ) ; VAR_146 ( VAR_126 , VAR_147 ) ; } return true ; } public static void VAR_149 ( VAR_35 VAR_150 ) { VAR_76 = VAR_150 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 . Context ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Log ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_30 . Status ; import VAR_31 ; import VAR_32 ; import VAR_33 . List ; public abstract class VAR_34 { private static final String TAG = STRING_1 ; public static class VAR_35 { boolean VAR_36 ( VAR_37 VAR_38 , List < VAR_39 > VAR_40 , if ( VAR_41 ( VAR_42 ) ) { return true ; } final VAR_43 VAR_44 = VAR_45 . get ( ) . VAR_46 ( VAR_47 ( ) ) ; if ( VAR_48 ( VAR_49 ) || ! VAR_50 ( ) ) { return false ; } if ( VAR_51 ( ) ) { return VAR_48 ( VAR_52 ) ; } else { return ! VAR_53 ( VAR_38 ) || ! VAR_40 . isEmpty ( ) ; } } public boolean VAR_54 ( ) { return ! VAR_55 . getInstance ( ) . VAR_56 ( ) && VAR_55 . getInstance ( ) . VAR_57 ( ) ; } public boolean VAR_58 ( ) { int VAR_59 = VAR_60 . getInstance ( ) . VAR_61 ( ) ; return VAR_59 == VAR_62 || VAR_59 == VAR_63 ; } protected boolean VAR_50 ( ) { VAR_64 VAR_65 = VAR_45 . get ( ) . VAR_66 ( VAR_47 ( ) ) ; return VAR_67 ( ) && ! VAR_68 ( ) && VAR_69 ( ) ; } protected boolean VAR_53 ( VAR_37 VAR_38 ) { return VAR_70 . getInt ( VAR_71 ( ) , VAR_72 , 0 ) != 0 ; } } private final VAR_37 VAR_73 ; private private List < VAR_39 > VAR_74 ; private VAR_35 VAR_75 ; private static VAR_35 VAR_76 ; public abstract void VAR_77 ( VAR_78 VAR_79 ) ; public VAR_34 ( VAR_37 VAR_38 ) { VAR_73 = VAR_38 ; VAR_75 = VAR_76 != null ? VAR_76 : new VAR_35 ( ) ; } public void start ( ) { long VAR_80 = VAR_81 ( ) ; VAR_82 . getInstance ( ) . VAR_83 ( ) . VAR_84 ( VAR_40 - > { VAR_85 ( VAR_40 , status - > { VAR_86 ( STRING_2 , VAR_81 ( ) - VAR_80 ) ; VAR_87 ( status , VAR_40 ) ; VAR_88 ( ) ; } ) ; } ) ; } protected boolean VAR_54 ( ) { return VAR_89 ( ) ; } protected boolean VAR_58 ( ) { return VAR_90 ( ) ; } private boolean VAR_36 ( ) { return VAR_91 ( VAR_73 , VAR_74 , VAR_92 ) ; } protected void VAR_93 ( ) { VAR_94 ( true ) ; } void VAR_87 ( VAR_92 = VAR_42 ; VAR_74 = VAR_40 ; } void VAR_88 ( ) { VAR_78 VAR_79 = new VAR_78 ( ) ; VAR_95 ( VAR_96 , VAR_92 ) ; VAR_77 ( VAR_79 ) ; if ( VAR_41 ( VAR_92 ) ) { VAR_93 ( ) ; } } public void VAR_97 ( VAR_78 VAR_79 ) { VAR_98 ( VAR_99 , VAR_36 ( ) ) ; VAR_98 ( VAR_100 , VAR_54 ( ) ) ; VAR_98 ( VAR_101 , VAR_58 ( ) ) ; } public static void VAR_102 ( String VAR_103 , boolean VAR_104 ) { if ( ! VAR_105 ( ) ) { VAR_106 ( ) ; } VAR_107 ( VAR_103 , VAR_104 ) ; } public static boolean VAR_108 ( boolean VAR_109 , VAR_110 VAR_111 ) { boolean VAR_112 = VAR_113 ( VAR_114 , false ) || VAR_115 ( VAR_111 ) ; return VAR_108 ( VAR_109 , VAR_112 ) ; } public static boolean VAR_108 ( boolean VAR_109 , boolean VAR_112 ) { if ( VAR_116 . getInstance ( ) . VAR_117 ( VAR_118 ) || VAR_119 ( ) || VAR_120 ( ) ) { return false ; } if ( VAR_121 ( ) ) { return false ; } if ( VAR_122 ( ) && ( VAR_112 || VAR_109 ) ) { return false ; } if ( VAR_109 && ( VAR_123 ( ) || VAR_124 ( ) ) ) { return false ; } return true ; } public static boolean VAR_125 ( Context VAR_126 , VAR_110 VAR_111 , boolean VAR_127 , boolean VAR_109 ) { if ( ! VAR_108 ( VAR_109 , VAR_111 ) ) return false ; String VAR_128 = VAR_129 ( VAR_111 ) ; VAR_130 uri = VAR_128 != null ? VAR_130 . parse ( VAR_128 ) : null ; if ( uri != null && VAR_131 . equals ( VAR_132 ( ) ) ) { VAR_133 ( VAR_134 ( ) , uri , VAR_135 ) ; } Log . d ( TAG , STRING_3 ) ; VAR_136 ( ) ; if ( ( VAR_137 ( ) & VAR_138 ) != 0 ) { VAR_139 VAR_140 = new VAR_139 ( ) ; VAR_110 VAR_141 = VAR_140 . create ( VAR_126 , VAR_111 , VAR_127 , VAR_109 ) ; if ( ! ( VAR_126 instanceof VAR_37 ) ) { VAR_142 ( VAR_138 ) ; } boolean VAR_143 = VAR_144 ( ) . VAR_143 ( VAR_111 ) ; if ( VAR_143 ) { VAR_141 = VAR_144 ( ) . VAR_145 ( VAR_126 , VAR_141 ) ; if ( VAR_141 == null ) return true ; } VAR_146 ( VAR_126 , VAR_141 ) ; } else { VAR_110 VAR_147 = new VAR_110 ( VAR_111 ) ; VAR_148 ( VAR_138 ) ; VAR_146 ( VAR_126 , VAR_147 ) ; } return true ; } public static void VAR_149 ( VAR_35 VAR_150 ) { VAR_76 = VAR_150 ; } }",Nit: Returns... https://google.github.io/styleguide/javaguide.html#s7.2-summary-fragment
70,7ca165b9_9bf39e2f,66.0,Nit: period.,66.0,66.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.firstrun;', '', 'import android.accounts.Account;', 'import android.app.Activity;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.net.Uri;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.provider.Settings;', '', 'import androidx.annotation.VisibleForTesting;', '', 'import org.chromium.base.ApiCompatibilityUtils;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.chrome.browser.IntentHandler;', 'import org.chromium.chrome.browser.LaunchIntentDispatcher;', 'import org.chromium.chrome.browser.childaccounts.ChildAccountService;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.net.spdyproxy.DataReductionProxySettings;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.search_engines.SearchEnginePromoType;', 'import org.chromium.chrome.browser.signin.services.FREMobileIdentityConsistencyFieldTrial;', 'import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;', 'import org.chromium.chrome.browser.signin.services.SigninManager;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.signin.AccountManagerFacadeProvider;', 'import org.chromium.components.signin.ChildAccountStatus;', 'import org.chromium.components.signin.ChildAccountStatus.Status;', 'import org.chromium.components.signin.identitymanager.ConsentLevel;', 'import org.chromium.components.signin.identitymanager.IdentityManager;', '', 'import java.util.List;', '', '/**', ' * A helper to determine what should be the sequence of First Run Experience screens, and whether', ' * it should be run.', ' *', ' * Usage:', ' * new FirstRunFlowSequencer(activity, launcherProvidedProperties) {', ' *     override onFlowIsKnown', ' * }.start();', ' */', 'public abstract class FirstRunFlowSequencer  {', '    private static final String TAG = ""firstrun"";', '', '    /**', '     * A delegate class to determine if first run promo pages should be shown based on various', '     * signals. Some methods may be overridden by tests to fake desired behavior.', '     */', '    @VisibleForTesting', '    public static class FirstRunFlowSequencerDelegate {']}, {'a': ['        /** Returns true if the sync consent promo page should be shown. */'], 'b': ['        /** @return true if the sync consent promo page should be shown. */']}, {'ab': ['        boolean shouldShowSyncConsentPage(', '                Activity activity, List<Account> accounts, @Status int childAccountStatus) {', '            if (ChildAccountStatus.isChild(childAccountStatus)) {']}, {'a': ['                // Always show the sync consent page for child account.'], 'b': ['                // Always show the sync consent page for child account']}, {'ab': ['                return true;', '            }', '            final IdentityManager identityManager =', '                    IdentityServicesProvider.get().getIdentityManager(', '                            Profile.getLastUsedRegularProfile());', '            if (identityManager.hasPrimaryAccount(ConsentLevel.SYNC) || !isSyncAllowed()) {', '                // No need to show the sync consent page if users already consented to sync or', '                // if sync is not allowed.', '                return false;', '            }', '            if (FREMobileIdentityConsistencyFieldTrial.isEnabled()) {', '                // Show the sync consent page only to the signed-in users.', '                return identityManager.hasPrimaryAccount(ConsentLevel.SIGNIN);', '            } else {', '                // We show the sync consent page if sync is allowed, and not signed in, and', '                // - ""skip the first use hints"" is not set, or', '                // - ""skip the first use hints"" is set, but there is at least one account.', '                return !shouldSkipFirstUseHints(activity) || !accounts.isEmpty();', '            }', '        }', '', '        /** @return true if the Data Reduction promo page should be shown. */', '        @VisibleForTesting', '        public boolean shouldShowDataReductionPage() {', '            return !DataReductionProxySettings.getInstance().isDataReductionProxyManaged()', '                    && DataReductionProxySettings.getInstance()', '                               .isDataReductionProxyFREPromoAllowed();', '        }', '', '        /** @return true if the Search Engine promo page should be shown. */', '        @VisibleForTesting', '        public boolean shouldShowSearchEnginePage() {', '            @SearchEnginePromoType', '            int searchPromoType = LocaleManager.getInstance().getSearchEnginePromoShowType();', '            return searchPromoType == SearchEnginePromoType.SHOW_NEW', '                    || searchPromoType == SearchEnginePromoType.SHOW_EXISTING;', '        }', '', '        /** @return true if Sync is allowed for the current user. */', '        @VisibleForTesting', '        protected boolean isSyncAllowed() {', '            SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(', '                    Profile.getLastUsedRegularProfile());', '            return FirstRunUtils.canAllowSync() && !signinManager.isSigninDisabledByPolicy()', '                    && signinManager.isSigninSupported();', '        }', '', '        /** @return true if first use hints should be skipped. */', '        @VisibleForTesting', '        protected boolean shouldSkipFirstUseHints(Activity activity) {', '            return Settings.Secure.getInt(', '                           activity.getContentResolver(), Settings.Secure.SKIP_FIRST_USE_HINTS, 0)', '                    != 0;', '        }', '    }', '', '    private final Activity mActivity;', '    private @ChildAccountStatus.Status int mChildAccountStatus;', '    private List<Account> mGoogleAccounts;', '', '    /**', ""     * The delegate to be used by the Sequencer. By default, it's an instance of"", ""     * {@link FirstRunFlowSequencerDelegate}, unless it's overridden by {@code sDelegateForTesting}."", '     */', '    private FirstRunFlowSequencerDelegate mDelegate;', '', '    /** If not null, overrides {@code mDelegate} for this object during tests. */', '    private static FirstRunFlowSequencerDelegate sDelegateForTesting;', '', '    /**', '     * Callback that is called once the flow is determined.', '     * If the properties is null, the First Run experience needs to finish and', '     * restart the original intent if necessary.', '     * @param freProperties Properties to be used in the First Run activity, or null.', '     */', '    public abstract void onFlowIsKnown(Bundle freProperties);', '', '    public FirstRunFlowSequencer(Activity activity) {', '        mActivity = activity;', '        mDelegate = sDelegateForTesting != null ? sDelegateForTesting', '                                                : new FirstRunFlowSequencerDelegate();', '    }', '', '    /**', '     * Starts determining parameters for the First Run.', '     * Once finished, calls onFlowIsKnown().', '     */', '    public void start() {', '        long childAccountStatusStart = SystemClock.elapsedRealtime();', '        AccountManagerFacadeProvider.getInstance().getAccounts().then(accounts -> {', '            ChildAccountService.checkChildAccountStatus(accounts, status -> {', '                RecordHistogram.recordTimesHistogram(""MobileFre.ChildAccountStatusDuration"",', '                        SystemClock.elapsedRealtime() - childAccountStatusStart);', '                initializeSharedState(status, accounts);', '                processFreEnvironmentPreNative();', '            });', '        });', '    }', '', '    protected boolean shouldShowDataReductionPage() {', '        return mDelegate.shouldShowDataReductionPage();', '    }', '', '    @VisibleForTesting', '    protected boolean shouldShowSearchEnginePage() {', '        return mDelegate.shouldShowSearchEnginePage();', '    }', '', '    private boolean shouldShowSyncConsentPage() {', '        return mDelegate.shouldShowSyncConsentPage(mActivity, mGoogleAccounts, mChildAccountStatus);', '    }', '', '    @VisibleForTesting', '    protected void setFirstRunFlowSignInComplete() {', '        FirstRunSignInProcessor.setFirstRunFlowSignInComplete(true);', '    }', '', '    @VisibleForTesting', '    void initializeSharedState(', '            @ChildAccountStatus.Status int childAccountStatus, List<Account> accounts) {', '        mChildAccountStatus = childAccountStatus;', '        mGoogleAccounts = accounts;', '    }', '', '    void processFreEnvironmentPreNative() {', '        Bundle freProperties = new Bundle();', '        freProperties.putInt(SyncConsentFirstRunFragment.CHILD_ACCOUNT_STATUS, mChildAccountStatus);', '', '        onFlowIsKnown(freProperties);', '        if (ChildAccountStatus.isChild(mChildAccountStatus)) {', '            setFirstRunFlowSignInComplete();', '        }', '    }', '', '    /**', '     * Will be called either when policies are initialized, or when native is initialized if we have', '     * no on-device policies.', '     * @param freProperties Resulting FRE properties bundle.', '     */', '    public void updateFirstRunProperties(Bundle freProperties) {', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_SYNC_CONSENT_PAGE, shouldShowSyncConsentPage());', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_DATA_REDUCTION_PAGE, shouldShowDataReductionPage());', '        freProperties.putBoolean(', '                FirstRunActivity.SHOW_SEARCH_ENGINE_PAGE, shouldShowSearchEnginePage());', '    }', '', '    /**', '     * Marks a given flow as completed.', '     * @param signInAccountName The account name for the pending sign-in request. (Or null)', '     * @param showSignInSettings Whether the user selected to see the settings once signed in.', '     */', '    public static void markFlowAsCompleted(String signInAccountName, boolean showSignInSettings) {', '        // When the user accepts ToS in the Setup Wizard, we do not show the ToS page to the user', '        // because the user has already accepted one outside FRE.', '        if (!FirstRunUtils.isFirstRunEulaAccepted()) {', '            FirstRunUtils.setEulaAccepted();', '        }', '', '        // Mark the FRE flow as complete and set the sign-in flow preferences if necessary.', '        FirstRunSignInProcessor.finalizeFirstRunFlowState(signInAccountName, showSignInSettings);', '    }', '', '    /**', '     * Checks if the First Run Experience needs to be launched.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @param fromIntent Intent used to launch the caller.', '     * @return Whether the First Run Experience needs to be launched.', '     */', '    public static boolean checkIfFirstRunIsNecessary(', '            boolean preferLightweightFre, Intent fromIntent) {', '        boolean isCct = fromIntent.getBooleanExtra(', '                                FirstRunActivityBase.EXTRA_CHROME_LAUNCH_INTENT_IS_CCT, false)', '                || LaunchIntentDispatcher.isCustomTabIntent(fromIntent);', '        return checkIfFirstRunIsNecessary(preferLightweightFre, isCct);', '    }', '', '    /**', '     * Checks if the First Run Experience needs to be launched.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @param isCct Whether this check is being made in the context of a CCT.', '     * @return Whether the First Run Experience needs to be launched.', '     */', '    public static boolean checkIfFirstRunIsNecessary(boolean preferLightweightFre, boolean isCct) {', '        // If FRE is disabled (e.g. in tests), proceed directly to the intent handling.', '        if (CommandLine.getInstance().hasSwitch(ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE)', '                || ApiCompatibilityUtils.isDemoUser()', '                || ApiCompatibilityUtils.isRunningInUserTestHarness()) {', '            return false;', '        }', '        if (FirstRunStatus.getFirstRunFlowComplete()) {', '            // Promo pages are removed, so there is nothing else to show in FRE.', '            return false;', '        }', '        if (FirstRunStatus.isFirstRunSkippedByPolicy() && (isCct || preferLightweightFre)) {', '            // Domain policies may have caused CCTs to skip the FRE. While this needs to be figured', '            // out at runtime for each app restart, it should apply to all CCTs for the duration of', ""            // the app's lifetime."", '            return false;', '        }', '        if (preferLightweightFre', '                && (FirstRunStatus.shouldSkipWelcomePage()', '                        || FirstRunStatus.getLightweightFirstRunFlowComplete())) {', '            return false;', '        }', '        return true;', '    }', '', '    /**', '     * Tries to launch the First Run Experience.  If the Activity was launched with the wrong Intent', '     * flags, we first relaunch it to make sure it runs in its own task, then trigger First Run.', '     *', '     * @param caller               Activity instance that is checking if first run is necessary.', '     * @param fromIntent           Intent used to launch the caller.', '     * @param requiresBroadcast    Whether or not the Intent triggers a BroadcastReceiver.', '     * @param preferLightweightFre Whether to prefer the Lightweight First Run Experience.', '     * @return Whether startup must be blocked (e.g. via Activity#finish or dropping the Intent).', '     */', '    public static boolean launch(Context caller, Intent fromIntent, boolean requiresBroadcast,', '            boolean preferLightweightFre) {', '        // Check if the user needs to go through First Run at all.', '        if (!checkIfFirstRunIsNecessary(preferLightweightFre, fromIntent)) return false;', '', '        String intentUrl = IntentHandler.getUrlFromIntent(fromIntent);', '        Uri uri = intentUrl != null ? Uri.parse(intentUrl) : null;', '        if (uri != null && UrlConstants.CONTENT_SCHEME.equals(uri.getScheme())) {', '            caller.grantUriPermission(', '                    caller.getPackageName(), uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);', '        }', '', '        Log.d(TAG, ""Redirecting user through FRE."");', '', ""        // Launch the async restriction checking as soon as we know we'll be running FRE."", '        FirstRunAppRestrictionInfo.startInitializationHint();', '', '        if ((fromIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {', '            FreIntentCreator intentCreator = new FreIntentCreator();', '            Intent freIntent = intentCreator.create(', '                    caller, fromIntent, requiresBroadcast, preferLightweightFre);', '', '            // Although the FRE tries to run in the same task now, this is still needed for', '            // non-activity entry points like the search widget to launch at all. This flag does not', '            // seem to preclude an old task from being reused.', '            if (!(caller instanceof Activity)) {', '                freIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '            }', '', '            boolean isVrIntent = VrModuleProvider.getIntentDelegate().isVrIntent(fromIntent);', '            if (isVrIntent) {', '                freIntent =', '                        VrModuleProvider.getIntentDelegate().setupVrFreIntent(caller, freIntent);', '                // We cannot access Chrome right now, e.g. because the VR module is not installed.', '                if (freIntent == null) return true;', '            }', '            IntentUtils.safeStartActivity(caller, freIntent);', '        } else {', ""            // First Run requires that the Intent contains NEW_TASK so that it doesn't sit on top"", '            // of something else.', '            Intent newIntent = new Intent(fromIntent);', '            newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '            IntentUtils.safeStartActivity(caller, newIntent);', '        }', '        return true;', '    }', '', '    /** Defines an alternative delegate for testing. Must be reset on {@code tearDown}. */', '    @VisibleForTesting', '    public static void setDelegateForTesting(FirstRunFlowSequencerDelegate delegate) {', '        sDelegateForTesting = delegate;', '    }', '}', '']}]",chromium%2Fsrc~main~I8ba145360c3bac92658deee8bcdece7c3afd2889,8bcac7993e185af9b6da80e0bf885e23892a3ab3,chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunFlowSequencer.java,7ca165b9_9bf39e2f_before.java,7ca165b9_9bf39e2f_after.java,FirstRunFlowSequencer::FirstRunFlowSequencerDelegate::shouldShowSyncConsentPage,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 . Context ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Log ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_30 . Status ; import VAR_31 ; import VAR_32 ; import VAR_33 . List ; public abstract class VAR_34 { private static final String TAG = STRING_1 ; public static class VAR_35 { boolean VAR_36 ( VAR_37 VAR_38 , List < VAR_39 > VAR_40 , if ( VAR_41 ( VAR_42 ) ) { return true ; } final VAR_43 VAR_44 = VAR_45 . get ( ) . VAR_46 ( VAR_47 ( ) ) ; if ( VAR_48 ( VAR_49 ) || ! VAR_50 ( ) ) { return false ; } if ( VAR_51 ( ) ) { return VAR_48 ( VAR_52 ) ; } else { return ! VAR_53 ( VAR_38 ) || ! VAR_40 . isEmpty ( ) ; } } public boolean VAR_54 ( ) { return ! VAR_55 . getInstance ( ) . VAR_56 ( ) && VAR_55 . getInstance ( ) . VAR_57 ( ) ; } public boolean VAR_58 ( ) { int VAR_59 = VAR_60 . getInstance ( ) . VAR_61 ( ) ; return VAR_59 == VAR_62 || VAR_59 == VAR_63 ; } protected boolean VAR_50 ( ) { VAR_64 VAR_65 = VAR_45 . get ( ) . VAR_66 ( VAR_47 ( ) ) ; return VAR_67 ( ) && ! VAR_68 ( ) && VAR_69 ( ) ; } protected boolean VAR_53 ( VAR_37 VAR_38 ) { return VAR_70 . getInt ( VAR_71 ( ) , VAR_72 , 0 ) != 0 ; } } private final VAR_37 VAR_73 ; private private List < VAR_39 > VAR_74 ; private VAR_35 VAR_75 ; private static VAR_35 VAR_76 ; public abstract void VAR_77 ( VAR_78 VAR_79 ) ; public VAR_34 ( VAR_37 VAR_38 ) { VAR_73 = VAR_38 ; VAR_75 = VAR_76 != null ? VAR_76 : new VAR_35 ( ) ; } public void start ( ) { long VAR_80 = VAR_81 ( ) ; VAR_82 . getInstance ( ) . VAR_83 ( ) . VAR_84 ( VAR_40 - > { VAR_85 ( VAR_40 , status - > { VAR_86 ( STRING_2 , VAR_81 ( ) - VAR_80 ) ; VAR_87 ( status , VAR_40 ) ; VAR_88 ( ) ; } ) ; } ) ; } protected boolean VAR_54 ( ) { return VAR_89 ( ) ; } protected boolean VAR_58 ( ) { return VAR_90 ( ) ; } private boolean VAR_36 ( ) { return VAR_91 ( VAR_73 , VAR_74 , VAR_92 ) ; } protected void VAR_93 ( ) { VAR_94 ( true ) ; } void VAR_87 ( VAR_92 = VAR_42 ; VAR_74 = VAR_40 ; } void VAR_88 ( ) { VAR_78 VAR_79 = new VAR_78 ( ) ; VAR_95 ( VAR_96 , VAR_92 ) ; VAR_77 ( VAR_79 ) ; if ( VAR_41 ( VAR_92 ) ) { VAR_93 ( ) ; } } public void VAR_97 ( VAR_78 VAR_79 ) { VAR_98 ( VAR_99 , VAR_36 ( ) ) ; VAR_98 ( VAR_100 , VAR_54 ( ) ) ; VAR_98 ( VAR_101 , VAR_58 ( ) ) ; } public static void VAR_102 ( String VAR_103 , boolean VAR_104 ) { if ( ! VAR_105 ( ) ) { VAR_106 ( ) ; } VAR_107 ( VAR_103 , VAR_104 ) ; } public static boolean VAR_108 ( boolean VAR_109 , VAR_110 VAR_111 ) { boolean VAR_112 = VAR_113 ( VAR_114 , false ) || VAR_115 ( VAR_111 ) ; return VAR_108 ( VAR_109 , VAR_112 ) ; } public static boolean VAR_108 ( boolean VAR_109 , boolean VAR_112 ) { if ( VAR_116 . getInstance ( ) . VAR_117 ( VAR_118 ) || VAR_119 ( ) || VAR_120 ( ) ) { return false ; } if ( VAR_121 ( ) ) { return false ; } if ( VAR_122 ( ) && ( VAR_112 || VAR_109 ) ) { return false ; } if ( VAR_109 && ( VAR_123 ( ) || VAR_124 ( ) ) ) { return false ; } return true ; } public static boolean VAR_125 ( Context VAR_126 , VAR_110 VAR_111 , boolean VAR_127 , boolean VAR_109 ) { if ( ! VAR_108 ( VAR_109 , VAR_111 ) ) return false ; String VAR_128 = VAR_129 ( VAR_111 ) ; VAR_130 uri = VAR_128 != null ? VAR_130 . parse ( VAR_128 ) : null ; if ( uri != null && VAR_131 . equals ( VAR_132 ( ) ) ) { VAR_133 ( VAR_134 ( ) , uri , VAR_135 ) ; } Log . d ( TAG , STRING_3 ) ; VAR_136 ( ) ; if ( ( VAR_137 ( ) & VAR_138 ) != 0 ) { VAR_139 VAR_140 = new VAR_139 ( ) ; VAR_110 VAR_141 = VAR_140 . create ( VAR_126 , VAR_111 , VAR_127 , VAR_109 ) ; if ( ! ( VAR_126 instanceof VAR_37 ) ) { VAR_142 ( VAR_138 ) ; } boolean VAR_143 = VAR_144 ( ) . VAR_143 ( VAR_111 ) ; if ( VAR_143 ) { VAR_141 = VAR_144 ( ) . VAR_145 ( VAR_126 , VAR_141 ) ; if ( VAR_141 == null ) return true ; } VAR_146 ( VAR_126 , VAR_141 ) ; } else { VAR_110 VAR_147 = new VAR_110 ( VAR_111 ) ; VAR_148 ( VAR_138 ) ; VAR_146 ( VAR_126 , VAR_147 ) ; } return true ; } public static void VAR_149 ( VAR_35 VAR_150 ) { VAR_76 = VAR_150 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 . Context ; import VAR_5 ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Log ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_30 . Status ; import VAR_31 ; import VAR_32 ; import VAR_33 . List ; public abstract class VAR_34 { private static final String TAG = STRING_1 ; public static class VAR_35 { boolean VAR_36 ( VAR_37 VAR_38 , List < VAR_39 > VAR_40 , if ( VAR_41 ( VAR_42 ) ) { return true ; } final VAR_43 VAR_44 = VAR_45 . get ( ) . VAR_46 ( VAR_47 ( ) ) ; if ( VAR_48 ( VAR_49 ) || ! VAR_50 ( ) ) { return false ; } if ( VAR_51 ( ) ) { return VAR_48 ( VAR_52 ) ; } else { return ! VAR_53 ( VAR_38 ) || ! VAR_40 . isEmpty ( ) ; } } public boolean VAR_54 ( ) { return ! VAR_55 . getInstance ( ) . VAR_56 ( ) && VAR_55 . getInstance ( ) . VAR_57 ( ) ; } public boolean VAR_58 ( ) { int VAR_59 = VAR_60 . getInstance ( ) . VAR_61 ( ) ; return VAR_59 == VAR_62 || VAR_59 == VAR_63 ; } protected boolean VAR_50 ( ) { VAR_64 VAR_65 = VAR_45 . get ( ) . VAR_66 ( VAR_47 ( ) ) ; return VAR_67 ( ) && ! VAR_68 ( ) && VAR_69 ( ) ; } protected boolean VAR_53 ( VAR_37 VAR_38 ) { return VAR_70 . getInt ( VAR_71 ( ) , VAR_72 , 0 ) != 0 ; } } private final VAR_37 VAR_73 ; private private List < VAR_39 > VAR_74 ; private VAR_35 VAR_75 ; private static VAR_35 VAR_76 ; public abstract void VAR_77 ( VAR_78 VAR_79 ) ; public VAR_34 ( VAR_37 VAR_38 ) { VAR_73 = VAR_38 ; VAR_75 = VAR_76 != null ? VAR_76 : new VAR_35 ( ) ; } public void start ( ) { long VAR_80 = VAR_81 ( ) ; VAR_82 . getInstance ( ) . VAR_83 ( ) . VAR_84 ( VAR_40 - > { VAR_85 ( VAR_40 , status - > { VAR_86 ( STRING_2 , VAR_81 ( ) - VAR_80 ) ; VAR_87 ( status , VAR_40 ) ; VAR_88 ( ) ; } ) ; } ) ; } protected boolean VAR_54 ( ) { return VAR_89 ( ) ; } protected boolean VAR_58 ( ) { return VAR_90 ( ) ; } private boolean VAR_36 ( ) { return VAR_91 ( VAR_73 , VAR_74 , VAR_92 ) ; } protected void VAR_93 ( ) { VAR_94 ( true ) ; } void VAR_87 ( VAR_92 = VAR_42 ; VAR_74 = VAR_40 ; } void VAR_88 ( ) { VAR_78 VAR_79 = new VAR_78 ( ) ; VAR_95 ( VAR_96 , VAR_92 ) ; VAR_77 ( VAR_79 ) ; if ( VAR_41 ( VAR_92 ) ) { VAR_93 ( ) ; } } public void VAR_97 ( VAR_78 VAR_79 ) { VAR_98 ( VAR_99 , VAR_36 ( ) ) ; VAR_98 ( VAR_100 , VAR_54 ( ) ) ; VAR_98 ( VAR_101 , VAR_58 ( ) ) ; } public static void VAR_102 ( String VAR_103 , boolean VAR_104 ) { if ( ! VAR_105 ( ) ) { VAR_106 ( ) ; } VAR_107 ( VAR_103 , VAR_104 ) ; } public static boolean VAR_108 ( boolean VAR_109 , VAR_110 VAR_111 ) { boolean VAR_112 = VAR_113 ( VAR_114 , false ) || VAR_115 ( VAR_111 ) ; return VAR_108 ( VAR_109 , VAR_112 ) ; } public static boolean VAR_108 ( boolean VAR_109 , boolean VAR_112 ) { if ( VAR_116 . getInstance ( ) . VAR_117 ( VAR_118 ) || VAR_119 ( ) || VAR_120 ( ) ) { return false ; } if ( VAR_121 ( ) ) { return false ; } if ( VAR_122 ( ) && ( VAR_112 || VAR_109 ) ) { return false ; } if ( VAR_109 && ( VAR_123 ( ) || VAR_124 ( ) ) ) { return false ; } return true ; } public static boolean VAR_125 ( Context VAR_126 , VAR_110 VAR_111 , boolean VAR_127 , boolean VAR_109 ) { if ( ! VAR_108 ( VAR_109 , VAR_111 ) ) return false ; String VAR_128 = VAR_129 ( VAR_111 ) ; VAR_130 uri = VAR_128 != null ? VAR_130 . parse ( VAR_128 ) : null ; if ( uri != null && VAR_131 . equals ( VAR_132 ( ) ) ) { VAR_133 ( VAR_134 ( ) , uri , VAR_135 ) ; } Log . d ( TAG , STRING_3 ) ; VAR_136 ( ) ; if ( ( VAR_137 ( ) & VAR_138 ) != 0 ) { VAR_139 VAR_140 = new VAR_139 ( ) ; VAR_110 VAR_141 = VAR_140 . create ( VAR_126 , VAR_111 , VAR_127 , VAR_109 ) ; if ( ! ( VAR_126 instanceof VAR_37 ) ) { VAR_142 ( VAR_138 ) ; } boolean VAR_143 = VAR_144 ( ) . VAR_143 ( VAR_111 ) ; if ( VAR_143 ) { VAR_141 = VAR_144 ( ) . VAR_145 ( VAR_126 , VAR_141 ) ; if ( VAR_141 == null ) return true ; } VAR_146 ( VAR_126 , VAR_141 ) ; } else { VAR_110 VAR_147 = new VAR_110 ( VAR_111 ) ; VAR_148 ( VAR_138 ) ; VAR_146 ( VAR_126 , VAR_147 ) ; } return true ; } public static void VAR_149 ( VAR_35 VAR_150 ) { VAR_76 = VAR_150 ; } }",Nit: period.
71,42aefa39_379f1917,137.0,I feel like I've seen you do this before in another recent CL. Is there a shared place you can put this pattern?,136.0,137.0,"[{'ab': ['// Copyright 2021 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser.firstrun;', '', 'import static androidx.test.espresso.Espresso.onView;', 'import static androidx.test.espresso.action.ViewActions.click;', 'import static androidx.test.espresso.assertion.ViewAssertions.matches;', 'import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;', 'import static androidx.test.espresso.matcher.ViewMatchers.withId;', 'import static androidx.test.espresso.matcher.ViewMatchers.withText;', '', 'import static org.hamcrest.Matchers.not;', 'import static org.mockito.Mockito.when;', '', 'import android.accounts.Account;', 'import android.content.Intent;', 'import android.support.test.runner.lifecycle.Stage;', '', 'import androidx.test.filters.MediumTest;', '', 'import org.junit.Before;', 'import org.junit.Rule;', 'import org.junit.Test;', 'import org.junit.runner.RunWith;', 'import org.mockito.Mock;', 'import org.mockito.junit.MockitoJUnit;', 'import org.mockito.junit.MockitoRule;', '', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.test.BaseActivityTestRule;', 'import org.chromium.base.test.util.ApplicationTestUtils;', 'import org.chromium.base.test.util.CommandLineFlags;', 'import org.chromium.base.test.util.CriteriaHelper;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.signin.SigninFirstRunFragment;', 'import org.chromium.chrome.test.ChromeJUnit4ClassRunner;', 'import org.chromium.chrome.test.util.browser.signin.AccountManagerTestRule;', 'import org.chromium.components.externalauth.ExternalAuthUtils;', 'import org.chromium.components.signin.ChildAccountStatus;', 'import org.chromium.components.signin.test.util.FakeAccountManagerFacade;', 'import org.chromium.content_public.browser.test.util.TestThreadUtils;', '', '/**', ' * Integration tests for the first run experience with sign-in and sync decoupled.', ' */', '@RunWith(ChromeJUnit4ClassRunner.class)', '@CommandLineFlags.Add({ChromeSwitches.FORCE_ENABLE_SIGNIN_FRE})', 'public class FirstRunActivitySigninAndSyncTest {', '    private static final String TEST_EMAIL = ""test.account@gmail.com"";', '    private static final String CHILD_EMAIL = ""child.account@gmail.com"";', '', '    @Rule', '    public final MockitoRule mMockitoRule = MockitoJUnit.rule();', '', '    private final FakeAccountManagerFacade mFakeAccountManagerFacade =', '            new FakeAccountManagerFacade() {', '                @Override', '                public void checkChildAccountStatus(', '                        Account account, ChildAccountStatusListener listener) {', '                    listener.onStatusReady(account.name.equals(CHILD_EMAIL)', '                                    ? ChildAccountStatus.REGULAR_CHILD', '                                    : ChildAccountStatus.NOT_CHILD);', '                }', '            };', '', '    @Rule', '    public final AccountManagerTestRule mAccountManagerTestRule =', '            new AccountManagerTestRule(mFakeAccountManagerFacade);', '', '    @Rule', '    public final BaseActivityTestRule<FirstRunActivity> mFirstRunActivityRule =', '            new BaseActivityTestRule<>(FirstRunActivity.class);', '', '    @Mock', '    private ExternalAuthUtils mExternalAuthUtilsMock;', '', '    @Before', '    public void setUp() {', '        when(mExternalAuthUtilsMock.canUseGooglePlayServices()).thenReturn(true);', '        ExternalAuthUtils.setInstanceForTesting(mExternalAuthUtilsMock);', '    }', '', '    @Test', '    @MediumTest', '    public void dismissButtonClickSkipsSyncConsentPageWhenNoAccountsAreOnDevice() {', '        launchFirstRunActivity();', '        onView(withId(R.id.signin_fre_selected_account)).check(matches(not(isDisplayed())));', '', '        onView(withText(R.string.signin_fre_dismiss_button)).perform(click());', '', '        ensureCurrentPageIs(DataReductionProxyFirstRunFragment.class);', '    }', '', '    @Test', '    @MediumTest', '    public void dismissButtonClickSkipsSyncConsentPageWhenOneAccountIsOnDevice() {', '        mAccountManagerTestRule.addAccount(TEST_EMAIL);', '        launchFirstRunActivity();', '        onView(withId(R.id.signin_fre_selected_account)).check(matches(isDisplayed()));', '', '        onView(withText(R.string.signin_fre_dismiss_button)).perform(click());', '', '        ensureCurrentPageIs(DataReductionProxyFirstRunFragment.class);', '    }', '', '    @Test', '    @MediumTest', '    public void continueButtonClickShowsSyncConsentPage() {', '        mAccountManagerTestRule.addAccount(TEST_EMAIL);', '        launchFirstRunActivity();', '        ensureCurrentPageIs(SigninFirstRunFragment.class);', '        onView(withId(R.id.signin_fre_selected_account)).check(matches(isDisplayed()));', '']}, {'a': ['        clickContinueButton();'], 'b': ['        // This helps to reduce flakiness on some marshmallow bots in comparison with', '        // espresso click.', '        TestThreadUtils.runOnUiThreadBlocking(() -> {', '            mFirstRunActivityRule.getActivity()', '                    .findViewById(R.id.signin_fre_continue_button)', '                    .performClick();', '        });']}, {'ab': ['', '        ensureCurrentPageIs(SyncConsentFirstRunFragment.class);', '    }', '', '    @Test', '    @MediumTest', '    public void continueButtonClickShowsSyncConsentPageWithChildAccount() {', '        mAccountManagerTestRule.addAccount(CHILD_EMAIL);', '        launchFirstRunActivity();', '        ensureCurrentPageIs(SigninFirstRunFragment.class);', '        onView(withId(R.id.signin_fre_selected_account)).check(matches(isDisplayed()));', '']}, {'a': ['        clickContinueButton();', '', '        ensureCurrentPageIs(SyncConsentFirstRunFragment.class);', '    }', '', '    private void clickContinueButton() {']}, {'ab': ['        // This helps to reduce flakiness on some marshmallow bots in comparison with', '        // espresso click.', '        TestThreadUtils.runOnUiThreadBlocking(() -> {', '            mFirstRunActivityRule.getActivity()', '                    .findViewById(R.id.signin_fre_continue_button)', '                    .performClick();', '        });']}, {'b': ['', '        ensureCurrentPageIs(SyncConsentFirstRunFragment.class);']}, {'ab': ['    }', '', '    private <T extends FirstRunFragment> void ensureCurrentPageIs(Class<T> fragmentClass) {', '        CriteriaHelper.pollUiThread(() -> {', '            return fragmentClass.isInstance(', '                    mFirstRunActivityRule.getActivity().getCurrentFragmentForTesting());', '        }, fragmentClass.getName() + "" should be the current page"");', '    }', '', '    private void launchFirstRunActivity() {', '        final Intent intent =', '                new Intent(ContextUtils.getApplicationContext(), FirstRunActivity.class);', '        mFirstRunActivityRule.launchActivity(intent);', '        ApplicationTestUtils.waitForActivityState(', '                mFirstRunActivityRule.getActivity(), Stage.RESUMED);', '        CriteriaHelper.pollUiThread(', '                mFirstRunActivityRule.getActivity()::isNativeSideIsInitializedForTest);', '    }', '}', '']}]",chromium%2Fsrc~main~I8ba145360c3bac92658deee8bcdece7c3afd2889,8bcac7993e185af9b6da80e0bf885e23892a3ab3,chrome/android/javatests/src/org/chromium/chrome/browser/firstrun/FirstRunActivitySigninAndSyncTest.java,42aefa39_379f1917_before.java,42aefa39_379f1917_after.java,FirstRunActivitySigninAndSyncTest::continueButtonClickShowsSyncConsentPageWithChildAccount,True,True,"package VAR_1 ; import static VAR_2 ; import static VAR_3 ; import static VAR_4 ; import static VAR_5 ; import static VAR_6 ; import static VAR_7 ; import static VAR_8 ; import static VAR_9 . when ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 . R ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 ; public class VAR_35 { private static final String VAR_36 = STRING_1 VAR_37 public final VAR_38 VAR_39 = VAR_40 ( ) ; private final VAR_41 VAR_42 = new VAR_41 ( ) { public void VAR_43 ( VAR_44 VAR_45 , VAR_46 listener ) { VAR_47 ( VAR_48 . equals ( VAR_49 ) ? VAR_50 : VAR_51 ) ; } } ; public final VAR_52 VAR_53 = new VAR_52 ( VAR_42 ) ; public final VAR_54 < VAR_55 > VAR_56 = new VAR_54 < > ( VAR_57 class ) ; private VAR_58 VAR_59 ; public void VAR_60 ( ) { when ( VAR_61 ( ) ) . VAR_62 ( true ) ; VAR_63 ( VAR_59 ) ; } public void VAR_64 ( ) { VAR_65 ( ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_71 ( VAR_72 ( ) ) ) ) ; VAR_66 ( VAR_73 ( VAR_74 ) ) . VAR_75 ( VAR_76 ( ) ) ; VAR_77 ( VAR_78 class ) ; } public void VAR_79 ( ) { VAR_80 ( VAR_36 ) ; VAR_65 ( ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_66 ( VAR_73 ( VAR_74 ) ) . VAR_75 ( VAR_76 ( ) ) ; VAR_77 ( VAR_78 class ) ; } public void VAR_81 ( ) { VAR_80 ( VAR_36 ) ; VAR_65 ( ) ; VAR_77 ( VAR_82 class ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_77 ( VAR_83 class ) ; } public void VAR_84 ( ) { VAR_80 ( VAR_49 ) ; VAR_65 ( ) ; VAR_77 ( VAR_82 class ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_85 ( ( ) - > { VAR_86 ( ) . VAR_87 ( VAR_88 ) . VAR_89 ( ) ; } ) ; VAR_77 ( VAR_83 class ) ; } private < T extends VAR_90 > void VAR_77 ( Class < T > VAR_91 ) { VAR_92 ( ( ) - > { return VAR_93 ( VAR_86 ( ) . VAR_94 ( ) ) ; } , VAR_91 . getName ( ) + STRING_2 ) ; } private void VAR_65 ( ) { final VAR_95 VAR_96 = new VAR_95 ( VAR_97 ( ) , VAR_57 class ) ; VAR_98 ( VAR_96 ) ; VAR_99 ( VAR_86 ( ) , VAR_100 ) ; VAR_92 ( VAR_86 ( ) : : VAR_101 ) ; } }","package VAR_1 ; import static VAR_2 ; import static VAR_3 ; import static VAR_4 ; import static VAR_5 ; import static VAR_6 ; import static VAR_7 ; import static VAR_8 ; import static VAR_9 . when ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 . R ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 ; public class VAR_35 { private static final String VAR_36 = STRING_1 VAR_37 public final VAR_38 VAR_39 = VAR_40 ( ) ; private final VAR_41 VAR_42 = new VAR_41 ( ) { public void VAR_43 ( VAR_44 VAR_45 , VAR_46 listener ) { VAR_47 ( VAR_48 . equals ( VAR_49 ) ? VAR_50 : VAR_51 ) ; } } ; public final VAR_52 VAR_53 = new VAR_52 ( VAR_42 ) ; public final VAR_54 < VAR_55 > VAR_56 = new VAR_54 < > ( VAR_57 class ) ; private VAR_58 VAR_59 ; public void VAR_60 ( ) { when ( VAR_61 ( ) ) . VAR_62 ( true ) ; VAR_63 ( VAR_59 ) ; } public void VAR_64 ( ) { VAR_65 ( ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_71 ( VAR_72 ( ) ) ) ) ; VAR_66 ( VAR_73 ( VAR_74 ) ) . VAR_75 ( VAR_76 ( ) ) ; VAR_77 ( VAR_78 class ) ; } public void VAR_79 ( ) { VAR_80 ( VAR_36 ) ; VAR_65 ( ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_66 ( VAR_73 ( VAR_74 ) ) . VAR_75 ( VAR_76 ( ) ) ; VAR_77 ( VAR_78 class ) ; } public void VAR_81 ( ) { VAR_80 ( VAR_36 ) ; VAR_65 ( ) ; VAR_77 ( VAR_82 class ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_102 ( ) ; VAR_77 ( VAR_83 class ) ; } public void VAR_84 ( ) { VAR_80 ( VAR_49 ) ; VAR_65 ( ) ; VAR_77 ( VAR_82 class ) ; VAR_66 ( VAR_67 ( VAR_68 ) ) . VAR_69 ( VAR_70 ( VAR_72 ( ) ) ) ; VAR_102 ( ) ; VAR_77 ( VAR_83 class ) ; } private void VAR_102 ( ) { VAR_85 ( ( ) - > { VAR_86 ( ) . VAR_87 ( VAR_88 ) . VAR_89 ( ) ; } ) ; } private < T extends VAR_90 > void VAR_77 ( Class < T > VAR_91 ) { VAR_92 ( ( ) - > { return VAR_93 ( VAR_86 ( ) . VAR_94 ( ) ) ; } , VAR_91 . getName ( ) + STRING_2 ) ; } private void VAR_65 ( ) { final VAR_95 VAR_96 = new VAR_95 ( VAR_97 ( ) , VAR_57 class ) ; VAR_98 ( VAR_96 ) ; VAR_99 ( VAR_86 ( ) , VAR_100 ) ; VAR_92 ( VAR_86 ( ) : : VAR_101 ) ; } }",I feel like I've seen you do this before in aVAR_71her recent CL. Is there a shared place you can put this pattern?
72,4ddf1150_88a6e516,2171.0,"Think of the case: 1) user open this background Tab. 2) tap the tab switcher button and enter the tab switcher. 3) choose the background tab from the tab switcher again. 4) on the background tab, taps the back button. There are many steps are done before it returns to the Start surface, do you still want to close this background tab? I'm fine with deleting the tab here, but just want to make sure that you really want to delete this tab in such a case.

Actually, I think this could be:
if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND && !StartSurfaceUserData.getKeepTab(currentTab)) {
  getCurrentTabModel().closeTab(currentTab);
}

StartSurfaceUserData.setKeepTab() is called when user taps either home button or tab switcher button on the tab. It distinguishes the cases that tapping the back button directly after opening the tab from the cases that user does multiple other steps. Wdyt?",2169.0,2171.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser;', '', 'import android.annotation.TargetApi;', 'import android.app.ActivityManager;', 'import android.content.ComponentName;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.content.pm.ApplicationInfo;', 'import android.content.pm.ShortcutManager;', 'import android.os.Build;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.text.TextUtils;', 'import android.text.format.DateUtils;', 'import android.util.Pair;', 'import android.view.KeyEvent;', 'import android.view.KeyboardShortcutGroup;', 'import android.view.Menu;', 'import android.view.View;', 'import android.view.View.OnClickListener;', 'import android.view.ViewConfiguration;', 'import android.view.ViewGroup;', 'import android.view.Window;', 'import android.view.WindowManager;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', 'import androidx.lifecycle.Lifecycle;', 'import androidx.lifecycle.LifecycleObserver;', 'import androidx.lifecycle.LifecycleRegistry;', '', 'import org.chromium.base.CallbackController;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.MemoryPressureListener;', 'import org.chromium.base.ThreadUtils;', 'import org.chromium.base.TraceEvent;', 'import org.chromium.base.annotations.UsedByReflection;', 'import org.chromium.base.jank_tracker.JankTrackerImpl;', 'import org.chromium.base.library_loader.LibraryLoader;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.supplier.ObservableSupplierImpl;', 'import org.chromium.base.supplier.OneShotCallback;', 'import org.chromium.base.supplier.OneshotSupplier;', 'import org.chromium.base.supplier.OneshotSupplierImpl;', 'import org.chromium.base.supplier.Supplier;', 'import org.chromium.base.supplier.UnownedUserDataSupplier;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.cc.input.BrowserControlsState;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.IntentHandler.IntentHandlerDelegate;', 'import org.chromium.chrome.browser.IntentHandler.TabOpenType;', 'import org.chromium.chrome.browser.accessibility_tab_switcher.OverviewListLayout;', 'import org.chromium.chrome.browser.app.ChromeActivity;', 'import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.metrics.TabbedActivityLaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.ChromeNextTabPolicySupplier;', 'import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;', 'import org.chromium.chrome.browser.app.tabmodel.TabWindowManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.TabbedModeTabModelOrchestrator;', 'import org.chromium.chrome.browser.bookmarks.BookmarkUtils;', 'import org.chromium.chrome.browser.browserservices.intents.WebappConstants;', 'import org.chromium.chrome.browser.compositor.CompositorViewHolder;', 'import org.chromium.chrome.browser.compositor.bottombar.ephemeraltab.EphemeralTabCoordinator;', 'import org.chromium.chrome.browser.compositor.layouts.Layout;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChrome;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromePhone;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromeTablet;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeBehavior;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeController;', 'import org.chromium.chrome.browser.cookies.CookiesFetcher;', 'import org.chromium.chrome.browser.crypto.CipherFactory;', 'import org.chromium.chrome.browser.dependency_injection.ChromeActivityComponent;', 'import org.chromium.chrome.browser.device.DeviceClassManager;', 'import org.chromium.chrome.browser.dom_distiller.ReaderModeManager;', 'import org.chromium.chrome.browser.download.DownloadNotificationService;', 'import org.chromium.chrome.browser.download.DownloadOpenSource;', 'import org.chromium.chrome.browser.download.DownloadUtils;', 'import org.chromium.chrome.browser.feature_engagement.TrackerFactory;', 'import org.chromium.chrome.browser.feed.FeedSurfaceTracker;', 'import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;', 'import org.chromium.chrome.browser.flags.ActivityType;', 'import org.chromium.chrome.browser.flags.CachedFeatureFlags;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.fonts.FontPreloader;', 'import org.chromium.chrome.browser.gesturenav.NavigationSheet;', 'import org.chromium.chrome.browser.homepage.HomepageManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationPresenceController;', 'import org.chromium.chrome.browser.incognito.IncognitoProfileDestroyer;', 'import org.chromium.chrome.browser.incognito.IncognitoStartup;', 'import org.chromium.chrome.browser.incognito.IncognitoTabLauncher;', 'import org.chromium.chrome.browser.incognito.IncognitoTabSnapshotController;', 'import org.chromium.chrome.browser.incognito.IncognitoUtils;', 'import org.chromium.chrome.browser.infobar.DataReductionPromoInfoBar;', 'import org.chromium.chrome.browser.infobar.SyncErrorInfoBar;', 'import org.chromium.chrome.browser.layouts.LayoutStateProvider;', 'import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.metrics.AndroidSessionDurationsServiceState;', 'import org.chromium.chrome.browser.metrics.LaunchMetrics;', 'import org.chromium.chrome.browser.metrics.MainIntentBehaviorMetrics;', 'import org.chromium.chrome.browser.modaldialog.ChromeTabModalPresenter;', 'import org.chromium.chrome.browser.modaldialog.TabModalLifetimeHandler;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceChromeTabbedActivity;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceManager;', 'import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;', 'import org.chromium.chrome.browser.native_page.NativePageAssassin;', 'import org.chromium.chrome.browser.navigation_predictor.NavigationPredictorBridge;', 'import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;', 'import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;', 'import org.chromium.chrome.browser.ntp.NewTabPageUma;', 'import org.chromium.chrome.browser.ntp.NewTabPageUtils;', 'import org.chromium.chrome.browser.omnibox.OmniboxFocusReason;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelper;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelperSupplier;', 'import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.profiles.OTRProfileID;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.profiles.ProfileManager;', 'import org.chromium.chrome.browser.reengagement.ReengagementNotificationController;', 'import org.chromium.chrome.browser.search_engines.SearchEngineChoiceNotification;', 'import org.chromium.chrome.browser.settings.SettingsLauncherImpl;', 'import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;', 'import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;', 'import org.chromium.chrome.browser.survey.ChromeSurveyController;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorPromptUtils;', 'import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.tab.TabAssociatedApp;', 'import org.chromium.chrome.browser.tab.TabCreationState;', 'import org.chromium.chrome.browser.tab.TabDelegateFactory;', 'import org.chromium.chrome.browser.tab.TabLaunchType;', 'import org.chromium.chrome.browser.tab.TabSelectionType;', 'import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedAppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedRootUiCoordinator;', 'import org.chromium.chrome.browser.tabmodel.ChromeTabCreator;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHost;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostRegistry;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostUtils;', 'import org.chromium.chrome.browser.tabmodel.NextTabPolicy.NextTabPolicySupplier;', 'import org.chromium.chrome.browser.tabmodel.TabModel;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelector;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorBase;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabModelObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelUtils;', 'import org.chromium.chrome.browser.tabmodel.TabWindowManager;', 'import org.chromium.chrome.browser.tasks.ConditionalTabStripUtils;', 'import org.chromium.chrome.browser.tasks.EngagementTimeUtil;', 'import org.chromium.chrome.browser.tasks.JourneyManager;', 'import org.chromium.chrome.browser.tasks.ReturnToChromeExperimentsUtil;', 'import org.chromium.chrome.browser.tasks.TasksUma;', 'import org.chromium.chrome.browser.tasks.tab_management.TabGroupUi;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementDelegate;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementModuleProvider;', 'import org.chromium.chrome.browser.tasks.tab_management.TabUiFeatureUtilities;', 'import org.chromium.chrome.browser.toolbar.ToolbarButtonInProductHelpController;', 'import org.chromium.chrome.browser.toolbar.ToolbarIntentMetadata;', 'import org.chromium.chrome.browser.toolbar.ToolbarManager;', 'import org.chromium.chrome.browser.toolbar.top.ToolbarControlContainer;', 'import org.chromium.chrome.browser.translate.TranslateIntentHandler;', 'import org.chromium.chrome.browser.ui.AppLaunchDrawBlocker;', 'import org.chromium.chrome.browser.ui.RootUiCoordinator;', 'import org.chromium.chrome.browser.ui.TabObscuringHandler;', 'import org.chromium.chrome.browser.ui.appmenu.AppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.undo_tab_close_snackbar.UndoBarController;', 'import org.chromium.chrome.browser.usage_stats.UsageStatsService;', 'import org.chromium.chrome.browser.util.ChromeAccessibilityUtil;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.chrome.features.start_surface.StartSurface;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.chrome.features.start_surface.StartSurfaceState;', 'import org.chromium.chrome.features.start_surface.StartSurfaceUserData;', 'import org.chromium.components.browser_ui.settings.SettingsLauncher;', 'import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;', 'import org.chromium.components.browser_ui.util.ComposedBrowserControlsVisibilityDelegate;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.embedder_support.util.UrlUtilities;', 'import org.chromium.components.feature_engagement.EventConstants;', 'import org.chromium.components.messages.MessageDispatcherProvider;', 'import org.chromium.components.profile_metrics.BrowserProfileType;', 'import org.chromium.components.webapps.ShortcutSource;', 'import org.chromium.content_public.browser.LoadUrlParams;', 'import org.chromium.content_public.browser.NavigationHandle;', 'import org.chromium.content_public.browser.RenderFrameHost;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.content_public.browser.WebContents;', 'import org.chromium.content_public.browser.WebContentsAccessibility;', 'import org.chromium.content_public.common.ContentSwitches;', 'import org.chromium.ui.base.PageTransition;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.widget.Toast;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.HashSet;', 'import java.util.List;', 'import java.util.Locale;', '', '/**', ' * This is the main activity for ChromeMobile when not running in document mode.  All the tabs', ' * are accessible via a chrome specific tab switching UI.', ' */', 'public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>', '        implements ChromeAccessibilityUtil.Observer {', '    private static final String TAG = ""ChromeTabbedActivity"";', '', '    private static final String HELP_URL_PREFIX = ""https://support.google.com/chrome/"";', '', '    protected static final String WINDOW_INDEX = ""window_index"";', '', '    private static final String IS_INCOGNITO_SELECTED = ""is_incognito_selected"";', '', '    private static final int INVALID_WINDOW_ID = TabWindowManager.INVALID_WINDOW_INDEX;', '', '    // How long to delay closing the current tab when our app is minimized.  Have to delay this', ""    // so that we don't show the contents of the next tab while minimizing."", '    private static final long CLOSE_TAB_ON_MINIMIZE_DELAY_MS = 500;', '', '    // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs', '    // restore. This is needed because we do not know when reading PartnerBrowserCustomizations', '    // provider will be finished.', '    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;', '', '    /**', '     * Sending an intent with this action to Chrome will cause it to close all tabs', '     * (iff the --enable-test-intents command line flag is set). If a URL is supplied in the', '     * intent data, this will be loaded and unaffected by the close all action.', '     */', '    private static final String ACTION_CLOSE_TABS =', '            ""com.google.android.apps.chrome.ACTION_CLOSE_TABS"";', '', '    @VisibleForTesting', '    public static final String STARTUP_UMA_HISTOGRAM_SUFFIX = "".Tabbed"";', '', '    // Name of the ChromeTabbedActivity alias that handles MAIN intents.', '    public static final String MAIN_LAUNCHER_ACTIVITY_NAME = ""com.google.android.apps.chrome.Main"";', '', '    public static final SettingsLauncher SETTINGS_LAUNCHER = new SettingsLauncherImpl();', '', '    public static final HashSet<String> TABBED_MODE_COMPONENT_NAMES = new HashSet<String>() {', '        {', '            add(ChromeTabbedActivity.class.getName());', '            add(MultiInstanceChromeTabbedActivity.class.getName());', '            add(ChromeTabbedActivity2.class.getName());', '            add(MAIN_LAUNCHER_ACTIVITY_NAME);', '        }', '    };', '', '    /**', '     * Identifies a histogram to use in {@link #maybeDispatchExplicitMainViewIntent(Intent, int)}.', '     */', '    @IntDef({DispatchedBy.ON_CREATE, DispatchedBy.ON_NEW_INTENT})', '    @Retention(RetentionPolicy.SOURCE)', '    private @interface DispatchedBy {', '        int ON_CREATE = 1;', '        int ON_NEW_INTENT = 2;', '    }', '', '    // Count histogram used to track number of tabs when we show the Overview on Return to Chrome.', '    private static final String TAB_COUNT_ON_RETURN = ""Tabs.TabCountOnStartScreenShown"";', '', '    private final MainIntentBehaviorMetrics mMainIntentMetrics;', '    private @Nullable MultiInstanceManager mMultiInstanceManager;', '', '    private UndoBarController mUndoBarPopupController;', '', '    private LayoutManagerChrome mLayoutManager;', '', '    private ViewGroup mContentContainer;', '', '    private ToolbarControlContainer mControlContainer;', '', '    private TabbedModeTabModelOrchestrator mTabModelOrchestrator;', '    private TabModelSelectorBase mTabModelSelector;', '    private TabModelSelectorTabObserver mTabModelSelectorTabObserver;', '    private TabModelSelectorTabModelObserver mTabModelObserver;', '', '    private BrowserControlsVisibilityDelegate mVrBrowserControlsVisibilityDelegate;', '    private TabModalLifetimeHandler mTabModalHandler;', '', '    private boolean mUIWithNativeInitialized;', '', '    private Boolean mIsAccessibilityTabSwitcherEnabled;', '', '    private LocaleManager mLocaleManager;', '', '    private AppIndexingUtil mAppIndexingUtil;', '', '    private Runnable mShowHistoryRunnable;', '', '    private CompositorViewHolder mCompositorViewHolder;', '    private OverviewListLayout mOverviewListLayout;', '    /**', '     * Keeps track of whether or not a specific tab was created based on the startup intent.', '     */', '    private boolean mCreatedTabOnStartup;', '', '    // Whether or not the initial tab is being created.', '    private boolean mPendingInitialTabCreation;', '', '    // Whether {@link setInitialOverviewState()} has been called within the current onStart/onStop', '    // session.', '    private boolean mHasDeterminedOverviewStateForCurrentSession;', '    /**', '     *  Keeps track of the pref for the last time since this activity was stopped.', '     */', '    private ChromeInactivityTracker mInactivityTracker;', '', ""    // This is the cached value of mIntentHandler#shouldIgnoreIntent and shouldn't be read directly."", '    // Use #shouldIgnoreIntent instead.', '    private Boolean mShouldIgnoreIntent;', '    /*', '     *  Listens to FrameMetrics and records jank metrics.', '     */', '    private JankTrackerImpl mJankTracker;', '', '    // Supplier for a dependency to inform about the type of intent used to launch Chrome.', '    private OneshotSupplierImpl<ToolbarIntentMetadata> mIntentMetadataOneshotSupplier =', '            new OneshotSupplierImpl<>();', '', '    // Time at which an intent was received and handled.', '    private long mIntentHandlingTimeMs;', '', '    /**', '     * Whether the StartSurface is shown when Chrome is launched.', '     */', '    private boolean mOverviewShownOnStart;', '', '    private NextTabPolicySupplier mNextTabPolicySupplier;', '', '    private final UnownedUserDataSupplier<StartupPaintPreviewHelper>', '            mStartupPaintPreviewHelperSupplier = new StartupPaintPreviewHelperSupplier();', '', '    private final OneshotSupplierImpl<LayoutStateProvider> mLayoutStateProviderOneshotSupplier =', '            new OneshotSupplierImpl<>();', '    // TODO(crbug.com/1108496): Removed after all usages has been migrated to LayoutStateProvider.', '    private final OneshotSupplierImpl<OverviewModeBehavior> mOverviewModeBehaviorSupplier =', '            new OneshotSupplierImpl<>();', '    private OverviewModeController mOverviewModeController;', '', '    private ObservableSupplierImpl<EphemeralTabCoordinator> mEphemeralTabCoordinatorSupplier =', '            new ObservableSupplierImpl<>();', '    private final OneshotSupplierImpl<StartSurface> mStartSurfaceSupplier =', '            new OneshotSupplierImpl<>();', '    private ObservableSupplierImpl<Tab> mStartSurfaceParentTabSupplier =', '            new ObservableSupplierImpl<>();', '', '    private CallbackController mCallbackController = new CallbackController();', '    private TabbedModeTabDelegateFactory mTabDelegateFactory;', '', '    private final AppLaunchDrawBlocker mAppLaunchDrawBlocker;', '', '    // ID assigned to each ChromeTabbedActivity instance in Android S+ where multi-instance feature', '    // is supported. This can be explicitly set in the incoming Intent or internally assigned.', '    private int mWindowId;', '', '    private final IncognitoTabHost mIncognitoTabHost = new IncognitoTabHost() {', '        @Override', '        public boolean hasIncognitoTabs() {', '            return getTabModelSelector().getModel(true).getCount() > 0;', '        }', '', '        @Override', '        public void closeAllIncognitoTabs() {', '            if (isActivityFinishingOrDestroyed()) return;', '', '            // If the tabbed activity has not yet initialized, then finish the activity to avoid', '            // timing issues with clearing the incognito tab state in the background.', '            if (!areTabModelsInitialized() || !didFinishNativeInitialization()) {', '                finish();', '                return;', '            }', '', '            getTabModelSelector().getModel(true).closeAllTabs(false, false);', '        }', '', '        @Override', '        public boolean isActiveModel() {', '            return getTabModelSelector().getModel(true).isActiveModel();', '        }', '    };', '', '    /**', '     * This class is used to warm up the chrome split ClassLoader. See SplitChromeApplication for', '     * more info', '     */', '    @UsedByReflection(""SplitChromeApplication.java"")', '    public static class Preload extends ChromeTabbedActivity {', '        private LifecycleRegistry mLifecycleRegistry;', '', '        @UsedByReflection(""SplitChromeApplication.java"")', '        public Preload() {}', '', '        @Override', '        public Lifecycle getLifecycle() {', '            if (mLifecycleRegistry == null) {', '                // LifecycleRegistry normally enforces it is called on the main thread, but this', '                // class will be preloaded in a background thread. The only method that gets called', '                // in the activity constructor is addObserver(), so just override that.', '                mLifecycleRegistry = new LifecycleRegistry(null) {', '                    @Override', '                    public void addObserver(LifecycleObserver observer) {}', '                };', '            }', '            return mLifecycleRegistry;', '        }', '    }', '', '    /**', '     * Specify the proper non-.Main-aliased Chrome Activity for the given component.', '     *', '     * @param intent The intent to set the component for.', '     * @param component The client generated component to be validated.', '     */', '    public static void setNonAliasedComponent(Intent intent, ComponentName component) {', '        assert component != null;', '        Context appContext = ContextUtils.getApplicationContext();', '        if (!TextUtils.equals(component.getPackageName(), appContext.getPackageName())) {', '            return;', '        }', '        if (component.getClassName() != null', '                && TextUtils.equals(component.getClassName(),', '                        ChromeTabbedActivity.MAIN_LAUNCHER_ACTIVITY_NAME)) {', '            // Keep in sync with the activities that the .Main alias points to in', '            // AndroidManifest.xml.', '            intent.setClass(appContext, ChromeTabbedActivity.class);', '        } else {', '            intent.setComponent(component);', '        }', '    }', '', '    /**', '     * Constructs a ChromeTabbedActivity.', '     */', '    public ChromeTabbedActivity() {', '        mMainIntentMetrics = new MainIntentBehaviorMetrics();', '', '        // AppLaunchDrawBlocker may block drawing the Activity content until the initial tab is', '        // available.', '        // clang-format off', '        mAppLaunchDrawBlocker = new AppLaunchDrawBlocker(getLifecycleDispatcher(),', '                () -> findViewById(android.R.id.content),', '                this::getIntent, this::shouldIgnoreIntent, this::isTablet,', '                this::shouldShowOverviewPageOnStart);', '        // clang-format on', '    }', '', '    @Override', '    protected void onPreCreate() {', '        super.onPreCreate();', '        mMultiInstanceManager = MultiInstanceManager.create(this, getTabModelOrchestratorSupplier(),', '                getMultiWindowModeStateDispatcher(), getLifecycleDispatcher(),', '                getModalDialogManagerSupplier(), this);', '    }', '', '    @Override', '    protected @LaunchIntentDispatcher.Action int maybeDispatchLaunchIntent(', '            Intent intent, Bundle savedInstanceState) {', '        // Detect if incoming intent is a result of Chrome recreating itself. For now, restrict this', ""        // path to reparenting to ensure the launching logic isn't disrupted."", ""        // TODO(crbug.com/1065491): Unlock this codepath for all incoming intents once it's"", '        // confirmed working and stable.', '        if (savedInstanceState != null', '                && AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()) {', '            return LaunchIntentDispatcher.Action.CONTINUE;', '        }', '', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_MAIN.equals(intent.getAction())) {', '            // Call dispatchToTabbedActivity() for MAIN intents to activate proper multi-window', '            // TabbedActivity (i.e. if CTA2 is currently running and Chrome is started, CTA2', ""            // should be brought to front). Don't call dispatchToTabbedActivity() for non-MAIN"", '            // intents to avoid breaking cases where CTA is started explicitly (e.g. to handle', ""            // 'Move to other window' command from CTA2)."", '            return LaunchIntentDispatcher.dispatchToTabbedActivity(this, intent);', '        }', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(intent, DispatchedBy.ON_CREATE);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            return action;', '        }', '        return super.maybeDispatchLaunchIntent(intent, savedInstanceState);', '    }', '', '    // We know of at least one app that explicitly specifies .Main activity in custom tab', ""    // intents. The app shouldn't be doing that, but until it's updated, we need to support"", '    // such use case.', '    //', '    // This method attempts to treat VIEW intents explicitly sent to .Main as custom tab', '    // intents, and dispatch them accordingly. If the intent was not dispatched, the method', '    // returns Action.CONTINUE.', '    //', '    // The method also updates the supplied boolean histogram with the dispatching result,', '    // but only if the intent is a VIEW intent sent explicitly to .Main activity.', '    private @LaunchIntentDispatcher.Action int maybeDispatchExplicitMainViewIntent(', '            Intent intent, @DispatchedBy int dispatchedBy) {', ""        // The first check ensures that this is .Main activity alias (we can't check exactly, but"", '        // this gets us sufficiently close).', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getComponent() != null', '                && MAIN_LAUNCHER_ACTIVITY_NAME.equals(intent.getComponent().getClassName())) {', '            @LaunchIntentDispatcher.Action', '            int action = LaunchIntentDispatcher.dispatchToCustomTabActivity(this, intent);', '            switch (dispatchedBy) {', '                case DispatchedBy.ON_CREATE:', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnCreate"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                case DispatchedBy.ON_NEW_INTENT:', '', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnNewIntent"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                default:', '                    assert false : ""Unknown dispatchedBy value "" + dispatchedBy;', '            }', '            if (action == LaunchIntentDispatcher.Action.CONTINUE) {', '                // Intent was not dispatched, record its source.', '                @IntentHandler.ExternalAppId', '                int externalId = IntentHandler.determineExternalIntentSource(intent);', '                RecordHistogram.recordEnumeratedHistogram(', '                        ""Android.MainActivity.UndispatchedExplicitMainViewIntentSource"", externalId,', '                        IntentHandler.ExternalAppId.NUM_ENTRIES);', '', ""                // Crash if intent came from us, but only in debug builds and only if we weren't"", ""                // explicitly told not to. Hopefully we'll get enough reports to find where"", '                // these intents come from.', '                if (externalId == IntentHandler.ExternalAppId.CHROME', '                        && 0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)', '                        && !CommandLine.getInstance().hasSwitch(', '                                ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS)) {', '                    String intentInfo = intent.toString();', '                    Bundle extras = intent.getExtras();', '                    if (extras != null) {', '                        intentInfo +=', '                                "", extras.keySet = ["" + TextUtils.join("", "", extras.keySet()) + ""]"";', '                    }', '                    String message = String.format((Locale) null,', '                            ""VIEW intent sent to .Main activity alias was not dispatched. PLEASE ""', '                                    + ""report the following info to crbug.com/789732: \\""%s\\"". Use ""', '                                    + ""--%s flag to disable this check."",', '                            intentInfo, ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS);', '                    throw new IllegalStateException(message);', '                }', '            }', '            return action;', '        }', '        return LaunchIntentDispatcher.Action.CONTINUE;', '    }', '', '    @Override', '    public void initializeCompositor() {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeCompositor"");', '            super.initializeCompositor();', '', '            // LocaleManager can only function after the native library is loaded.', '            mLocaleManager = LocaleManager.getInstance();', '            mLocaleManager.setSettingsLauncher(SETTINGS_LAUNCHER);', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '', '            mTabModelOrchestrator.onNativeLibraryReady(getTabContentManager());', '', '            mTabModelObserver = new TabModelSelectorTabModelObserver(mTabModelSelector) {', '                @Override', '                public void didCloseTab(int tabId, boolean incognito) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                @Override', '                public void tabPendingClosure(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(true);', '                }', '', '                @Override', '                public void tabRemoved(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                private void closeIfNoTabsAndHomepageEnabled(boolean isPendingClosure) {', '                    if (getTabModelSelector().getTotalTabCount() == 0) {', '                        // If the last tab is closed, and homepage is enabled, then exit Chrome.', '                        if (HomepageManager.shouldCloseAppWithZeroTabs()) {', '                            finish();', '                        } else if (isPendingClosure) {', '                            NewTabPageUma.recordNTPImpression(', '                                    NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                        }', '                    }', '', '                    // TODO(960196) : remove this when the associated bug fix. This is a band-aid', '                    //  fix for TabGrid and closing tabs with TabGroupUi.', '                    //  If one of the following is true, then exit Chrome when TabGroupsAndroid is', '                    //  enabled, and tab switcher is not shown:', '                    //   1. If the very last tab is closed.', '                    //   2. If normal tab model is selected and no normal tabs.', '                    if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(ChromeTabbedActivity.this)', '                            && !mOverviewModeController.overviewVisible()) {', '                        if (getTabModelSelector().getTotalTabCount() == 0', '                                || (!getTabModelSelector().isIncognitoSelected()', '                                        && getTabModelSelector().getModel(false).getCount() == 0)) {', '                            finish();', '                        }', '                    }', '                }', '', '                @Override', '                public void didAddTab(', '                        Tab tab, @TabLaunchType int type, @TabCreationState int creationState) {', '                    if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                            && !DeviceClassManager.enableAnimations()) {', '                        Toast.makeText(ChromeTabbedActivity.this, R.string.open_in_new_tab_toast,', '                                     Toast.LENGTH_SHORT)', '                                .show();', '                    }', '                }', '', '                @Override', '                public void multipleTabsPendingClosure(List<Tab> tabs, boolean isAllTabs) {', '                    if (!isAllTabs) return;', '                    NewTabPageUma.recordNTPImpression(NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                }', '            };', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeCompositor"");', '        }', '    }', '', '    private void refreshSignIn() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.refreshSignIn"")) {', '            FirstRunSignInProcessor.start(this);', '        }', '    }', '', '    private void setupCompositorContentPreNativeForPhone() {', '        if (isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForPhone"")) {', '            CompositorViewHolder compositorViewHolder = getCompositorViewHolderSupplier().get();', '', '            // TODO(1169205): Remove all GTS enabled checks after M5 is default.', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {', '                TabManagementDelegate tabManagementDelegate =', '                        TabManagementModuleProvider.getDelegate();', '                if (tabManagementDelegate != null) {', '                    StartSurface startSurface = tabManagementDelegate.createStartSurface(this,', '                            mRootUiCoordinator.getScrimCoordinator(),', '                            mRootUiCoordinator.getBottomSheetController(), mStartSurfaceSupplier,', '                            mStartSurfaceParentTabSupplier, hadWarmStart(), getWindowAndroid(),', '                            compositorViewHolder, compositorViewHolder::getDynamicResourceLoader,', '                            getTabModelSelector(), getBrowserControlsManager(),', '                            getSnackbarManager(), getShareDelegateSupplier(),', '                            getToolbarManager()::getOmniboxStub, getTabContentManager(),', '                            getModalDialogManager(),', '                            /* chromeActivityNativeDelegate= */ this, getLifecycleDispatcher(),', '                            getTabCreatorManagerSupplier().get(),', '                            getMenuOrKeyboardActionController(),', '                            getMultiWindowModeStateDispatcher(), mJankTracker,', '                            getToolbarManager()::getToolbar);', '                }', '            }', '', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,', '                    mStartSurfaceSupplier.get(), getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPreNativeForTablet() {', '        if (!isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForTablet"")) {', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromeTablet(getCompositorViewHolderSupplier().get(),', '                    mContentContainer, getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPostNative() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPostNative"")) {', '            if (!isLayoutManagerCreated()) {', '                if (isTablet()) {', '                    setupCompositorContentPreNativeForTablet();', '                } else {', '                    setupCompositorContentPreNativeForPhone();', '                }', '            }', '', '            mLayoutManager.setEnableAnimations(DeviceClassManager.enableAnimations());', '', '            // TODO(yusufo): get rid of findViewById(R.id.url_bar).', '            initializeCompositorContent(mLayoutManager, findViewById(R.id.url_bar),', '                    mContentContainer, mControlContainer);', '        }', '    }', '', '    private boolean isLayoutManagerCreated() {', '        return mLayoutManager != null;', '    }', '', '    private void initializeToolbarManager() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initializeToolbarManager"")) {', '            mUndoBarPopupController.initialize();', '', '            OnClickListener tabSwitcherClickHandler = v -> {', '                if (ChromeFeatureList.isEnabled(ChromeFeatureList.TOOLBAR_IPH_ANDROID)) {', '                    Profile profile = mTabModelProfileSupplier.get();', '                    if (profile != null) {', '                        TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                EventConstants.TAB_SWITCHER_BUTTON_CLICKED);', '                    }', '                }', '', '                if (getFullscreenManager().getPersistentFullscreenMode()) {', '                    return;', '                }', '', '                if (isInOverviewMode()', '                        && !ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                    hideOverview();', '                } else {', '                    showOverview(StartSurfaceState.SHOWING_TABSWITCHER);', '                }', '            };', '            OnClickListener newTabClickHandler = v -> {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This assumes that the keyboard can not be seen at the same time as the', '                // newtab button on the toolbar.', '                getCurrentTabCreator().launchNTP();', '                mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);', '                if (getTabModelSelector().isIncognitoSelected()) {', '                    RecordUserAction.record(""MobileToolbarStackViewNewIncognitoTab"");', '                } else {', '                    RecordUserAction.record(""MobileToolbarStackViewNewTab"");', '                }', '                RecordUserAction.record(""MobileTopToolbarNewTabButton"");', '', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '            };', '            OnClickListener bookmarkClickHandler = v -> addOrEditBookmark(getActivityTab());', '', '            Supplier<Boolean> showStartSurfaceSupplier = () -> {', '                // If incognito is selected, tapping the home button stays on the current incognito', '                // tab.', '                if (ReturnToChromeExperimentsUtil.shouldShowStartSurfaceAsTheHomePageOnPhone(', '                            this, isTablet())', '                        && !mTabModelSelector.isIncognitoSelected()) {', '                    StartSurfaceUserData.setKeepTab(getActivityTab(), true);', '                    showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '                    return true;', '                }', '                return false;', '            };', '', '            getToolbarManager().initializeWithNative(mLayoutManager, tabSwitcherClickHandler,', '                    newTabClickHandler, bookmarkClickHandler, null, showStartSurfaceSupplier);', '', '            if (!TabUiFeatureUtilities.supportInstantStart(isTablet(), this)) {', '                assert !(mOverviewModeController != null', '                        && mOverviewModeController.overviewVisible());', '            }', '        }', '    }', '', '    private void maybeCreateIncognitoTabSnapshotController() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.maybeCreateIncognitoTabSnapshotController"")) {', '            if (!CommandLine.getInstance().hasSwitch(', '                        ChromeSwitches.ENABLE_INCOGNITO_SNAPSHOTS_IN_ANDROID_RECENTS)) {', '                IncognitoTabSnapshotController.createIncognitoTabSnapshotController(', '                        this, getWindow(), mLayoutManager, mTabModelSelector);', '            }', '', '            mUIWithNativeInitialized = true;', '            onAccessibilityTabSwitcherModeChanged();', '', '            // The dataset has already been created, we need to initialize our state.', '            mTabModelSelector.notifyChanged();', '', '            // Check for incognito tabs to handle the case where Chrome was swiped away in the', '            // background.', '            if (!IncognitoTabHostUtils.doIncognitoTabsExist()) {', '                IncognitoNotificationManager.dismissIncognitoNotification();', '                DownloadNotificationService.getInstance().cancelOffTheRecordDownloads();', '            }', '        }', '    }', '', '    private void maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.""', '                     + ""maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver"")) {', '            FeedSurfaceTracker.getInstance().startup();', '', '            if (UsageStatsService.isEnabled()) {', '                UsageStatsService.getInstance().createPageViewObserver(', '                        this, getActivityTabProvider(), getTabContentManagerSupplier());', '            }', '        }', '    }', '', '    private void initJourneyManager() {', '        assert mOverviewModeController != null;', '', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initJourneyManager"")) {', '            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TAB_ENGAGEMENT_REPORTING_ANDROID)) {', '                // The lifecycle of this object is managed by the lifecycle dispatcher.', '                new JourneyManager(getTabModelSelector(), getLifecycleDispatcher(),', '                        mOverviewModeController, new EngagementTimeUtil());', '            }', '        }', '    }', '', '    @Override', '    public void onNewIntent(Intent intent) {', ""        // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly"", '        // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,', '        // and not Chrome', '        Intent intentForDispatching = new Intent(intent);', '        intentForDispatching.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(', '                intentForDispatching, DispatchedBy.ON_NEW_INTENT);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            // Pressing back button in CCT should bring user to the caller activity.', '            moveTaskToBack(true);', '            // Intent was dispatched to CustomTabActivity, consume it.', '            return;', '        }', '', '        mIntentHandlingTimeMs = SystemClock.uptimeMillis();', '        super.onNewIntent(intent);', '    }', '', '    @Override', '    public void startNativeInitialization() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.startNativeInitialization"")) {', ""            // This is on the critical path so don't delay."", '            if (ChromeFeatureList.isEnabled(', '                        ChromeFeatureList.DARKEN_WEBSITES_CHECKBOX_IN_THEMES_SETTING)) {', '                WebContentsDarkModeController.createInstance();', '            }', '            setupCompositorContentPostNative();', '', ""            // All this initialization can be expensive so it's split into multiple tasks."", '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::refreshSignIn));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initializeToolbarManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeCreateIncognitoTabSnapshotController));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::onAccessibilityTabSwitcherModeChanged));', '', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initJourneyManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::finishNativeInitialization));', '            ChromeAccessibilityUtil.get().addObserver(this);', '        }', '    }', '', '    @Override', '    public void finishNativeInitialization() {', '        super.finishNativeInitialization();', '', '        // TODO(jinsukkim): Let these classes handle the registration by themselves.', '        mCompositorViewHolder = getCompositorViewHolderSupplier().get();', '        mOverviewListLayout = (OverviewListLayout) mLayoutManager.getOverviewListLayout();', '        getTabObscuringHandler().addObserver(mCompositorViewHolder);', '        getTabObscuringHandler().addObserver(mOverviewListLayout);', '', '        ChromeAccessibilityUtil.get().addObserver(mLayoutManager);', '        if (isTablet()) ChromeAccessibilityUtil.get().addObserver(mCompositorViewHolder);', '    }', '', '    @Override', '    public void onResumeWithNative() {', '        super.onResumeWithNative();', '', '        IncognitoStartup.onResumeWithNative(', '                getTabModelSelectorSupplier(), TABBED_MODE_COMPONENT_NAMES);', '', '        mLocaleManager.setSnackbarManager(getSnackbarManager());', '        mLocaleManager.startObservingPhoneChanges();', '', '        if (isWarmOnResume()) {', '            NavigationPredictorBridge.onActivityWarmResumed();', '        } else {', '            NavigationPredictorBridge.onColdStart();', '        }', '', '        // This call is not guarded by a feature flag.', '        SearchEngineChoiceNotification.handleSearchEngineChoice(', '                this, getSnackbarManager(), SETTINGS_LAUNCHER);', '', '        if (!isWarmOnResume()) {', '            SuggestionsMetrics.recordArticlesListVisible();', '        }', '    }', '', '    @Override', '    public void onPauseWithNative() {', '        mTabModelSelector.commitAllTabClosures();', '        CookiesFetcher.persistCookies();', '', '        mLocaleManager.setSnackbarManager(null);', '        mLocaleManager.stopObservingPhoneChanges();', '', '        NavigationPredictorBridge.onPause();', '', '        super.onPauseWithNative();', '    }', '', '    @Override', '    public void onStopWithNative() {', '        super.onStopWithNative();', '', '        mTabModelOrchestrator.saveState();', '        mHasDeterminedOverviewStateForCurrentSession = false;', '    }', '', '    @Override', '    public void onStartWithNative() {', '        mMainIntentMetrics.logLaunchBehavior();', '        super.onStartWithNative();', '', ""        // Don't call setInitialOverviewState if we're waiting for the tab's creation or we risk"", '        // showing a glimpse of the tab selector during start up.', '        if (!mPendingInitialTabCreation) {', '            setInitialOverviewState();', '        }', '', '        if (TabUiFeatureUtilities.isConditionalTabStripEnabled()', '                || ConditionalTabStripUtils.getOptOutIndicator()) {', '            ConditionalTabStripUtils.updateFeatureExpiration(', '                    mInactivityTracker.getLastBackgroundedTimeMs());', '        }', '', '        Bundle savedInstanceState = getSavedInstanceState();', '        if (savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false)) {', '            // This will be executed only once since SavedInstanceState will be reset a few lines', '            // later.', '            AndroidSessionDurationsServiceState.restoreNativeFromSerialized(savedInstanceState,', '                    getCurrentTabModel().getProfile().getPrimaryOTRProfile(', '                            /* createIfNeeded= */ true));', '        }', '', '        resetSavedInstanceState();', '        StartSurfaceConfiguration.addFeedVisibilityObserver();', '        BookmarkUtils.maybeExpireLastBookmarkLocationForReadLater(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    @Override', '    public void onNewIntentWithNative(Intent intent) {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.onNewIntentWithNative"");', '', '            super.onNewIntentWithNative(intent);', '            if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                logMainIntentBehavior(intent);', '            }', '', '            if (CommandLine.getInstance().hasSwitch(ContentSwitches.ENABLE_TEST_INTENTS)) {', '                handleDebugIntent(intent);', '            }', '', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.onNewIntentWithNative"");', '        }', '    }', '', '    @Override', '    public @ActivityType int getActivityType() {', '        return ActivityType.TABBED;', '    }', '', '    @Override', '    public ChromeTabCreator getTabCreator(boolean incognito) {', '        return (ChromeTabCreator) super.getTabCreator(incognito);', '    }', '', '    @Override', '    public ChromeTabCreator getCurrentTabCreator() {', '        return (ChromeTabCreator) super.getCurrentTabCreator();', '    }', '', '    @Override', '    public OverviewModeBehavior getOverviewModeBehavior() {', '        return mOverviewModeController;', '    }', '', '    @Override', '    public @Nullable OneshotSupplier<OverviewModeBehavior> getOverviewModeBehaviorSupplier() {', '        return mOverviewModeBehaviorSupplier;', '    }', '', '    /**', '     * @return The toolbar button in-product help controller for this activity.', '     * TODO(pnoland, https://crbug.com/865801): remove this in favor', ""     *        of injecting the controller directly where it's needed."", '     */', '    public ToolbarButtonInProductHelpController getToolbarButtonInProductHelpController() {', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getToolbarButtonInProductHelpController();', '    }', '', '    private void handleDebugIntent(Intent intent) {', '        if (ACTION_CLOSE_TABS.equals(intent.getAction())) {', '            getTabModelSelector().closeAllTabs();', '        } else if (MemoryPressureListener.handleDebugIntent(', '                           ChromeTabbedActivity.this, intent.getAction())) {', '            // Handled.', '        }', '    }', '', '    private void setTrackColdStartupMetrics(boolean shouldTrackColdStartupMetrics) {', '        assert getActivityTabStartupMetricsTracker() != null;', '', '        if (shouldTrackColdStartupMetrics) {', '            getActivityTabStartupMetricsTracker().trackStartupMetrics(STARTUP_UMA_HISTOGRAM_SUFFIX);', '        } else {', '            getActivityTabStartupMetricsTracker().cancelTrackingStartupMetrics();', '        }', '', '        // Paint Preview should follow the same logic as startup UMA histograms as the feature', '        // should only run on cold startup of Chrome when the user is unable to interact before', '        // entering a tab.', '        StartupPaintPreviewHelper.setShouldShowOnRestore(shouldTrackColdStartupMetrics);', '    }', '', '    private void setInitialOverviewState() {', '        if (mHasDeterminedOverviewStateForCurrentSession) return;', '', '        mHasDeterminedOverviewStateForCurrentSession = true;', '        boolean isOverviewVisible = mOverviewModeController.overviewVisible();', '', '        if (shouldRefreshAndShowOverview(isOverviewVisible)) {', '            if (getCurrentTabModel() != null) {', '                RecordHistogram.recordCountHistogram(', '                        TAB_COUNT_ON_RETURN, getCurrentTabModel().getCount());', '            }', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this) && !isTablet()) {', '                mStartSurfaceSupplier.get().getController().enableRecordingFirstMeaningfulPaint(', '                        getOnCreateTimestampMs());', '            }', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '            return;', '        }', '', '        if (getActivityTab() == null && !isOverviewVisible) {', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '        }', '', '        if (IntentUtils.isMainIntentFromLauncher(getIntent())', '                && mOverviewModeController.overviewVisible()) {', '            RecordUserAction.record(""MobileStartup.UserEnteredTabSwitcher"");', '        }', '    }', '', '    private boolean shouldRefreshAndShowOverview(boolean isOverviewVisible) {', '        // If StartSurfaceConfiguration.NEW_SURFACE_FROM_HOME_BUTTON is turned on, MV tiles and', '        // carousels may be hidden before Chrome is brought to the background. If overview should be', '        // shown, no matter overview was already visible or not, we should call', '        // showOverview(StartSurfaceState.SHOWING_START) to show MV tiles and carousels again.', '        return shouldShowOverviewPageOnStart()', '                && (!isOverviewVisible', '                        || StartSurfaceConfiguration.shouldShowNewSurfaceFromHomeButton());', '    }', '', '    /**', '     * Returns whether grid Tab switcher or the Start surface should be shown at startup.', '     */', '    private boolean shouldShowOverviewPageOnStart() {', '        return ReturnToChromeExperimentsUtil.shouldShowOverviewPageOnStart(', '                this, getIntent(), getTabModelSelector(), mInactivityTracker);', '    }', '', '    private void logMainIntentBehavior(Intent intent) {', '        assert IntentUtils.isMainIntentFromLauncher(intent);', '        // TODO(tedchoc): We should cache the last visible time and reuse it to avoid different', '        //                values of this depending on when it is called after the activity was', '        //                shown.', '', '        // Temporary safety check to make sure none of this code runs if the feature is', '        // disabled.', '        if (ReengagementNotificationController.isEnabled()) {', '            if (mCallbackController != null) {', '                new OneShotCallback<>(', '                        mTabModelProfileSupplier, mCallbackController.makeCancelable(profile -> {', '                            assert profile != null : ""Unexpectedly null profile from TabModel."";', '                            if (profile == null) return;', '', '                            TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                    EventConstants.STARTED_FROM_MAIN_INTENT);', '                        }));', '            }', '        }', '', '        mMainIntentMetrics.onMainIntentWithNative(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    /** Access the main intent metrics for test validation. */', '    @VisibleForTesting', '    public MainIntentBehaviorMetrics getMainIntentBehaviorMetricsForTesting() {', '        return mMainIntentMetrics;', '    }', '', '    @VisibleForTesting', '    public ChromeInactivityTracker getInactivityTrackerForTesting() {', '        return mInactivityTracker;', '    }', '', '    @Override', '    public void initializeState() {', '        // This method goes through 3 steps:', ""        // 1. Load the saved tab state (but don't start restoring the tabs yet)."", '        // 2. Process the Intent that this activity received and if that should result in any', '        //    new tabs, create them.  This is done after step 1 so that the new tab gets', '        //    created after previous tab state was restored.', '        // 3. If no tabs were created in any of the above steps, create an NTP, otherwise', '        //    start asynchronous tab restore (loading the previously active tab synchronously', '        //    if no new tabs created in step 2).', '', '        // Only look at the original intent if this is not a ""restoration"" and we are allowed to', '        // process intents. Any subsequent intents are carried through onNewIntent.', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeState"");', '', '            super.initializeState();', '            Log.i(TAG, ""#initializeState"");', '            Intent intent = getIntent();', '', '            boolean hadCipherData =', '                    CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());', '', '            boolean noRestoreState =', '                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);', '            if (noRestoreState) {', '                // Clear the state files because they are inconsistent and useless from now on.', '                mTabModelOrchestrator.clearState();', '            } else {', '                // State should be clear when we start first run and hence we do not need to load', '                // a previous state. This may change the current Model, watch out for initialization', '                // based on the model.', '                // Never attempt to restore incognito tabs when this activity was previously swiped', '                // away in Recents. http://crbug.com/626629', '                boolean ignoreIncognitoFiles = !hadCipherData;', '                mTabModelOrchestrator.loadState(ignoreIncognitoFiles);', '            }', '', '            mInactivityTracker.register(this.getLifecycleDispatcher());', '            boolean isIntentWithEffect = false;', '            boolean isMainIntentFromLauncher = false;', '            if (getSavedInstanceState() == null && intent != null) {', '                if (!shouldIgnoreIntent()) {', '                    isIntentWithEffect = mIntentHandler.onNewIntent(intent);', '                }', '', '                if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                    isMainIntentFromLauncher = true;', '                    logMainIntentBehavior(intent);', '                }', '            }', '', '            mIntentMetadataOneshotSupplier.set(', '                    new ToolbarIntentMetadata(isMainIntentFromLauncher, isIntentWithEffect));', '', '            // If we have tabs to reparent and getSavedInstanceState() is non-null, then the tabs', '            // are coming from night mode tab reparenting. In this case, reparenting happens', '            // synchronously along with tab restoration so there are no tabs waiting for', '            // reparenting like there are for other tab reparenting operations.', '            boolean hasTabWaitingForReparenting =', '                    AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()', '                    && getSavedInstanceState() == null;', '            mCreatedTabOnStartup = getCurrentTabModel().getCount() > 0', '                    || mTabModelOrchestrator.getRestoredTabCount() > 0 || isIntentWithEffect', '                    || hasTabWaitingForReparenting;', '', '            // We always need to try to restore tabs. The set of tabs might be empty, but at least', '            // it will trigger the notification that tab restore is complete which is needed by', '            // other parts of Chrome such as sync.', '            boolean activeTabBeingRestored = !isIntentWithEffect', '                    || (shouldShowOverviewPageOnStart()', '                            && !mTabModelSelector.isIncognitoSelected());', '', '            mTabModelOrchestrator.restoreTabs(activeTabBeingRestored);', '', '            // Only create an initial tab if no tabs were restored and no intent was handled.', '            // Also, check whether the active tab was supposed to be restored and that the total', '            // tab count is now non zero.  If this is not the case, tab restore failed and we need', '            // to create a new tab as well.', '            if (!mCreatedTabOnStartup', '                    || (!hasTabWaitingForReparenting && activeTabBeingRestored', '                            && getTabModelSelector().getTotalTabCount() == 0)) {', '                // If homepage URI is not determined, due to PartnerBrowserCustomizations provider', '                // async reading, then create a tab at the async reading finished. If it takes', '                // too long, just create NTP.', '', '                mPendingInitialTabCreation = true;', '                PartnerBrowserCustomizations.getInstance().setOnInitializeAsyncFinished(() -> {', '                    if (!isActivityFinishingOrDestroyed()) {', '                        createInitialTab();', '                    }', '                }, INITIAL_TAB_CREATION_TIMEOUT_MS);', '            }', '', '            // If initial tab creation is pending, this will instead be handled when we create the', '            // initial tab in #createInitialTab.', '            if (!mPendingInitialTabCreation) {', '                mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '            }', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeState"");', '        }', '    }', '', '    private boolean hasStartWithNativeBeenCalled() {', '        int activity_state = getLifecycleDispatcher().getCurrentActivityState();', '        return activity_state == ActivityLifecycleDispatcher.ActivityState.STARTED_WITH_NATIVE', '                || activity_state == ActivityLifecycleDispatcher.ActivityState.RESUMED_WITH_NATIVE;', '    }', '', '    /**', '     * Create an initial tab for cold start without restored tabs.', '     */', '    private void createInitialTab() {', '        Log.i(TAG, ""#createInitialTab executed."");', '        mPendingInitialTabCreation = false;', '', '        // If the start surface or grid tab switcher will be shown on start, do not create a new', '        // tab.', '        if (!shouldShowOverviewPageOnStart()) {', '            String url = HomepageManager.getHomepageUri();', '            if (TextUtils.isEmpty(url)) {', '                url = UrlConstants.NTP_URL;', '            } else {', '                // Migrate legacy NTP URLs (chrome://newtab) to the newer format', '                // (chrome-native://newtab)', '                if (UrlUtilities.isNTPUrl(url)) {', '                    url = UrlConstants.NTP_URL;', '                }', '            }', '', '            getTabCreator(false).launchUrl(url, TabLaunchType.FROM_STARTUP);', '        }', '', ""        // If we didn't call setInitialOverviewState() in onStartWithNative() because"", '        // mPendingInitialTabCreation was true then do so now.', '        if (hasStartWithNativeBeenCalled()) {', '            setInitialOverviewState();', '        }', '', '        mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '    }', '', '    @Override', '    public void onAccessibilityModeChanged(boolean enabled) {', '        onAccessibilityTabSwitcherModeChanged();', '    }', '', '    private void onAccessibilityTabSwitcherModeChanged() {', '        if (!mUIWithNativeInitialized) return;', '', '        boolean accessibilityTabSwitcherEnabled =', '                DeviceClassManager.enableAccessibilityLayout(this);', '        if (mOverviewModeController != null && mOverviewModeController.overviewVisible()', '                && (mIsAccessibilityTabSwitcherEnabled == null', '                        || mIsAccessibilityTabSwitcherEnabled', '                                != DeviceClassManager.enableAccessibilityLayout(this))) {', '            /**', '             * If Start surface homepage is showing and launching NTP will show the Start surface', '             * again, skips the calls of hideOverview() and launchNTP(). We need to check', '             * {@link ReturnToChromeExperimentsUtil#shouldShowStartSurfaceHomeAsNTP(Context,', '             * boolean, boolean)} to see whether Start surface can be shown when accessibility is', '             * enabled.', '             */', '            if (mStartSurfaceSupplier.get() == null', '                    || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                            != StartSurfaceState.SHOWN_HOMEPAGE', '                    || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                            this, getCurrentTabModel().isIncognito(), isTablet())) {', '                mOverviewModeController.hideOverview(true);', '                if (getTabModelSelector().getCurrentModel().getCount() == 0) {', '                    getCurrentTabCreator().launchNTP();', '                }', '            }', '        }', '        mIsAccessibilityTabSwitcherEnabled = accessibilityTabSwitcherEnabled;', '', '        if (ChromeAccessibilityUtil.get().isAccessibilityEnabled()) {', '            RecordHistogram.recordBooleanHistogram(', '                    ""Accessibility.Android.TabSwitcherPreferenceEnabled"",', '                    mIsAccessibilityTabSwitcherEnabled);', '        }', '    }', '', '    /**', '     * Internal class which performs the intent handling operations delegated by IntentHandler.', '     */', '    private class InternalIntentDelegate implements IntentHandler.IntentHandlerDelegate {', '        /**', '         * Processes a url view intent.', '         *', '         * @param url The url from the intent.', '         */', '        @Override', '        public void processUrlViewIntent(LoadUrlParams loadUrlParams, @TabOpenType int tabOpenType,', '                String externalAppId, int tabIdToBringToFront, Intent intent) {', '            if (isActivityFinishingOrDestroyed()) {', '                return;', '            }', '            if (isFromChrome(intent, externalAppId)) {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromChrome"");', '            } else {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromApp"");', '            }', '', '            final String url = loadUrlParams.getUrl();', '            boolean fromLauncherShortcut = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false);', '            boolean fromAppWidget = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false);', '            boolean focus = false;', '', '            TabModel tabModel = getCurrentTabModel();', '            switch (tabOpenType) {', '                case TabOpenType.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:', '                    mTabModelOrchestrator.tryToRestoreTabStateForUrl(url);', '                    int tabToBeClobberedIndex = TabModelUtils.getTabIndexByUrl(tabModel, url);', '                    Tab tabToBeClobbered = tabModel.getTabAt(tabToBeClobberedIndex);', '                    if (tabToBeClobbered != null) {', '                        TabModelUtils.setIndex(tabModel, tabToBeClobberedIndex);', '                        tabToBeClobbered.reload();', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    int shortcutSource = intent.getIntExtra(', '                            WebappConstants.EXTRA_SOURCE, ShortcutSource.UNKNOWN);', '                    LaunchMetrics.recordHomeScreenLaunchIntoTab(url, shortcutSource);', '                    if (fromAppWidget && url.startsWith(UrlConstants.CHROME_DINO_URL)) {', '                        RecordUserAction.record(""QuickActionSearchWidget.StartDinoGame"");', '                    }', '                    break;', '                case TabOpenType.BRING_TAB_TO_FRONT:', '                    mTabModelOrchestrator.tryToRestoreTabStateForId(tabIdToBringToFront);', '', '                    int tabIndex = TabModelUtils.getTabIndexById(tabModel, tabIdToBringToFront);', '                    if (tabIndex == TabModel.INVALID_TAB_INDEX) {', '                        TabModel otherModel =', '                                getTabModelSelector().getModel(!tabModel.isIncognito());', '                        tabIndex = TabModelUtils.getTabIndexById(otherModel, tabIdToBringToFront);', '                        if (tabIndex != TabModel.INVALID_TAB_INDEX) {', '                            getTabModelSelector().selectModel(otherModel.isIncognito());', '                            TabModelUtils.setIndex(otherModel, tabIndex);', '                        } else {', '                            Log.e(TAG, ""Failed to bring tab to front because it doesn\'t exist."");', '                            return;', '                        }', '                    } else {', '                        TabModelUtils.setIndex(tabModel, tabIndex);', '                    }', '                    break;', '                case TabOpenType.CLOBBER_CURRENT_TAB:', '                    // The browser triggered the intent. This happens when clicking links which', '                    // can be handled by other applications (e.g. www.youtube.com links).', '                    Tab currentTab = getActivityTab();', '                    if (currentTab != null) {', '                        RedirectHandlerTabHelper.updateIntentInTab(currentTab, intent);', '                        currentTab.loadUrl(loadUrlParams);', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    break;', '                case TabOpenType.REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:', '                    launchIntent(loadUrlParams, externalAppId, false, intent);', '                    break;', '                case TabOpenType.REUSE_TAB_MATCHING_ID_ELSE_NEW_TAB:', '                    int tabId = IntentUtils.safeGetIntExtra(', '                            intent, TabOpenType.REUSE_TAB_MATCHING_ID_STRING, Tab.INVALID_TAB_ID);', '                    if (tabId != Tab.INVALID_TAB_ID) {', '                        mTabModelOrchestrator.tryToRestoreTabStateForId(tabId);', '                        int matchingTabIndex = TabModelUtils.getTabIndexById(tabModel, tabId);', '                        boolean loaded = false;', '                        if (matchingTabIndex != TabModel.INVALID_TAB_INDEX) {', '                            Tab tab = tabModel.getTabAt(matchingTabIndex);', '                            if (tab.getUrl().getSpec().equals(url)', '                                    || tab.getUrl().getSpec().equals(IntentUtils.safeGetStringExtra(', '                                            intent, TabOpenType.REUSE_TAB_ORIGINAL_URL_STRING))) {', '                                tabModel.setIndex(matchingTabIndex, TabSelectionType.FROM_USER);', '                                tab.loadUrl(loadUrlParams);', '                                loaded = true;', '                            }', '                        }', '                        if (!loaded) {', '                            launchIntent(loadUrlParams, externalAppId, false, intent);', '                        }', '                    }', '                    break;', '                case TabOpenType.OPEN_NEW_TAB:', '                    if (fromLauncherShortcut) {', '                        recordLauncherShortcutAction(false);', '                        reportNewTabShortcutUsed(false);', '                    }', '', '                    launchIntent(loadUrlParams, externalAppId, true, intent);', '                    break;', '                case TabOpenType.OPEN_NEW_INCOGNITO_TAB:', '                    if (!TextUtils.equals(externalAppId, getPackageName())) {', '                        assert false : ""Only Chrome is allowed to open incognito tabs"";', '                        Log.e(TAG, ""Only Chrome is allowed to open incognito tabs"");', '                        return;', '                    }', '', '                    if (!IncognitoUtils.isIncognitoModeEnabled()) {', '                        // The incognito launcher shortcut is manipulated in #onDeferredStartup(),', ""                        // so it's possible for a user to invoke the shortcut before it's disabled."", '                        // Quick actions search widget is installed on the home screen and may', '                        // need to be updated before the incognito button is removed.', '                        // Opening an incognito tab while incognito mode is disabled from somewhere', '                        // besides the launcher shortcut of from quick action search widget is an', '                        // error.', '                        if (fromAppWidget || fromLauncherShortcut) {', '                            // We are using the message introduced for quick action search widget', '                            // for both the widget and the launcher shortcut here.', '                            Toast.makeText(ChromeTabbedActivity.this,', '                                         R.string.quick_action_search_widget_message_no_incognito,', '                                         Toast.LENGTH_LONG)', '                                    .show();', '                        } else {', '                            assert false : ""Tried to open incognito tab while incognito disabled"";', '                            Log.e(TAG, ""Tried to open incognito tab while incognito disabled"");', '                        }', '', '                        return;', '                    }', '', '                    if (url == null || url.equals(UrlConstants.NTP_URL)) {', '                        if (fromLauncherShortcut) {', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);', '                            recordLauncherShortcutAction(true);', '                            reportNewTabShortcutUsed(true);', '                        } else if (fromAppWidget) {', '                            RecordUserAction.record(""QuickActionSearchWidget.StartIncognito"");', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);', '                        } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);', '                            if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {', '                                // Since the Tab is created in the foreground, its View will gain', '                                // focus, and since the Tab and the URL bar are not yet in the same', ""                                // View hierarchy, setting the URL bar's focus here won't clear the"", ""                                // Tab's focus. When the Tab is added to the hierarchy, we want the"", ""                                // URL bar to retain focus, so we clear the Tab's focus here."", '                                tab.getView().clearFocus();', '                                focus = true;', '                            }', '', '                            IncognitoTabLauncher.recordUse();', '                        } else {', '                            // Used by the Account management screen to open a new incognito tab.', '                            // Account management screen collects its metrics separately.', '                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);', '                        }', '                    } else {', '                        @TabLaunchType', '                        Integer launchType = IntentHandler.getTabLaunchType(intent);', '                        if (launchType == null) launchType = TabLaunchType.FROM_LINK;', '                        getTabCreator(true).launchUrl(', '                                url, launchType, intent, mIntentHandlingTimeMs);', '                    }', '                    break;', '                default:', '                    assert false : ""Unknown TabOpenType: "" + tabOpenType;', '                    break;', '            }', '', '            getToolbarManager().setUrlBarFocusOnceNativeInitialized(focus,', '                    focus ? OmniboxFocusReason.LAUNCH_NEW_INCOGNITO_TAB', '                          : OmniboxFocusReason.UNFOCUS);', '', '            if (tabModel.getCount() > 0 && isInOverviewMode() && !isTablet()', '                    && !shouldShowOverviewPageOnStart()) {', '                mOverviewModeController.hideOverview(true);', '            }', '        }', '', '        @Override', '        public long getIntentHandlingTimeMs() {', '            return mIntentHandlingTimeMs;', '        }', '', '        @Override', '        public void processWebSearchIntent(String query) {', '            assert false;', '        }', '', '        @Override', '        public void processTranslateTabIntent(', '                @Nullable String targetLanguageCode, @Nullable String expectedUrl) {', '            TranslateIntentHandler.translateTab(getActivityTab(), targetLanguageCode, expectedUrl);', '        }', '', '        private boolean isFromChrome(Intent intent, String externalAppId) {', '            // To determine if the processed intent is from Chrome, check for any of the following:', '            // 1.) The authentication token that will be added to trusted intents.', '            // 2.) The app ID matches Chrome.  This value can be spoofed by other applications, but', '            //     in cases where we were not able to add the authentication token this is our only', '            //     indication the intent was from Chrome.', '            return IntentHandler.wasIntentSenderChrome(intent)', '                    || TextUtils.equals(externalAppId, getPackageName());', '        }', '    }', '', '    @Override', '    public void performPreInflationStartup() {', '        // Create JankTracker before invoking super, because the parent class will invoke', '        // createRootUiCoordinator(...), which in our case requires the JankTracker to already have', '        // been created.', '        mJankTracker = new JankTrackerImpl(this);', '', '        super.performPreInflationStartup();', '', '        // Decide whether to record startup UMA histograms. This is done  early in the main', '        // Activity.onCreate() to avoid recording navigation delays when they require user input to', '        // proceed. For example, FRE (First Run Experience) happens before the activity is created,', '        // and triggers initialization of the native library.', '        //', '        // An uninitialized native library is an indication of an application start that is followed', '        // by navigation immediately without user input.', '        if (!LibraryLoader.getInstance().isInitialized()) {', '            setTrackColdStartupMetrics(true);', '        }', '', '        supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);', '', '        IncognitoTabHostRegistry.getInstance().register(mIncognitoTabHost);', '', '        mStartupPaintPreviewHelperSupplier.attach(getWindowAndroid().getUnownedUserDataHost());', '    }', '', '    @Override', '    protected RootUiCoordinator createRootUiCoordinator() {', '        return new TabbedRootUiCoordinator(this, this::onOmniboxFocusChanged,', '                getShareDelegateSupplier(), getActivityTabProvider(), mTabModelProfileSupplier,', '                mBookmarkBridgeSupplier, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), mStartSurfaceSupplier,', '                mIntentMetadataOneshotSupplier, mLayoutStateProviderOneshotSupplier,', '                mStartSurfaceParentTabSupplier, getBrowserControlsManager(), getWindowAndroid(),', '                mJankTracker, getLifecycleDispatcher(), getLayoutManagerSupplier(),', '                /* menuOrKeyboardActionController= */ this, this::getActivityThemeColor,', '                getModalDialogManagerSupplier(), /* appMenuBlocker= */ this, this::supportsAppMenu,', '                this::supportsFindInPage, getTabCreatorManagerSupplier(), getFullscreenManager(),', '                getCompositorViewHolderSupplier(), getTabContentManagerSupplier(),', '                getOverviewModeBehaviorSupplier(), this::getSnackbarManager, getActivityType(),', '                this::isInOverviewMode, this::isWarmOnResume,', '                /* appMenuDelegate= */ this, /* statusBarColorProvider= */ this,', '                mEphemeralTabCoordinatorSupplier, getIntentRequestTracker(),', '                getControlContainerHeightResource(), this::getInsetObserverView,', '                this::backShouldCloseTab);', '    }', '', '    @Override', '    protected int getControlContainerLayoutId() {', '        return R.layout.control_container;', '    }', '', '    @Override', '    public int getControlContainerHeightResource() {', '        return R.dimen.control_container_height;', '    }', '', '    @Override', '    protected int getToolbarLayoutId() {', '        return isTablet() ? R.layout.toolbar_tablet : R.layout.toolbar_phone;', '    }', '', '    @Override', '    protected int getToolbarShadowResource() {', '        final boolean themeRefactorEnabled =', '                CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID);', '        return themeRefactorEnabled ? R.drawable.toolbar_hairline', '                                    : R.drawable.modern_toolbar_shadow;', '    }', '', '    @Override', '    protected int getToolbarShadowLayoutHeight() {', '        final int res = CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID)', '                ? R.dimen.toolbar_hairline_height', '                : R.dimen.toolbar_shadow_height;', '        return getResources().getDimensionPixelSize(res);', '    }', '', '    @Override', '    public void performPostInflationStartup() {', '        super.performPostInflationStartup();', '', '        FontPreloader.getInstance().onPostInflationStartupTabbedActivity();', '', '        TabModelSelector tabModelSelector = getTabModelSelector();', '        IncognitoProfileDestroyer.observeTabModelSelector(tabModelSelector);', '        IncognitoNotificationPresenceController.observeTabModelSelector(tabModelSelector);', '', '        // Critical path for startup. Create the minimum objects needed', '        // to allow a blank screen draw (without depending on any native code)', '        // and then yield ASAP.', '        if (isFinishing()) return;', '', ""        // Don't show the keyboard until user clicks in."", '        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN', '                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);', '', '        mContentContainer = (ViewGroup) findViewById(android.R.id.content);', '        mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);', '', '        Supplier<Boolean> dialogVisibilitySupplier = null;', '        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {', '            dialogVisibilitySupplier = () -> {', '                assert mStartSurfaceSupplier.get() != null;', '                assert getToolbarManager().getTabGroupUi() != null;', '                // Return true if dialog from either tab switcher or tab strip is visible.', '', '                ToolbarManager toolbarManager = getToolbarManager();', '                TabGroupUi tabGroupUi = toolbarManager.getTabGroupUi();', '                boolean isDialogVisible = tabGroupUi.isTabGridDialogVisible();', '', '                Supplier<Boolean> tabSwitcherDialogVisibilitySupplier =', '                        mStartSurfaceSupplier.get().getTabGridDialogVisibilitySupplier();', '', '                if (tabSwitcherDialogVisibilitySupplier != null) {', '                    isDialogVisible = isDialogVisible || tabSwitcherDialogVisibilitySupplier.get();', '                }', '                return isDialogVisible;', '            };', '        }', '', '        mUndoBarPopupController = new UndoBarController(this, mTabModelSelector,', '                this::getSnackbarManager, mOverviewModeBehaviorSupplier, dialogVisibilitySupplier);', '', '        mInactivityTracker = new ChromeInactivityTracker(', '                ChromePreferenceKeys.TABBED_ACTIVITY_LAST_BACKGROUNDED_TIME_MS_PREF);', '', '        assert getActivityTabStartupMetricsTracker() != null;', '        if (StartupPaintPreviewHelper.isEnabled()) {', '            StartupPaintPreviewHelper paintPreviewHelper = new StartupPaintPreviewHelper(', '                    getWindowAndroid(), getOnCreateTimestampMs(), getBrowserControlsManager(),', '                    getTabModelSelector(), shouldShowOverviewPageOnStart(), () -> {', '                        return getToolbarManager() == null', '                                ? null', '                                : getToolbarManager().getProgressBarCoordinator();', '                    });', '            mStartupPaintPreviewHelperSupplier.set(paintPreviewHelper);', '            getActivityTabStartupMetricsTracker().registerPaintPreviewObserver(paintPreviewHelper);', '        }', '    }', '', '    private boolean shouldIgnoreIntent() {', '        if (mShouldIgnoreIntent == null) {', '            // We call this only once because mIntentHandler#shouldIgnoreIntent has side effects.', '            mShouldIgnoreIntent =', '                    mIntentHandler.shouldIgnoreIntent(getIntent(), /*startedActivity=*/true);', '        }', '        return mShouldIgnoreIntent;', '    }', '', '    @Override', '    protected final void dispatchOnInflationComplete() {', '        super.dispatchOnInflationComplete();', '', '        // When the feature flag {@link ChromeFeatureList.INSTANT_START} turns on phones (not', '        // tablet), a view-only start page created on Java will be shown before native is', '        // initialized. The {@link prepareToShowStartPagePreNative()} is only called in a cold', '        // start.', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                && TabUiFeatureUtilities.supportInstantStart(isTablet(), this) && !hadWarmStart()) {', '            prepareToShowStartPagePreNative();', '        }', '    }', '', '    /**', '     * Prepares to show the start page before native is initialized. For example, create', '     * an LayoutManagerChrome object, add overview mode observer and so on.', '     */', '    private void prepareToShowStartPagePreNative() {', '        assert TabUiFeatureUtilities.supportInstantStart(isTablet() && !hadWarmStart(), this);', '        try (TraceEvent e =', '                        TraceEvent.scoped(""ChromeTabbedActivity.prepareToShowStartPagePreNative"")) {', '            setupCompositorContentPreNativeForPhone();', '            getCompositorViewHolderSupplier().get().setLayoutManager(mLayoutManager);', '', '            if (shouldShowOverviewPageOnStart()) {', '                mLayoutManager.setTabModelSelector(mTabModelSelector);', '                mIsAccessibilityTabSwitcherEnabled =', '                        DeviceClassManager.enableAccessibilityLayout(this);', '                assert !mHasDeterminedOverviewStateForCurrentSession;', '                setInitialOverviewState();', '            }', '        }', '    }', '', '    @Override', '    protected TabModelOrchestrator createTabModelOrchestrator() {', '        boolean tabMergingEnabled =', '                mMultiInstanceManager != null && mMultiInstanceManager.isTabModelMergingEnabled();', '        mTabModelOrchestrator = new TabbedModeTabModelOrchestrator(tabMergingEnabled);', '        return mTabModelOrchestrator;', '    }', '', '    @Override', '    protected void createTabModels() {', '        assert mTabModelSelector == null;', '        assert mWindowId != INVALID_WINDOW_ID;', '', '        Bundle savedInstanceState = getSavedInstanceState();', '', '        // We determine the model as soon as possible so every systems get initialized coherently.', '        boolean startIncognito = savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false);', '', '        mNextTabPolicySupplier = new ChromeNextTabPolicySupplier(mOverviewModeBehaviorSupplier);', '', '        boolean tabModelWasCreated = mTabModelOrchestrator.createTabModels(', '                this, this, mNextTabPolicySupplier, mWindowId);', '        if (!tabModelWasCreated) {', '            finish();', '            return;', '        }', '', '        if (mMultiInstanceManager != null) {', '            int assignedIndex = TabWindowManagerSingleton.getInstance().getIndexForWindow(this);', '            // The given index and the one computed by TabWindowManager should be one and the same.', '            assert !MultiWindowUtils.isMultiInstanceApi31Enabled() || assignedIndex == mWindowId;', '            mMultiInstanceManager.initialize(assignedIndex, getTaskId());', '        }', '', '        mTabModelSelector = mTabModelOrchestrator.getTabModelSelector();', '        mTabModelSelector.addObserver(new TabModelSelectorObserver() {', '            @Override', '            public void onTabStateInitialized() {', '                if (!mCreatedTabOnStartup) return;', '', '                TabModel model = mTabModelSelector.getModel(false);', '                TasksUma.recordTasksUma(model);', '            }', '        });', '', '        mTabModelSelectorTabObserver = new TabModelSelectorTabObserver(mTabModelSelector) {', '            @Override', '            public void onDidFinishNavigation(Tab tab, NavigationHandle navigation) {', '                if (!navigation.hasCommitted() || !navigation.isInPrimaryMainFrame()) {', '                    return;', '                }', '                DataReductionPromoInfoBar.maybeLaunchPromoInfoBar(ChromeTabbedActivity.this,', '                        tab.getWebContents(), navigation.getUrl(), tab.isShowingErrorPage(),', '                        navigation.isFragmentNavigation(), navigation.httpStatusCode());', '                if (SyncErrorPromptUtils.isMessageUiEnabled()) {', '                    SyncErrorMessage.maybeShowMessageUi(', '                            getWindowAndroid(), ChromeTabbedActivity.this);', '                } else {', '                    SyncErrorInfoBar.maybeLaunchSyncErrorInfoBar(tab.getWebContents());', '                }', '                SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());', '            }', '        };', '        mAppIndexingUtil = new AppIndexingUtil(mTabModelSelector);', '', '        if (startIncognito) mTabModelSelector.selectModel(true);', '    }', '', '    @Override', '    protected LaunchCauseMetrics createLaunchCauseMetrics() {', '        return new TabbedActivityLaunchCauseMetrics(this);', '    }', '', '    @Override', '    public AppMenuPropertiesDelegate createAppMenuPropertiesDelegate() {', '        return new TabbedAppMenuPropertiesDelegate(this, getActivityTabProvider(),', '                getMultiWindowModeStateDispatcher(), getTabModelSelector(), getToolbarManager(),', '                getWindow().getDecorView(), this, mOverviewModeBehaviorSupplier,', '                ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                        ? mStartSurfaceSupplier', '                        : null,', '                mBookmarkBridgeSupplier,', '                ()', '                        -> getTabCreator(/*incognito=*/false)', '                                   .launchUrl(NewTabPageUtils.encodeNtpUrl(', '                                                      NewTabPageLaunchOrigin.WEB_FEED),', '                                           TabLaunchType.FROM_CHROME_UI),', '                getModalDialogManager(), getSnackbarManager());', '    }', '', '    private TabDelegateFactory getTabDelegateFactory() {', '        if (mTabDelegateFactory == null) {', '            mTabDelegateFactory = new TabbedModeTabDelegateFactory(this,', '                    getAppBrowserControlsVisibilityDelegate(), getShareDelegateSupplier(),', '                    mEphemeralTabCoordinatorSupplier,', '                    ((TabbedRootUiCoordinator) mRootUiCoordinator)::onContextMenuCopyLink,', '                    mRootUiCoordinator.getBottomSheetController(),', '                    /* ChromeActivityNativeDelegate */ this, /* isCustomTab= */ false,', '                    getBrowserControlsManager(), getFullscreenManager(),', '                    /* TabCreatorManager */ this, getTabModelSelectorSupplier(),', '                    getCompositorViewHolderSupplier(), getModalDialogManagerSupplier(),', '                    this::getSnackbarManager, getBrowserControlsManager(), getActivityTabProvider(),', '                    getLifecycleDispatcher(), getWindowAndroid(), this::getLastUserInteractionTime,', '                    this::hadWarmStart, mJankTracker, getToolbarManager()::getToolbar);', '        }', '        return mTabDelegateFactory;', '    }', '', '    @Override', '    protected Pair<ChromeTabCreator, ChromeTabCreator> createTabCreators() {', '        ChromeTabCreator.OverviewNTPCreator overviewNTPCreator = null;', '', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '            overviewNTPCreator = new ChromeTabCreator.OverviewNTPCreator() {', '                @Override', '                public boolean handleCreateNTPIfNeeded(boolean isNTP, boolean incognito,', '                        Tab parentTab, @NewTabPageLaunchOrigin int launchOrigin) {', '                    boolean shouldShowStart =', '                            showStartSurfaceHomeForNTP(isNTP, incognito, parentTab, launchOrigin);', '                    if (shouldShowStart) {', '                        mStartSurfaceParentTabSupplier.set(parentTab);', '                    }', '                    return shouldShowStart;', '                }', '', '                @Override', '                public void preTabInitialization(Tab tab, String url) {', '                    StartSurfaceConfiguration.maySetUserDataForEmptyTab(tab, url);', '                }', '            };', '        }', '        return Pair.create(', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, false, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()),', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, true, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()));', '    }', '', '    @Override', '    protected void initDeferredStartupForActivity() {', '        super.initDeferredStartupForActivity();', '        DeferredStartupHandler.getInstance().addDeferredTask(() -> {', '            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);', '            RecordHistogram.recordSparseHistogram(', '                    ""MemoryAndroid.DeviceMemoryClass"", am.getMemoryClass());', '', '            LauncherShortcutActivity.updateIncognitoShortcut(ChromeTabbedActivity.this);', '', '            ChromeSurveyController.initialize(mTabModelSelector, getLifecycleDispatcher(),', '                    ChromeTabbedActivity.this, MessageDispatcherProvider.from(getWindowAndroid()));', '', '            if (mStartSurfaceSupplier.get() != null) {', '                mStartSurfaceSupplier.get().onOverviewShownAtLaunch(', '                        mOverviewShownOnStart, getOnCreateTimestampMs());', '            }', '        });', '    }', '', '    @Override', '    protected void recordIntentToCreationTime(long timeMs) {', '        super.recordIntentToCreationTime(timeMs);', '        RecordHistogram.recordCustomTimesHistogram(""MobileStartup.IntentToCreationTime.TabbedMode"",', '                timeMs, 1, DateUtils.SECOND_IN_MILLIS * 30, 50);', '    }', '', '    @Override', '    protected boolean isStartedUpCorrectly(Intent intent) {', '        mWindowId = 0;', '        Bundle savedInstanceState = getSavedInstanceState();', '        int windowId = getExtraWindowIdFromIntent(intent);', '        if (savedInstanceState != null && savedInstanceState.containsKey(WINDOW_INDEX)) {', '            // Activity is recreated after destruction. |windowId| must not be valid in this case.', '            assert windowId == INVALID_WINDOW_ID;', '            mWindowId = savedInstanceState.getInt(WINDOW_INDEX, 0);', '        } else if (mMultiInstanceManager != null) {', ""            // |allocInstanceId| doesn't do any disk I/O that would add a long-running task"", '            // to pre-inflation startup.', '            boolean preferNew = getExtraPreferNewFromIntent(intent);', '            mWindowId = mMultiInstanceManager.allocInstanceId(windowId, getTaskId(), preferNew);', '        }', '        if (mWindowId == INVALID_WINDOW_ID) {', '            Log.i(TAG, ""Window ID not allocated. Finishing the activity"");', '            Toast.makeText(this, R.string.max_number_of_windows, Toast.LENGTH_LONG).show();', '            return false;', '        }', '', '        if (mMultiInstanceManager != null', '                && !mMultiInstanceManager.isStartedUpCorrectly(getTaskId())) {', '            return false;', '        }', '', '        return super.isStartedUpCorrectly(intent);', '    }', '', '    private static int getExtraWindowIdFromIntent(Intent intent) {', '        int windowId = IntentUtils.safeGetIntExtra(', '                intent, IntentHandler.EXTRA_WINDOW_ID, INVALID_WINDOW_ID);', '        return IntentUtils.isTrustedIntentFromSelf(intent) ? windowId : INVALID_WINDOW_ID;', '    }', '', '    private static boolean getExtraPreferNewFromIntent(Intent intent) {', '        return IntentUtils.safeGetBooleanExtra(intent, IntentHandler.EXTRA_PREFER_NEW, false);', '    }', '', '    @Override', '    public void terminateIncognitoSession() {', '        getTabModelSelector().getModel(true).closeAllTabs();', '    }', '', '    @Override', '    public boolean onMenuOrKeyboardAction(final int id, boolean fromMenu) {', '        final Tab currentTab = getActivityTab();', '        boolean currentTabIsNtp = isTabNtp(currentTab);', '        if (id == R.id.new_tab_menu_id) {', '            getTabModelSelector().getModel(false).commitAllTabClosures();', '            RecordUserAction.record(""MobileMenuNewTab"");', '            RecordUserAction.record(""MobileNewTabOpened"");', '            ReturnToChromeExperimentsUtil.onNewTabOpened();', '            reportNewTabShortcutUsed(false);', '            if (fromMenu) RecordUserAction.record(""MobileMenuNewTab.AppMenu"");', '', '            getTabCreator(false).launchNTP();', '', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '        } else if (id == R.id.new_incognito_tab_menu_id) {', '            if (IncognitoUtils.isIncognitoModeEnabled()) {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This action must be recorded before opening the incognito tab since UMA actions', '                // are dropped when an incognito tab is open.', '                RecordUserAction.record(""MobileMenuNewIncognitoTab"");', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '                reportNewTabShortcutUsed(true);', '                if (fromMenu) RecordUserAction.record(""MobileMenuNewIncognitoTab.AppMenu"");', '                getTabCreator(true).launchNTP();', '            }', '        } else if (id == R.id.all_bookmarks_menu_id) {', ""            // Note that 'currentTab' could be null in overview mode when start surface is"", '            // enabled.', '            getCompositorViewHolderSupplier().get().hideKeyboard(() -> {', '                BookmarkUtils.showBookmarkManager(', '                        ChromeTabbedActivity.this, getCurrentTabModel().isIncognito());', '            });', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_BOOKMARKS_MANAGER);', '            }', '', '            @BrowserProfileType', '            int type = getCurrentTabModel().isIncognito() ? BrowserProfileType.INCOGNITO', '                                                          : BrowserProfileType.REGULAR;', '            RecordHistogram.recordEnumeratedHistogram(', '                    ""Bookmarks.OpenBookmarkManager.PerProfileType"", type,', '                    BrowserProfileType.MAX_VALUE + 1);', '', '            RecordUserAction.record(""MobileMenuAllBookmarks"");', '        } else if (id == R.id.recent_tabs_menu_id) {', '            LoadUrlParams params =', '                    new LoadUrlParams(UrlConstants.RECENT_TABS_URL, PageTransition.AUTO_BOOKMARK);', '            boolean isInOverviewMode = isInOverviewMode();', '            if (isInOverviewMode && !isTablet()', '                    && ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                // When tapping the ""Recent tabs"" menu item from the overview page (Start surface or', '                // GTS), we will create the tab with the launch type FROM_START_SURFACE. Thus, if', '                // the back button is tapped on this ""Recent tabs"" page, it can go back to the', '                // overview page.', '                ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurface(', '                        params, getCurrentTabModel().isIncognito(), null);', '            } else if (currentTab != null) {', '                currentTab.loadUrl(params);', '            } else {', '                getTabCreator(getCurrentTabModel().isIncognito())', '                        .createNewTab(params, TabLaunchType.FROM_CHROME_UI, null);', '            }', '            if (isInOverviewMode) {', '                mOverviewModeController.hideOverview(true);', '            }', '', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_RECENT_TABS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuRecentTabs"");', '            ReturnToChromeExperimentsUtil.onRecentTabsOpened();', '        } else if (id == R.id.close_tab) {', '            getCurrentTabModel().closeTab(currentTab, true, false, true);', '            RecordUserAction.record(""MobileTabClosed"");', '        } else if (id == R.id.close_all_tabs_menu_id) {', '            // Close both incognito and normal tabs', '            getTabModelSelector().closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllTabs"");', '        } else if (id == R.id.close_all_incognito_tabs_menu_id) {', '            // Close only incognito tabs', '            getTabModelSelector().getModel(true).closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllIncognitoTabs"");', '        } else if (id == R.id.focus_url_bar) {', '            boolean isUrlBarVisible = !mOverviewModeController.overviewVisible()', '                    && (!isTablet() || getCurrentTabModel().getCount() != 0);', '            if (isUrlBarVisible) {', '                getToolbarManager().setUrlBarFocus(', '                        true, OmniboxFocusReason.MENU_OR_KEYBOARD_ACTION);', '            }', '        } else if (id == R.id.downloads_menu_id) {', '            OTRProfileID otrProfileID = null;', '            if (currentTab != null && currentTab.getWebContents() != null) {', '                Profile profile = Profile.fromWebContents(currentTab.getWebContents());', '                otrProfileID = profile != null ? profile.getOTRProfileID() : null;', '            }', '            DownloadUtils.showDownloadManager(', '                    this, currentTab, otrProfileID, DownloadOpenSource.MENU);', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_DOWNLOADS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuDownloadManager"");', '        } else if (id == R.id.open_recently_closed_tab) {', '            TabModel currentModel = mTabModelSelector.getCurrentModel();', '            if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedTab();', '            RecordUserAction.record(""MobileTabClosedUndoShortCut"");', '        } else if (id == R.id.enter_vr_id) {', '            VrModuleProvider.getDelegate().enterVrIfNecessary();', '        } else {', '            return super.onMenuOrKeyboardAction(id, fromMenu);', '        }', '        return true;', '    }', '', '    private boolean isTabNtp(Tab tab) {', '        return tab != null && UrlUtilities.isNTPUrl(tab.getUrl());', '    }', '', '    private boolean isTabRegularNtp(Tab tab) {', '        return isTabNtp(tab) && !tab.isIncognito();', '    }', '', '    private void onOmniboxFocusChanged(boolean hasFocus) {', '        mTabModalHandler.onOmniboxFocusChanged(hasFocus);', '    }', '', '    private void recordLauncherShortcutAction(boolean isIncognito) {', '        if (isIncognito) {', '            RecordUserAction.record(""Android.LauncherShortcut.NewIncognitoTab"");', '        } else {', '            RecordUserAction.record(""Android.LauncherShortcut.NewTab"");', '        }', '    }', '', '    @Override', '    public boolean handleBackPressed() {', '        if (!mUIWithNativeInitialized) return false;', '', '        if (getManualFillingComponent().handleBackPress()) return true;', '', '        if (exitFullscreenIfShowing()) {', '            return true;', '        }', '', '        // TODO(1091411): Find a better mechanism for back-press handling for features.', '        if (mRootUiCoordinator.getBottomSheetController().handleBackPress()) return true;', '', '        if (mTabModalHandler.handleBackPress()) return true;', '', '        final Tab currentTab = getActivityTab();', '        if (currentTab == null) {', '            moveTaskToBack(true);', '            return true;', '        }', '', '        // If we are in the tab switcher mode (not in the Start surface homepage) and not a tablet,', '        // then leave tab switcher mode on back.', '        if (mOverviewModeController.overviewVisible() && !isTablet()', '                && (mStartSurfaceSupplier.get() == null', '                        || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                                == StartSurfaceState.SHOWN_TABSWITCHER)) {', '            mOverviewModeController.hideOverview(true);', '            return true;', '        }', '', '        final WebContents webContents = currentTab.getWebContents();', '        if (webContents != null) {', '            RenderFrameHost focusedFrame = webContents.getFocusedFrame();', '            if (focusedFrame != null && focusedFrame.signalCloseWatcherIfActive()) return true;', '        }', '', '        if (getToolbarManager().back()) return true;', '', '        // If the current tab url is HELP_URL, then the back button should close the tab to', '        // get back to the previous state. The reason for startsWith check is that the', '        // actual redirected URL is a different system language based help url.', '        final @TabLaunchType int type = currentTab.getLaunchType();', '        final boolean helpUrl = currentTab.getUrl().getSpec().startsWith(HELP_URL_PREFIX);', '        if (type == TabLaunchType.FROM_CHROME_UI && helpUrl) {', '            getCurrentTabModel().closeTab(currentTab);', '            return true;', '        }', '', ""        // If we aren't in the overview mode, we handle the Tab with launchType"", '        // TabLaunchType.FROM_START_SURFACE or has ""OpenedFromStart"" property.', '        if (!mOverviewModeController.overviewVisible()', '                && (type == TabLaunchType.FROM_START_SURFACE', '                        || StartSurfaceUserData.isOpenedFromStart(currentTab))) {', '            if (StartSurfaceUserData.getKeepTab(currentTab)', '                    || StartSurfaceUserData.isOpenedFromStart(currentTab)) {', '                // If the current tab is created from the start surface with the keepTab property,', '                // shows the Start surface Homepage to prevent a loop between the current tab and', '                // previous overview mode. Once in the Start surface, it will close Chrome if back', '                // button is tapped again.', '                showOverview(StartSurfaceState.SHOWING_HOMEPAGE);']}, {'a': ['                if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                        && !StartSurfaceUserData.getKeepTab(currentTab)) {'], 'b': ['                if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND) {']}, {'ab': ['                    getCurrentTabModel().closeTab(currentTab);', '                }', '            } else {', '                // Otherwise, clicking the back button should close the tab and go back to the', '                // previous overview mode.', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS);', '                if (!currentTab.isClosing()) {', '                    getCurrentTabModel().closeTab(currentTab);', '                }', '            }', '            return true;', '        }', '', '        final boolean shouldCloseTab = backShouldCloseTab(currentTab);', '', '        // Minimize the app if either:', '        // - we decided not to close the tab', '        // - we decided to close the tab, but it was opened by an external app, so we will go', '        //   exit Chrome on top of closing the tab', '        final boolean minimizeApp =', '                !shouldCloseTab || TabAssociatedApp.isOpenedFromExternalApp(currentTab);', '        if (minimizeApp) {', '            if (shouldCloseTab) {', '                sendToBackground(currentTab);', '                return true;', '            } else {', '                sendToBackground(null);', '                return true;', '            }', '        } else if (shouldCloseTab) {', '            currentTab.getWebContents().dispatchBeforeUnload(false);', '            return true;', '        }', '', '        assert false : ""The back button should have already been handled by this point"";', '        return false;', '    }', '', '    /**', '     * [true]: Reached the bottom of the back stack on a tab the user did not explicitly', '     * create (i.e. it was created by an external app or opening a link in background, etc).', '     * [false]: Reached the bottom of the back stack on a tab that the user explicitly', '     * created (e.g. selecting ""new tab"" from menu).', '     *', '     * @return Whether pressing the back button on the provided Tab should close the Tab.', '     */', '    @Override', '    public boolean backShouldCloseTab(Tab tab) {', '        if (!tab.isInitialized()) {', '            return false;', '        }', '        @TabLaunchType', '        int type = tab.getLaunchType();', '', '        return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_EXTERNAL_APP', '                || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND', '                || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                || (type == TabLaunchType.FROM_RESTORE', '                        && CriticalPersistedTabData.from(tab).getParentId() != Tab.INVALID_TAB_ID);', '    }', '', '    /**', '     * Sends this Activity to the background.', '     *', '     * @param tabToClose Tab that will be closed once the app is not visible.', '     */', '    private void sendToBackground(@Nullable final Tab tabToClose) {', '        Log.i(TAG, ""sendToBackground(): "" + tabToClose);', '        moveTaskToBack(true);', '        if (tabToClose != null) {', ""            // In the case of closing a tab upon minimization, don't allow the close action to"", ""            // happen until after our app is minimized to make sure we don't get a brief glimpse of"", '            // the newly active tab before we exit Chrome.', '            //', ""            // If the runnable doesn't run before the Activity dies, Chrome won't crash but the tab"", ""            // won't be closed (crbug.com/587565)."", '            mHandler.postDelayed(() -> {', '                boolean hasNextTab =', '                        getCurrentTabModel().getNextTabIfClosed(tabToClose.getId()) != null;', '                getCurrentTabModel().closeTab(tabToClose, false, true, false);', '', '                // If there is no next tab to open, enter overview mode.', '                if (!hasNextTab) showOverview(StartSurfaceState.SHOWING_START);', '            }, CLOSE_TAB_ON_MINIMIZE_DELAY_MS);', '        }', '    }', '', '    @Override', '    public boolean moveTaskToBack(boolean nonRoot) {', '        try {', '            return super.moveTaskToBack(nonRoot);', '        } catch (NullPointerException e) {', '            // Work around framework bug described in https://crbug.com/817567.', '            finish();', '            return true;', '        }', '    }', '', '    /**', '     * Launch a URL from an intent.', '     *', '     * @param url           The url from the intent.', '     * @param referer       Optional referer URL to be used.', '     * @param headers       Optional headers to be sent when opening the URL.', '     * @param externalAppId External app id.', '     * @param forceNewTab   Whether to force the URL to be launched in a new tab or to fall', '     *                      back to the default behavior for making that determination.', '     * @param isRendererInitiated Whether the intent is originally from browser renderer process.', '     * @param initiatorOrigin Origin that initiates the intent.', '     * @param intent        The original intent.', '     */', '    private Tab launchIntent(', '            LoadUrlParams loadUrlParams, String externalAppId, boolean forceNewTab, Intent intent) {', '        if (mUIWithNativeInitialized && !UrlUtilities.isNTPUrl(loadUrlParams.getUrl())) {', '            mOverviewModeController.hideOverview(false);', '            getToolbarManager().finishAnimations();', '        }', '        if (IntentHandler.wasIntentSenderChrome(intent)) {', '            // If the intent was launched by chrome, open the new tab in the appropriate model.', '            boolean isIncognito = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB, false);', '            @TabLaunchType', '            Integer launchType = IntentHandler.getTabLaunchType(intent);', '            if (launchType == null) {', '                if (IntentUtils.safeGetBooleanExtra(', '                            intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false)) {', '                    launchType = TabLaunchType.FROM_LAUNCHER_SHORTCUT;', '                } else if (IntentUtils.safeGetBooleanExtra(', '                                   intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false)) {', '                    launchType = TabLaunchType.FROM_APP_WIDGET;', '                } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                    launchType = TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB;', '                } else {', '                    // Using FROM_LINK ensures the tab is parented to the current tab, which allows', '                    // the back button to close these tabs and restore selection to the previous', '                    // tab.', '                    launchType = TabLaunchType.FROM_LINK;', '                }', '            }', '            return getTabCreator(isIncognito).createNewTab(loadUrlParams, launchType, null, intent);', '        }', '', '        // Check if the tab is being created from a Reader Mode navigation.', '        if (ReaderModeManager.isEnabled() && ReaderModeManager.isReaderModeCreatedIntent(intent)) {', '            Bundle extras = intent.getExtras();', '            int readerParentId = IntentUtils.safeGetInt(', '                    extras, ReaderModeManager.EXTRA_READER_MODE_PARENT, Tab.INVALID_TAB_ID);', '            extras.remove(ReaderModeManager.EXTRA_READER_MODE_PARENT);', '            // Set the parent tab to the tab that Reader Mode started from.', '            if (readerParentId != Tab.INVALID_TAB_ID && mTabModelSelector != null) {', '                return getCurrentTabCreator().createNewTab(', '                        new LoadUrlParams(loadUrlParams.getUrl(), PageTransition.LINK),', '                        TabLaunchType.FROM_LINK, mTabModelSelector.getTabById(readerParentId));', '            }', '        }', '', '        return getTabCreator(false).launchUrlFromExternalApp(', '                loadUrlParams, externalAppId, forceNewTab, intent);', '    }', '', '    private void showOverview(@StartSurfaceState int state) {', '        showOverview(state, NewTabPageLaunchOrigin.UNKNOWN);', '    }', '', '    // TODO(crbug.com/1115757): After crrev.com/c/2315823, Overview state and Startsurface state are', '    // two different things, we actual can split this into two methods: showOverview() and', ""    // showStartSurface(state). Let's do some auditing and clean up before perform the actual split."", '    private void showOverview(', '            @StartSurfaceState int state, @NewTabPageLaunchOrigin int launchOrigin) {', '        assert (state == StartSurfaceState.SHOWING_TABSWITCHER', '                || state == StartSurfaceState.SHOWING_HOMEPAGE', '                || state == StartSurfaceState.SHOWING_PREVIOUS', '                || state == StartSurfaceState.SHOWING_START);', '        if (mIsAccessibilityTabSwitcherEnabled != null && mIsAccessibilityTabSwitcherEnabled', '                && mOverviewModeController != null) {', '            // TODO(1200727): This is a temporary fix that should be removed once grid tab switcher', '            //                is completely launched. The ""start surface"" is now created regardless', '            //                of the state of accessibility, so we check that mode first and try', '            //                showing the overview list before going to the start surface.', '            mOverviewModeController.showOverview(false);', '        } else if (mStartSurfaceSupplier.get() != null) {', '            if (ReturnToChromeExperimentsUtil.shouldHideStartSurfaceWithAccessibilityOn(this)', '                    || !HomepageManager.isHomepageEnabled()) {', '                state = StartSurfaceState.SHOWING_TABSWITCHER;', '            }', '            mStartSurfaceSupplier.get().getController().setOverviewState(state, launchOrigin);', '        }', '', '        if (mOverviewModeController == null) return;', '', '        if (mOverviewModeController.overviewVisible()) {', '            if (didFinishNativeInitialization()) {', '                getCompositorViewHolderSupplier().get().hideKeyboard(() -> {});', '            }', '            return;', '        }', '', '        Tab currentTab = getActivityTab();', ""        // If we don't have a current tab, show the overview mode."", '        if (currentTab == null) {', '            mOverviewModeController.showOverview(false);', '        } else {', '            getCompositorViewHolderSupplier().get().hideKeyboard(', '                    () -> mOverviewModeController.showOverview(true));', '            updateAccessibilityState(false);', '            TasksUma.recordTabLaunchType(getCurrentTabModel());', '        }', '    }', '', '    private void hideOverview() {', '        assert (mOverviewModeController.overviewVisible());', '        if (getCurrentTabModel().getCount() != 0) {', ""            // Don't hide overview if current tab stack is empty()"", '            mOverviewModeController.hideOverview(true);', '            updateAccessibilityState(true);', '        }', '    }', '', '    /**', '     * @return Whether opening a new tab is handled by the Start surface. It may show the Start', '     * surface, or open a new tab with the omnibox get focused, depending on the value of', '     * {@link StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB}.', '     */', '    private boolean showStartSurfaceHomeForNTP(boolean isNTP, boolean incognito, Tab parentTab,', '            @NewTabPageLaunchOrigin int launchOrigin) {', '        if (!isNTP', '                || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                        this, incognito, isTablet())) {', '            return false;', '        }', '', '        getTabModelSelector().selectModel(incognito);', '        if (StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB.getValue()', '                && launchOrigin != NewTabPageLaunchOrigin.WEB_FEED) {', '            Runnable emptyTabCloseCallback = isInOverviewMode() ? () -> {', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS, launchOrigin);', '            } : null;', '            ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurfaceAsNewTab(null,', '                    PageTransition.AUTO_TOPLEVEL, incognito, parentTab, getCurrentTabModel(),', '                    emptyTabCloseCallback);', '        } else if (TabUiFeatureUtilities.supportInstantStart(isTablet(), this)', '                || (getTabModelSelector().isTabStateInitialized() && isLayoutManagerCreated())) {', '            showOverview(StartSurfaceState.SHOWING_HOMEPAGE, launchOrigin);', '        }', '        return true;', '    }', '', '    private void updateAccessibilityState(boolean enabled) {', '        Tab currentTab = getActivityTab();', '        WebContents webContents = currentTab != null ? currentTab.getWebContents() : null;', '        if (webContents != null) {', '            WebContentsAccessibility.fromWebContents(webContents).setState(enabled);', '        }', '    }', '', '    @Override', '    public void onSaveInstanceState(Bundle outState) {', '        super.onSaveInstanceState(outState);', '        CipherFactory.getInstance().saveToBundle(outState);', '        outState.putInt(', '                WINDOW_INDEX, TabWindowManagerSingleton.getInstance().getIndexForWindow(this));', '        Boolean is_incognito = getCurrentTabModel().isIncognito();', '        outState.putBoolean(IS_INCOGNITO_SELECTED, is_incognito);', ""        // If it's Incognito and native is initialized and profile exists, serialize duration"", '        // service state.', '        if (is_incognito && ProfileManager.isInitialized()) {', '            AndroidSessionDurationsServiceState.serializeFromNative(', '                    outState, getCurrentTabModel().getProfile());', '        }', '    }', '', '    @Override', '    public void onDestroyInternal() {', '        if (mCallbackController != null) {', '            mCallbackController.destroy();', '            mCallbackController = null;', '        }', '', '        if (mTabModelSelectorTabObserver != null) {', '            mTabModelSelectorTabObserver.destroy();', '            mTabModelSelectorTabObserver = null;', '        }', '', '        if (mTabModelObserver != null) mTabModelObserver.destroy();', '', '        if (mUndoBarPopupController != null) {', '            mUndoBarPopupController.destroy();', '            mUndoBarPopupController = null;', '        }', '', '        if (mAppIndexingUtil != null) {', '            mAppIndexingUtil.destroy();', '            mAppIndexingUtil = null;', '        }', '', '        if (mStartSurfaceSupplier.get() != null) {', '            mStartSurfaceSupplier.get().destroy();', '        }', '', '        if (mStartupPaintPreviewHelperSupplier != null) {', '            mStartupPaintPreviewHelperSupplier.destroy();', '        }', '', '        if (mJankTracker != null) {', '            mJankTracker.destroy();', '            mJankTracker = null;', '        }', '', '        IncognitoTabHostRegistry.getInstance().unregister(mIncognitoTabHost);', '', '        TabObscuringHandler tabObscuringHandler = getTabObscuringHandler();', '        if (tabObscuringHandler != null) {', '            getTabObscuringHandler().removeObserver(mCompositorViewHolder);', '            getTabObscuringHandler().removeObserver(mOverviewListLayout);', '        }', '', '        if (isTablet()) ChromeAccessibilityUtil.get().removeObserver(mCompositorViewHolder);', '        ChromeAccessibilityUtil.get().removeObserver(this);', '        ChromeAccessibilityUtil.get().removeObserver(mLayoutManager);', '', '        if (mTabDelegateFactory != null) mTabDelegateFactory.destroy();', '', '        mAppLaunchDrawBlocker.destroy();', '', '        super.onDestroyInternal();', '    }', '', '    @Override', '    protected void destroyTabModels() {', '        if (mTabModelOrchestrator != null) {', '            mTabModelOrchestrator.destroy();', '        }', '    }', '', '    @Override', '    public void onTrimMemory(int level) {', '        super.onTrimMemory(level);', '        if (ChromeApplicationImpl.isSevereMemorySignal(level)) {', '            NativePageAssassin.getInstance().freezeAllHiddenPages();', '        }', '    }', '', '    @Override', '    public boolean dispatchKeyEvent(KeyEvent event) {', '        Boolean result = KeyboardShortcuts.dispatchKeyEvent(event, mUIWithNativeInitialized,', '                getFullscreenManager(), /* menuOrKeyboardActionController= */ this);', '        return result != null ? result : super.dispatchKeyEvent(event);', '    }', '', '    @Override', '    public boolean onKeyDown(int keyCode, KeyEvent event) {', '        if (!mUIWithNativeInitialized) {', '            return super.onKeyDown(keyCode, event);', '        }', '        // Detecting a long press of the back button via onLongPress is broken in Android N.', '        // To work around this, use a postDelayed, which is supported in all versions.', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()', '                && !getFullscreenManager().getPersistentFullscreenMode()) {', '            if (mShowHistoryRunnable == null) mShowHistoryRunnable = this::showFullHistorySheet;', '            mHandler.postDelayed(mShowHistoryRunnable, ViewConfiguration.getLongPressTimeout());', '            return super.onKeyDown(keyCode, event);', '        }', '        boolean isCurrentTabVisible = !mOverviewModeController.overviewVisible()', '                && (!isTablet() || getCurrentTabModel().getCount() != 0);', '        return KeyboardShortcuts.onKeyDown(event, isCurrentTabVisible, true, getTabModelSelector(),', '                       /* menuOrKeyboardActionController= */ this, getToolbarManager())', '                || super.onKeyDown(keyCode, event);', '    }', '', '    private void showFullHistorySheet() {', '        ((TabbedRootUiCoordinator) mRootUiCoordinator).showFullHistorySheet();', '    }', '', '    @Override', '    public boolean onKeyUp(int keyCode, KeyEvent event) {', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()) {', '            mHandler.removeCallbacks(mShowHistoryRunnable);', '            mShowHistoryRunnable = null;', '            if (event.getEventTime() - event.getDownTime()', '                            >= ViewConfiguration.getLongPressTimeout()', '                    && NavigationSheet.isInstanceShowing(', '                            mRootUiCoordinator.getBottomSheetController())) {', '                // If tab history popup is showing, do not process the keyUp event', '                // which will dismiss it immediately.', '                return true;', '            }', '        }', '        return super.onKeyUp(keyCode, event);', '    }', '', '    @VisibleForTesting', '    public boolean hasPendingNavigationRunnableForTesting() {', '        ThreadUtils.assertOnUiThread();', '        return mShowHistoryRunnable != null;', '    }', '', '    @Override', '    public void onProvideKeyboardShortcuts(', '            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {', '        data.addAll(KeyboardShortcuts.createShortcutGroup(this));', '    }', '', '    @VisibleForTesting', '    public View getTabsView() {', '        return getCompositorViewHolderSupplier().get();', '    }', '', '    @VisibleForTesting', '    public LayoutManagerChrome getLayoutManager() {', '        return (LayoutManagerChrome) getCompositorViewHolderSupplier().get().getLayoutManager();', '    }', '', '    @VisibleForTesting', '    public Layout getOverviewListLayout() {', '        return getLayoutManager().getOverviewListLayout();', '    }', '', '    @VisibleForTesting', '    public StartSurface getStartSurface() {', '        return mStartSurfaceSupplier.get();', '    }', '', '    private ComposedBrowserControlsVisibilityDelegate getAppBrowserControlsVisibilityDelegate() {', '        // TODO(jinsukkim): Move this to RootUiCoordinator.', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getAppBrowserControlsVisibilityDelegate();', '    }', '', '    @Override', '    protected ModalDialogManager createModalDialogManager() {', '        ModalDialogManager manager = super.createModalDialogManager();', '        // TODO(crbug.com/1157310): Transition this::method refs to dedicated suppliers.', '        mTabModalHandler = new TabModalLifetimeHandler(this, getLifecycleDispatcher(), manager,', '                this::getAppBrowserControlsVisibilityDelegate, this::getTabObscuringHandler,', '                this::getToolbarManager, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), this::getBrowserControlsManager,', '                this::getFullscreenManager);', '        return manager;', '    }', '', '    // App Menu related code -----------------------------------------------------------------------', '', '    @Override', '    public boolean canShowAppMenu() {', '        // The popup menu relies on the model created during the full UI initialization, so do not', '        // attempt to show the menu until the UI creation has finished.', '        if (!mUIWithNativeInitialized) return false;', '', ""        // If the current active tab is showing a tab modal dialog, an app menu shouldn't be shown"", '        // in any cases, e.g. when a hardware menu button is clicked.', '        Tab tab = getActivityTab();', '        if (tab != null && ChromeTabModalPresenter.isDialogShowing(tab)) return false;', '', '        return super.canShowAppMenu();', '    }', '', '    @Override', '    public boolean isInOverviewMode() {', '        return mOverviewModeController != null && mOverviewModeController.overviewVisible();', '    }', '', '    @Override', '    protected IntentHandlerDelegate createIntentHandlerDelegate() {', '        return new InternalIntentDelegate();', '    }', '', '    @Override', '    public void onSceneChange(Layout layout) {', '        super.onSceneChange(layout);', '        if (!layout.shouldDisplayContentOverlay()) mTabModelSelector.onTabsViewShown();', '    }', '', '    /**', '     * Writes the tab state to disk.', '     */', '    @VisibleForTesting', '    public void saveState() {', '        mTabModelOrchestrator.saveState();', '    }', '', '    @Override', '    public void onEnterVr() {', '        super.onEnterVr();', '        mControlContainer.setVisibility(View.INVISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate == null) {', '            mVrBrowserControlsVisibilityDelegate =', '                    new BrowserControlsVisibilityDelegate(BrowserControlsState.BOTH);', '            getAppBrowserControlsVisibilityDelegate().addDelegate(', '                    mVrBrowserControlsVisibilityDelegate);', '        }', '        mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.HIDDEN);', '    }', '', '    @Override', '    public void onExitVr() {', '        super.onExitVr();', '        mControlContainer.setVisibility(View.VISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate != null) {', '            mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.BOTH);', '        }', '    }', '', '    @Override', '    protected void applyThemeOverlays() {', '        super.applyThemeOverlays();', '', '        if (TabManagementModuleProvider.getDelegate() != null) {', '            TabManagementModuleProvider.getDelegate().applyThemeOverlays(this);', '        }', '    }', '', '    @Override', '    protected boolean supportsDynamicColors() {', '        return CachedFeatureFlags.isEnabled(ChromeFeatureList.DYNAMIC_COLOR_ANDROID);', '    }', '', '    /**', '     * Reports that a new tab launcher shortcut was selected or an action equivalent to a shortcut', '     * was performed.', '     * @param isIncognito Whether the shortcut or action created a new incognito tab.', '     */', '    @TargetApi(Build.VERSION_CODES.N_MR1)', '    private void reportNewTabShortcutUsed(boolean isIncognito) {', '        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) return;', '', '        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);', '        shortcutManager.reportShortcutUsed(', '                isIncognito ? ""new-incognito-tab-shortcut"" : ""new-tab-shortcut"");', '    }', '', '    @VisibleForTesting', '    public MultiInstanceManager getMultiInstanceMangerForTesting() {', '        return mMultiInstanceManager;', '    }', '', '    @VisibleForTesting', '    public ChromeNextTabPolicySupplier getNextTabPolicySupplier() {', '        return (ChromeNextTabPolicySupplier) mNextTabPolicySupplier;', '    }', '}', '']}]",chromium%2Fsrc~main~Ib8e4eafef2405d982bc64a050f47a12c26242ec2,18d923c044f261448f485740f8bb60731b5e9be5,chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java,4ddf1150_88a6e516_before.java,4ddf1150_88a6e516_after.java,ChromeTabbedActivity::handleBackPressed,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { VAR_352 ( VAR_368 ) ; VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } else { VAR_352 ( VAR_912 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_914 = VAR_679 ( VAR_604 ) ; final boolean VAR_915 = ! VAR_914 || VAR_916 ( VAR_604 ) ; if ( VAR_915 ) { if ( VAR_914 ) { VAR_917 ( VAR_604 ) ; return true ; } else { VAR_917 ( null ) ; return true ; } } else if ( VAR_914 ) { VAR_877 ( ) . VAR_918 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_919 ( ) ) { return false ; } int type = VAR_920 ( ) ; return type == VAR_640 || type == VAR_921 || type == VAR_922 || type == VAR_271 || ( type == VAR_923 && VAR_924 . from ( VAR_255 ) . VAR_925 ( ) != VAR_611 ) ; } private void VAR_917 ( Log . i ( TAG , STRING_68 + VAR_926 ) ; VAR_402 ( true ) ; if ( VAR_926 != null ) { VAR_927 ( ( ) - > { boolean VAR_928 = VAR_452 ( ) . VAR_929 ( VAR_926 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_926 , false , true , false ) ; if ( ! VAR_928 ) VAR_352 ( VAR_491 ) ; } , VAR_930 ) ; } } public boolean VAR_402 ( boolean VAR_931 ) { try { return super . VAR_402 ( VAR_931 ) ; } catch ( VAR_932 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_933 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_934 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_935 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_936 ( ) && VAR_937 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_938 ( ) ; int VAR_939 = VAR_940 ( VAR_221 , VAR_941 , VAR_611 ) ; VAR_221 . remove ( VAR_941 ) ; if ( VAR_939 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_942 ) , VAR_640 , VAR_943 ( VAR_939 ) ) ; } } return VAR_466 ( false ) . VAR_944 ( VAR_565 , VAR_566 , VAR_933 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_945 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_912 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_946 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_947 ( this ) || ! VAR_948 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_949 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_950 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_946 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_946 ( true ) ) ; VAR_951 ( false ) ; VAR_952 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_951 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_953 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_954 VAR_955 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_912 , VAR_810 ) ; } : null ; VAR_956 ( null , VAR_957 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_955 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_958 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_951 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_959 ( VAR_901 ) . VAR_960 ( VAR_549 ) ; } } public void VAR_961 ( VAR_446 VAR_962 ) { super . VAR_961 ( VAR_962 ) ; VAR_509 . getInstance ( ) . VAR_963 ( VAR_962 ) ; VAR_964 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_965 = VAR_452 ( ) . VAR_556 ( ) ; VAR_966 ( VAR_450 , VAR_965 ) ; if ( VAR_965 && VAR_967 ( ) ) { VAR_968 ( VAR_962 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_969 ( ) { if ( VAR_498 != null ) { VAR_970 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_971 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_972 ( ) ; if ( VAR_724 != null ) { VAR_973 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_974 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_975 ( ) ; } if ( VAR_731 != null ) { VAR_976 ( ) ; } if ( VAR_313 != null ) { VAR_977 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_978 ( VAR_660 ) ; VAR_979 VAR_980 = VAR_418 ( ) ; if ( VAR_980 != null ) { VAR_418 ( ) . VAR_981 ( VAR_414 ) ; VAR_418 ( ) . VAR_981 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_981 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_981 ( this ) ; VAR_412 . get ( ) . VAR_981 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_982 ( ) ; VAR_983 ( ) ; super . VAR_969 ( ) ; } protected void VAR_984 ( ) { if ( VAR_744 != null ) { VAR_985 ( ) ; } } public void VAR_986 ( int VAR_987 ) { super . VAR_986 ( VAR_987 ) ; if ( VAR_988 ( VAR_987 ) ) { VAR_989 . getInstance ( ) . VAR_990 ( ) ; } } public boolean VAR_991 ( VAR_992 event ) { Boolean result = VAR_993 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_991 ( event ) ; } public boolean VAR_994 ( int VAR_995 , VAR_992 event ) { if ( ! VAR_377 ) { return super . VAR_994 ( VAR_995 , event ) ; } if ( VAR_995 == VAR_996 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_997 == null ) VAR_997 = this : : VAR_998 ; VAR_927 ( VAR_997 , VAR_999 ( ) ) ; return super . VAR_994 ( VAR_995 , event ) ; } boolean VAR_1000 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1001 ( event , VAR_1000 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_994 ( VAR_995 , event ) ; } private void VAR_998 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_998 ( ) ; } public boolean VAR_1002 ( int VAR_995 , VAR_992 event ) { if ( VAR_995 == VAR_996 && ! VAR_286 ( ) ) { VAR_1003 ( VAR_997 ) ; VAR_997 = null ; if ( VAR_1004 ( ) - VAR_1005 ( ) >= VAR_999 ( ) && VAR_1006 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1002 ( VAR_995 , event ) ; } public boolean VAR_1007 ( ) { VAR_1008 ( ) ; return VAR_997 != null ; } public void VAR_1009 ( List < VAR_1010 > data , VAR_1011 VAR_1012 , int VAR_1013 ) { data . addAll ( VAR_1014 ( this ) ) ; } public View VAR_1015 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1016 VAR_1017 ( ) { return ( VAR_1016 ) VAR_289 ( ) . get ( ) . VAR_1017 ( ) ; } public VAR_1018 VAR_1019 ( ) { return VAR_1017 ( ) . VAR_1019 ( ) ; } public VAR_293 VAR_1020 ( ) { return VAR_298 . get ( ) ; } private VAR_1021 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1022 VAR_1023 ( ) { VAR_1022 VAR_1024 = super . VAR_1023 ( ) ; VAR_1025 = new VAR_1026 ( this , VAR_309 ( ) , VAR_1024 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1024 ; } public boolean VAR_1027 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1028 ( VAR_255 ) ) return false ; return super . VAR_1027 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1029 VAR_1030 ( ) { return new VAR_561 ( ) ; } public void VAR_1031 ( VAR_1018 VAR_1032 ) { super . VAR_1031 ( VAR_1032 ) ; if ( ! VAR_1033 ( ) ) VAR_1034 ( ) ; } public void VAR_1035 ( ) { VAR_436 ( ) ; } public void VAR_1036 ( ) { super . VAR_1036 ( ) ; VAR_1037 ( VAR_1038 ) ; if ( VAR_1039 == null ) { VAR_1039 = new VAR_1040 ( VAR_1041 ) ; VAR_799 ( ) . VAR_1042 ( VAR_1039 ) ; } VAR_1039 . set ( VAR_1043 ) ; } public void VAR_1044 ( ) { super . VAR_1044 ( ) ; VAR_1037 ( VAR_1045 ) ; if ( VAR_1039 != null ) { VAR_1039 . set ( VAR_1041 ) ; } } protected void VAR_1046 ( ) { super . VAR_1046 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1046 ( this ) ; } } protected boolean VAR_1047 ( ) { return VAR_688 ( VAR_1048 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1049 < VAR_1050 ) return ; VAR_1051 VAR_1052 = VAR_819 ( VAR_1053 class ) ; VAR_1054 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1055 VAR_1056 ( ) { return VAR_742 ; } public VAR_751 VAR_1057 ( ) { return ( VAR_751 ) VAR_750 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { VAR_352 ( VAR_368 ) ; if ( type == VAR_271 && ! VAR_911 ( VAR_604 ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } else { VAR_352 ( VAR_912 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_914 = VAR_679 ( VAR_604 ) ; final boolean VAR_915 = ! VAR_914 || VAR_916 ( VAR_604 ) ; if ( VAR_915 ) { if ( VAR_914 ) { VAR_917 ( VAR_604 ) ; return true ; } else { VAR_917 ( null ) ; return true ; } } else if ( VAR_914 ) { VAR_877 ( ) . VAR_918 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_919 ( ) ) { return false ; } int type = VAR_920 ( ) ; return type == VAR_640 || type == VAR_921 || type == VAR_922 || type == VAR_271 || ( type == VAR_923 && VAR_924 . from ( VAR_255 ) . VAR_925 ( ) != VAR_611 ) ; } private void VAR_917 ( Log . i ( TAG , STRING_68 + VAR_926 ) ; VAR_402 ( true ) ; if ( VAR_926 != null ) { VAR_927 ( ( ) - > { boolean VAR_928 = VAR_452 ( ) . VAR_929 ( VAR_926 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_926 , false , true , false ) ; if ( ! VAR_928 ) VAR_352 ( VAR_491 ) ; } , VAR_930 ) ; } } public boolean VAR_402 ( boolean VAR_931 ) { try { return super . VAR_402 ( VAR_931 ) ; } catch ( VAR_932 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_933 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_934 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_935 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_936 ( ) && VAR_937 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_938 ( ) ; int VAR_939 = VAR_940 ( VAR_221 , VAR_941 , VAR_611 ) ; VAR_221 . remove ( VAR_941 ) ; if ( VAR_939 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_942 ) , VAR_640 , VAR_943 ( VAR_939 ) ) ; } } return VAR_466 ( false ) . VAR_944 ( VAR_565 , VAR_566 , VAR_933 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_945 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_912 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_946 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_947 ( this ) || ! VAR_948 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_949 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_950 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_946 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_946 ( true ) ) ; VAR_951 ( false ) ; VAR_952 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_951 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_953 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_954 VAR_955 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_912 , VAR_810 ) ; } : null ; VAR_956 ( null , VAR_957 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_955 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_958 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_951 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_959 ( VAR_901 ) . VAR_960 ( VAR_549 ) ; } } public void VAR_961 ( VAR_446 VAR_962 ) { super . VAR_961 ( VAR_962 ) ; VAR_509 . getInstance ( ) . VAR_963 ( VAR_962 ) ; VAR_964 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_965 = VAR_452 ( ) . VAR_556 ( ) ; VAR_966 ( VAR_450 , VAR_965 ) ; if ( VAR_965 && VAR_967 ( ) ) { VAR_968 ( VAR_962 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_969 ( ) { if ( VAR_498 != null ) { VAR_970 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_971 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_972 ( ) ; if ( VAR_724 != null ) { VAR_973 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_974 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_975 ( ) ; } if ( VAR_731 != null ) { VAR_976 ( ) ; } if ( VAR_313 != null ) { VAR_977 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_978 ( VAR_660 ) ; VAR_979 VAR_980 = VAR_418 ( ) ; if ( VAR_980 != null ) { VAR_418 ( ) . VAR_981 ( VAR_414 ) ; VAR_418 ( ) . VAR_981 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_981 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_981 ( this ) ; VAR_412 . get ( ) . VAR_981 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_982 ( ) ; VAR_983 ( ) ; super . VAR_969 ( ) ; } protected void VAR_984 ( ) { if ( VAR_744 != null ) { VAR_985 ( ) ; } } public void VAR_986 ( int VAR_987 ) { super . VAR_986 ( VAR_987 ) ; if ( VAR_988 ( VAR_987 ) ) { VAR_989 . getInstance ( ) . VAR_990 ( ) ; } } public boolean VAR_991 ( VAR_992 event ) { Boolean result = VAR_993 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_991 ( event ) ; } public boolean VAR_994 ( int VAR_995 , VAR_992 event ) { if ( ! VAR_377 ) { return super . VAR_994 ( VAR_995 , event ) ; } if ( VAR_995 == VAR_996 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_997 == null ) VAR_997 = this : : VAR_998 ; VAR_927 ( VAR_997 , VAR_999 ( ) ) ; return super . VAR_994 ( VAR_995 , event ) ; } boolean VAR_1000 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1001 ( event , VAR_1000 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_994 ( VAR_995 , event ) ; } private void VAR_998 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_998 ( ) ; } public boolean VAR_1002 ( int VAR_995 , VAR_992 event ) { if ( VAR_995 == VAR_996 && ! VAR_286 ( ) ) { VAR_1003 ( VAR_997 ) ; VAR_997 = null ; if ( VAR_1004 ( ) - VAR_1005 ( ) >= VAR_999 ( ) && VAR_1006 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1002 ( VAR_995 , event ) ; } public boolean VAR_1007 ( ) { VAR_1008 ( ) ; return VAR_997 != null ; } public void VAR_1009 ( List < VAR_1010 > data , VAR_1011 VAR_1012 , int VAR_1013 ) { data . addAll ( VAR_1014 ( this ) ) ; } public View VAR_1015 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1016 VAR_1017 ( ) { return ( VAR_1016 ) VAR_289 ( ) . get ( ) . VAR_1017 ( ) ; } public VAR_1018 VAR_1019 ( ) { return VAR_1017 ( ) . VAR_1019 ( ) ; } public VAR_293 VAR_1020 ( ) { return VAR_298 . get ( ) ; } private VAR_1021 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1022 VAR_1023 ( ) { VAR_1022 VAR_1024 = super . VAR_1023 ( ) ; VAR_1025 = new VAR_1026 ( this , VAR_309 ( ) , VAR_1024 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1024 ; } public boolean VAR_1027 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1028 ( VAR_255 ) ) return false ; return super . VAR_1027 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1029 VAR_1030 ( ) { return new VAR_561 ( ) ; } public void VAR_1031 ( VAR_1018 VAR_1032 ) { super . VAR_1031 ( VAR_1032 ) ; if ( ! VAR_1033 ( ) ) VAR_1034 ( ) ; } public void VAR_1035 ( ) { VAR_436 ( ) ; } public void VAR_1036 ( ) { super . VAR_1036 ( ) ; VAR_1037 ( VAR_1038 ) ; if ( VAR_1039 == null ) { VAR_1039 = new VAR_1040 ( VAR_1041 ) ; VAR_799 ( ) . VAR_1042 ( VAR_1039 ) ; } VAR_1039 . set ( VAR_1043 ) ; } public void VAR_1044 ( ) { super . VAR_1044 ( ) ; VAR_1037 ( VAR_1045 ) ; if ( VAR_1039 != null ) { VAR_1039 . set ( VAR_1041 ) ; } } protected void VAR_1046 ( ) { super . VAR_1046 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1046 ( this ) ; } } protected boolean VAR_1047 ( ) { return VAR_688 ( VAR_1048 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1049 < VAR_1050 ) return ; VAR_1051 VAR_1052 = VAR_819 ( VAR_1053 class ) ; VAR_1054 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1055 VAR_1056 ( ) { return VAR_742 ; } public VAR_751 VAR_1057 ( ) { return ( VAR_751 ) VAR_750 ; } }","Think of the case: 1) user open this VAR_906ground VAR_254. 2) tap the VAR_255 switcher button and enter the VAR_255 switcher. 3) choose the VAR_906ground VAR_255 from the VAR_255 switcher again. 4) on the VAR_906ground VAR_255, taps the VAR_906 button. There are many steps are done before it returns to the Start surface, do you still want to close this VAR_906ground VAR_255? I'm fine with deleting the VAR_255 here, but just want to make sure that you really want to delete this VAR_255 in such a case.

Actually, I think this could be:
if (type == VAR_271 && !VAR_293UserData.getKeepVAR_254(VAR_604)) {
  getCurrentVAR_576().VAR_867(VAR_604);
}

VAR_293UserData.setKeepVAR_254() is called when user taps either home button or VAR_255 switcher button on the VAR_255. It distinguishes the cases that tapping the VAR_906 button directly after opening the VAR_255 from the cases that user does multiple other steps. Wdyt?"
73,343e0792_12916045,2171.0,"> just want to make sure that you really want to delete this tab in such a case.

Yes, I would intend for the tab to be closed in that case. That's what currently happens if the tab is created from the New Tab Page feed.

> StartSurfaceUserData.setKeepTab() is called when user taps either home button or tab switcher button on the tab. It distinguishes the cases that tapping the back button directly after opening the tab from the cases that user does multiple other steps. Wdyt?

I see, sounds like I should check ""KeepTab"" before closing the tab.",2169.0,2171.0,"[{'ab': ['// Copyright 2015 The Chromium Authors. All rights reserved.', '// Use of this source code is governed by a BSD-style license that can be', '// found in the LICENSE file.', '', 'package org.chromium.chrome.browser;', '', 'import android.annotation.TargetApi;', 'import android.app.ActivityManager;', 'import android.content.ComponentName;', 'import android.content.Context;', 'import android.content.Intent;', 'import android.content.pm.ApplicationInfo;', 'import android.content.pm.ShortcutManager;', 'import android.os.Build;', 'import android.os.Bundle;', 'import android.os.SystemClock;', 'import android.text.TextUtils;', 'import android.text.format.DateUtils;', 'import android.util.Pair;', 'import android.view.KeyEvent;', 'import android.view.KeyboardShortcutGroup;', 'import android.view.Menu;', 'import android.view.View;', 'import android.view.View.OnClickListener;', 'import android.view.ViewConfiguration;', 'import android.view.ViewGroup;', 'import android.view.Window;', 'import android.view.WindowManager;', '', 'import androidx.annotation.IntDef;', 'import androidx.annotation.Nullable;', 'import androidx.annotation.VisibleForTesting;', 'import androidx.lifecycle.Lifecycle;', 'import androidx.lifecycle.LifecycleObserver;', 'import androidx.lifecycle.LifecycleRegistry;', '', 'import org.chromium.base.CallbackController;', 'import org.chromium.base.CommandLine;', 'import org.chromium.base.ContextUtils;', 'import org.chromium.base.IntentUtils;', 'import org.chromium.base.Log;', 'import org.chromium.base.MemoryPressureListener;', 'import org.chromium.base.ThreadUtils;', 'import org.chromium.base.TraceEvent;', 'import org.chromium.base.annotations.UsedByReflection;', 'import org.chromium.base.jank_tracker.JankTrackerImpl;', 'import org.chromium.base.library_loader.LibraryLoader;', 'import org.chromium.base.metrics.RecordHistogram;', 'import org.chromium.base.metrics.RecordUserAction;', 'import org.chromium.base.supplier.ObservableSupplierImpl;', 'import org.chromium.base.supplier.OneShotCallback;', 'import org.chromium.base.supplier.OneshotSupplier;', 'import org.chromium.base.supplier.OneshotSupplierImpl;', 'import org.chromium.base.supplier.Supplier;', 'import org.chromium.base.supplier.UnownedUserDataSupplier;', 'import org.chromium.base.task.PostTask;', 'import org.chromium.cc.input.BrowserControlsState;', 'import org.chromium.chrome.R;', 'import org.chromium.chrome.browser.IntentHandler.IntentHandlerDelegate;', 'import org.chromium.chrome.browser.IntentHandler.TabOpenType;', 'import org.chromium.chrome.browser.accessibility_tab_switcher.OverviewListLayout;', 'import org.chromium.chrome.browser.app.ChromeActivity;', 'import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.metrics.TabbedActivityLaunchCauseMetrics;', 'import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.ChromeNextTabPolicySupplier;', 'import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;', 'import org.chromium.chrome.browser.app.tabmodel.TabWindowManagerSingleton;', 'import org.chromium.chrome.browser.app.tabmodel.TabbedModeTabModelOrchestrator;', 'import org.chromium.chrome.browser.bookmarks.BookmarkUtils;', 'import org.chromium.chrome.browser.browserservices.intents.WebappConstants;', 'import org.chromium.chrome.browser.compositor.CompositorViewHolder;', 'import org.chromium.chrome.browser.compositor.bottombar.ephemeraltab.EphemeralTabCoordinator;', 'import org.chromium.chrome.browser.compositor.layouts.Layout;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChrome;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromePhone;', 'import org.chromium.chrome.browser.compositor.layouts.LayoutManagerChromeTablet;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeBehavior;', 'import org.chromium.chrome.browser.compositor.layouts.OverviewModeController;', 'import org.chromium.chrome.browser.cookies.CookiesFetcher;', 'import org.chromium.chrome.browser.crypto.CipherFactory;', 'import org.chromium.chrome.browser.dependency_injection.ChromeActivityComponent;', 'import org.chromium.chrome.browser.device.DeviceClassManager;', 'import org.chromium.chrome.browser.dom_distiller.ReaderModeManager;', 'import org.chromium.chrome.browser.download.DownloadNotificationService;', 'import org.chromium.chrome.browser.download.DownloadOpenSource;', 'import org.chromium.chrome.browser.download.DownloadUtils;', 'import org.chromium.chrome.browser.feature_engagement.TrackerFactory;', 'import org.chromium.chrome.browser.feed.FeedSurfaceTracker;', 'import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;', 'import org.chromium.chrome.browser.flags.ActivityType;', 'import org.chromium.chrome.browser.flags.CachedFeatureFlags;', 'import org.chromium.chrome.browser.flags.ChromeFeatureList;', 'import org.chromium.chrome.browser.flags.ChromeSwitches;', 'import org.chromium.chrome.browser.fonts.FontPreloader;', 'import org.chromium.chrome.browser.gesturenav.NavigationSheet;', 'import org.chromium.chrome.browser.homepage.HomepageManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationManager;', 'import org.chromium.chrome.browser.incognito.IncognitoNotificationPresenceController;', 'import org.chromium.chrome.browser.incognito.IncognitoProfileDestroyer;', 'import org.chromium.chrome.browser.incognito.IncognitoStartup;', 'import org.chromium.chrome.browser.incognito.IncognitoTabLauncher;', 'import org.chromium.chrome.browser.incognito.IncognitoTabSnapshotController;', 'import org.chromium.chrome.browser.incognito.IncognitoUtils;', 'import org.chromium.chrome.browser.infobar.DataReductionPromoInfoBar;', 'import org.chromium.chrome.browser.infobar.SyncErrorInfoBar;', 'import org.chromium.chrome.browser.layouts.LayoutStateProvider;', 'import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;', 'import org.chromium.chrome.browser.locale.LocaleManager;', 'import org.chromium.chrome.browser.metrics.AndroidSessionDurationsServiceState;', 'import org.chromium.chrome.browser.metrics.LaunchMetrics;', 'import org.chromium.chrome.browser.metrics.MainIntentBehaviorMetrics;', 'import org.chromium.chrome.browser.modaldialog.ChromeTabModalPresenter;', 'import org.chromium.chrome.browser.modaldialog.TabModalLifetimeHandler;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceChromeTabbedActivity;', 'import org.chromium.chrome.browser.multiwindow.MultiInstanceManager;', 'import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;', 'import org.chromium.chrome.browser.native_page.NativePageAssassin;', 'import org.chromium.chrome.browser.navigation_predictor.NavigationPredictorBridge;', 'import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;', 'import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;', 'import org.chromium.chrome.browser.ntp.NewTabPageUma;', 'import org.chromium.chrome.browser.ntp.NewTabPageUtils;', 'import org.chromium.chrome.browser.omnibox.OmniboxFocusReason;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelper;', 'import org.chromium.chrome.browser.paint_preview.StartupPaintPreviewHelperSupplier;', 'import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;', 'import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;', 'import org.chromium.chrome.browser.profiles.OTRProfileID;', 'import org.chromium.chrome.browser.profiles.Profile;', 'import org.chromium.chrome.browser.profiles.ProfileManager;', 'import org.chromium.chrome.browser.reengagement.ReengagementNotificationController;', 'import org.chromium.chrome.browser.search_engines.SearchEngineChoiceNotification;', 'import org.chromium.chrome.browser.settings.SettingsLauncherImpl;', 'import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;', 'import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;', 'import org.chromium.chrome.browser.survey.ChromeSurveyController;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;', 'import org.chromium.chrome.browser.sync.ui.SyncErrorPromptUtils;', 'import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;', 'import org.chromium.chrome.browser.tab.Tab;', 'import org.chromium.chrome.browser.tab.TabAssociatedApp;', 'import org.chromium.chrome.browser.tab.TabCreationState;', 'import org.chromium.chrome.browser.tab.TabDelegateFactory;', 'import org.chromium.chrome.browser.tab.TabLaunchType;', 'import org.chromium.chrome.browser.tab.TabSelectionType;', 'import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedAppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.tabbed_mode.TabbedRootUiCoordinator;', 'import org.chromium.chrome.browser.tabmodel.ChromeTabCreator;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHost;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostRegistry;', 'import org.chromium.chrome.browser.tabmodel.IncognitoTabHostUtils;', 'import org.chromium.chrome.browser.tabmodel.NextTabPolicy.NextTabPolicySupplier;', 'import org.chromium.chrome.browser.tabmodel.TabModel;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelector;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorBase;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabModelObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver;', 'import org.chromium.chrome.browser.tabmodel.TabModelUtils;', 'import org.chromium.chrome.browser.tabmodel.TabWindowManager;', 'import org.chromium.chrome.browser.tasks.ConditionalTabStripUtils;', 'import org.chromium.chrome.browser.tasks.EngagementTimeUtil;', 'import org.chromium.chrome.browser.tasks.JourneyManager;', 'import org.chromium.chrome.browser.tasks.ReturnToChromeExperimentsUtil;', 'import org.chromium.chrome.browser.tasks.TasksUma;', 'import org.chromium.chrome.browser.tasks.tab_management.TabGroupUi;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementDelegate;', 'import org.chromium.chrome.browser.tasks.tab_management.TabManagementModuleProvider;', 'import org.chromium.chrome.browser.tasks.tab_management.TabUiFeatureUtilities;', 'import org.chromium.chrome.browser.toolbar.ToolbarButtonInProductHelpController;', 'import org.chromium.chrome.browser.toolbar.ToolbarIntentMetadata;', 'import org.chromium.chrome.browser.toolbar.ToolbarManager;', 'import org.chromium.chrome.browser.toolbar.top.ToolbarControlContainer;', 'import org.chromium.chrome.browser.translate.TranslateIntentHandler;', 'import org.chromium.chrome.browser.ui.AppLaunchDrawBlocker;', 'import org.chromium.chrome.browser.ui.RootUiCoordinator;', 'import org.chromium.chrome.browser.ui.TabObscuringHandler;', 'import org.chromium.chrome.browser.ui.appmenu.AppMenuPropertiesDelegate;', 'import org.chromium.chrome.browser.undo_tab_close_snackbar.UndoBarController;', 'import org.chromium.chrome.browser.usage_stats.UsageStatsService;', 'import org.chromium.chrome.browser.util.ChromeAccessibilityUtil;', 'import org.chromium.chrome.browser.vr.VrModuleProvider;', 'import org.chromium.chrome.features.start_surface.StartSurface;', 'import org.chromium.chrome.features.start_surface.StartSurfaceConfiguration;', 'import org.chromium.chrome.features.start_surface.StartSurfaceState;', 'import org.chromium.chrome.features.start_surface.StartSurfaceUserData;', 'import org.chromium.components.browser_ui.settings.SettingsLauncher;', 'import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;', 'import org.chromium.components.browser_ui.util.ComposedBrowserControlsVisibilityDelegate;', 'import org.chromium.components.embedder_support.util.UrlConstants;', 'import org.chromium.components.embedder_support.util.UrlUtilities;', 'import org.chromium.components.feature_engagement.EventConstants;', 'import org.chromium.components.messages.MessageDispatcherProvider;', 'import org.chromium.components.profile_metrics.BrowserProfileType;', 'import org.chromium.components.webapps.ShortcutSource;', 'import org.chromium.content_public.browser.LoadUrlParams;', 'import org.chromium.content_public.browser.NavigationHandle;', 'import org.chromium.content_public.browser.RenderFrameHost;', 'import org.chromium.content_public.browser.UiThreadTaskTraits;', 'import org.chromium.content_public.browser.WebContents;', 'import org.chromium.content_public.browser.WebContentsAccessibility;', 'import org.chromium.content_public.common.ContentSwitches;', 'import org.chromium.ui.base.PageTransition;', 'import org.chromium.ui.modaldialog.ModalDialogManager;', 'import org.chromium.ui.widget.Toast;', '', 'import java.lang.annotation.Retention;', 'import java.lang.annotation.RetentionPolicy;', 'import java.util.HashSet;', 'import java.util.List;', 'import java.util.Locale;', '', '/**', ' * This is the main activity for ChromeMobile when not running in document mode.  All the tabs', ' * are accessible via a chrome specific tab switching UI.', ' */', 'public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>', '        implements ChromeAccessibilityUtil.Observer {', '    private static final String TAG = ""ChromeTabbedActivity"";', '', '    private static final String HELP_URL_PREFIX = ""https://support.google.com/chrome/"";', '', '    protected static final String WINDOW_INDEX = ""window_index"";', '', '    private static final String IS_INCOGNITO_SELECTED = ""is_incognito_selected"";', '', '    private static final int INVALID_WINDOW_ID = TabWindowManager.INVALID_WINDOW_INDEX;', '', '    // How long to delay closing the current tab when our app is minimized.  Have to delay this', ""    // so that we don't show the contents of the next tab while minimizing."", '    private static final long CLOSE_TAB_ON_MINIMIZE_DELAY_MS = 500;', '', '    // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs', '    // restore. This is needed because we do not know when reading PartnerBrowserCustomizations', '    // provider will be finished.', '    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;', '', '    /**', '     * Sending an intent with this action to Chrome will cause it to close all tabs', '     * (iff the --enable-test-intents command line flag is set). If a URL is supplied in the', '     * intent data, this will be loaded and unaffected by the close all action.', '     */', '    private static final String ACTION_CLOSE_TABS =', '            ""com.google.android.apps.chrome.ACTION_CLOSE_TABS"";', '', '    @VisibleForTesting', '    public static final String STARTUP_UMA_HISTOGRAM_SUFFIX = "".Tabbed"";', '', '    // Name of the ChromeTabbedActivity alias that handles MAIN intents.', '    public static final String MAIN_LAUNCHER_ACTIVITY_NAME = ""com.google.android.apps.chrome.Main"";', '', '    public static final SettingsLauncher SETTINGS_LAUNCHER = new SettingsLauncherImpl();', '', '    public static final HashSet<String> TABBED_MODE_COMPONENT_NAMES = new HashSet<String>() {', '        {', '            add(ChromeTabbedActivity.class.getName());', '            add(MultiInstanceChromeTabbedActivity.class.getName());', '            add(ChromeTabbedActivity2.class.getName());', '            add(MAIN_LAUNCHER_ACTIVITY_NAME);', '        }', '    };', '', '    /**', '     * Identifies a histogram to use in {@link #maybeDispatchExplicitMainViewIntent(Intent, int)}.', '     */', '    @IntDef({DispatchedBy.ON_CREATE, DispatchedBy.ON_NEW_INTENT})', '    @Retention(RetentionPolicy.SOURCE)', '    private @interface DispatchedBy {', '        int ON_CREATE = 1;', '        int ON_NEW_INTENT = 2;', '    }', '', '    // Count histogram used to track number of tabs when we show the Overview on Return to Chrome.', '    private static final String TAB_COUNT_ON_RETURN = ""Tabs.TabCountOnStartScreenShown"";', '', '    private final MainIntentBehaviorMetrics mMainIntentMetrics;', '    private @Nullable MultiInstanceManager mMultiInstanceManager;', '', '    private UndoBarController mUndoBarPopupController;', '', '    private LayoutManagerChrome mLayoutManager;', '', '    private ViewGroup mContentContainer;', '', '    private ToolbarControlContainer mControlContainer;', '', '    private TabbedModeTabModelOrchestrator mTabModelOrchestrator;', '    private TabModelSelectorBase mTabModelSelector;', '    private TabModelSelectorTabObserver mTabModelSelectorTabObserver;', '    private TabModelSelectorTabModelObserver mTabModelObserver;', '', '    private BrowserControlsVisibilityDelegate mVrBrowserControlsVisibilityDelegate;', '    private TabModalLifetimeHandler mTabModalHandler;', '', '    private boolean mUIWithNativeInitialized;', '', '    private Boolean mIsAccessibilityTabSwitcherEnabled;', '', '    private LocaleManager mLocaleManager;', '', '    private AppIndexingUtil mAppIndexingUtil;', '', '    private Runnable mShowHistoryRunnable;', '', '    private CompositorViewHolder mCompositorViewHolder;', '    private OverviewListLayout mOverviewListLayout;', '    /**', '     * Keeps track of whether or not a specific tab was created based on the startup intent.', '     */', '    private boolean mCreatedTabOnStartup;', '', '    // Whether or not the initial tab is being created.', '    private boolean mPendingInitialTabCreation;', '', '    // Whether {@link setInitialOverviewState()} has been called within the current onStart/onStop', '    // session.', '    private boolean mHasDeterminedOverviewStateForCurrentSession;', '    /**', '     *  Keeps track of the pref for the last time since this activity was stopped.', '     */', '    private ChromeInactivityTracker mInactivityTracker;', '', ""    // This is the cached value of mIntentHandler#shouldIgnoreIntent and shouldn't be read directly."", '    // Use #shouldIgnoreIntent instead.', '    private Boolean mShouldIgnoreIntent;', '    /*', '     *  Listens to FrameMetrics and records jank metrics.', '     */', '    private JankTrackerImpl mJankTracker;', '', '    // Supplier for a dependency to inform about the type of intent used to launch Chrome.', '    private OneshotSupplierImpl<ToolbarIntentMetadata> mIntentMetadataOneshotSupplier =', '            new OneshotSupplierImpl<>();', '', '    // Time at which an intent was received and handled.', '    private long mIntentHandlingTimeMs;', '', '    /**', '     * Whether the StartSurface is shown when Chrome is launched.', '     */', '    private boolean mOverviewShownOnStart;', '', '    private NextTabPolicySupplier mNextTabPolicySupplier;', '', '    private final UnownedUserDataSupplier<StartupPaintPreviewHelper>', '            mStartupPaintPreviewHelperSupplier = new StartupPaintPreviewHelperSupplier();', '', '    private final OneshotSupplierImpl<LayoutStateProvider> mLayoutStateProviderOneshotSupplier =', '            new OneshotSupplierImpl<>();', '    // TODO(crbug.com/1108496): Removed after all usages has been migrated to LayoutStateProvider.', '    private final OneshotSupplierImpl<OverviewModeBehavior> mOverviewModeBehaviorSupplier =', '            new OneshotSupplierImpl<>();', '    private OverviewModeController mOverviewModeController;', '', '    private ObservableSupplierImpl<EphemeralTabCoordinator> mEphemeralTabCoordinatorSupplier =', '            new ObservableSupplierImpl<>();', '    private final OneshotSupplierImpl<StartSurface> mStartSurfaceSupplier =', '            new OneshotSupplierImpl<>();', '    private ObservableSupplierImpl<Tab> mStartSurfaceParentTabSupplier =', '            new ObservableSupplierImpl<>();', '', '    private CallbackController mCallbackController = new CallbackController();', '    private TabbedModeTabDelegateFactory mTabDelegateFactory;', '', '    private final AppLaunchDrawBlocker mAppLaunchDrawBlocker;', '', '    // ID assigned to each ChromeTabbedActivity instance in Android S+ where multi-instance feature', '    // is supported. This can be explicitly set in the incoming Intent or internally assigned.', '    private int mWindowId;', '', '    private final IncognitoTabHost mIncognitoTabHost = new IncognitoTabHost() {', '        @Override', '        public boolean hasIncognitoTabs() {', '            return getTabModelSelector().getModel(true).getCount() > 0;', '        }', '', '        @Override', '        public void closeAllIncognitoTabs() {', '            if (isActivityFinishingOrDestroyed()) return;', '', '            // If the tabbed activity has not yet initialized, then finish the activity to avoid', '            // timing issues with clearing the incognito tab state in the background.', '            if (!areTabModelsInitialized() || !didFinishNativeInitialization()) {', '                finish();', '                return;', '            }', '', '            getTabModelSelector().getModel(true).closeAllTabs(false, false);', '        }', '', '        @Override', '        public boolean isActiveModel() {', '            return getTabModelSelector().getModel(true).isActiveModel();', '        }', '    };', '', '    /**', '     * This class is used to warm up the chrome split ClassLoader. See SplitChromeApplication for', '     * more info', '     */', '    @UsedByReflection(""SplitChromeApplication.java"")', '    public static class Preload extends ChromeTabbedActivity {', '        private LifecycleRegistry mLifecycleRegistry;', '', '        @UsedByReflection(""SplitChromeApplication.java"")', '        public Preload() {}', '', '        @Override', '        public Lifecycle getLifecycle() {', '            if (mLifecycleRegistry == null) {', '                // LifecycleRegistry normally enforces it is called on the main thread, but this', '                // class will be preloaded in a background thread. The only method that gets called', '                // in the activity constructor is addObserver(), so just override that.', '                mLifecycleRegistry = new LifecycleRegistry(null) {', '                    @Override', '                    public void addObserver(LifecycleObserver observer) {}', '                };', '            }', '            return mLifecycleRegistry;', '        }', '    }', '', '    /**', '     * Specify the proper non-.Main-aliased Chrome Activity for the given component.', '     *', '     * @param intent The intent to set the component for.', '     * @param component The client generated component to be validated.', '     */', '    public static void setNonAliasedComponent(Intent intent, ComponentName component) {', '        assert component != null;', '        Context appContext = ContextUtils.getApplicationContext();', '        if (!TextUtils.equals(component.getPackageName(), appContext.getPackageName())) {', '            return;', '        }', '        if (component.getClassName() != null', '                && TextUtils.equals(component.getClassName(),', '                        ChromeTabbedActivity.MAIN_LAUNCHER_ACTIVITY_NAME)) {', '            // Keep in sync with the activities that the .Main alias points to in', '            // AndroidManifest.xml.', '            intent.setClass(appContext, ChromeTabbedActivity.class);', '        } else {', '            intent.setComponent(component);', '        }', '    }', '', '    /**', '     * Constructs a ChromeTabbedActivity.', '     */', '    public ChromeTabbedActivity() {', '        mMainIntentMetrics = new MainIntentBehaviorMetrics();', '', '        // AppLaunchDrawBlocker may block drawing the Activity content until the initial tab is', '        // available.', '        // clang-format off', '        mAppLaunchDrawBlocker = new AppLaunchDrawBlocker(getLifecycleDispatcher(),', '                () -> findViewById(android.R.id.content),', '                this::getIntent, this::shouldIgnoreIntent, this::isTablet,', '                this::shouldShowOverviewPageOnStart);', '        // clang-format on', '    }', '', '    @Override', '    protected void onPreCreate() {', '        super.onPreCreate();', '        mMultiInstanceManager = MultiInstanceManager.create(this, getTabModelOrchestratorSupplier(),', '                getMultiWindowModeStateDispatcher(), getLifecycleDispatcher(),', '                getModalDialogManagerSupplier(), this);', '    }', '', '    @Override', '    protected @LaunchIntentDispatcher.Action int maybeDispatchLaunchIntent(', '            Intent intent, Bundle savedInstanceState) {', '        // Detect if incoming intent is a result of Chrome recreating itself. For now, restrict this', ""        // path to reparenting to ensure the launching logic isn't disrupted."", ""        // TODO(crbug.com/1065491): Unlock this codepath for all incoming intents once it's"", '        // confirmed working and stable.', '        if (savedInstanceState != null', '                && AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()) {', '            return LaunchIntentDispatcher.Action.CONTINUE;', '        }', '', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_MAIN.equals(intent.getAction())) {', '            // Call dispatchToTabbedActivity() for MAIN intents to activate proper multi-window', '            // TabbedActivity (i.e. if CTA2 is currently running and Chrome is started, CTA2', ""            // should be brought to front). Don't call dispatchToTabbedActivity() for non-MAIN"", '            // intents to avoid breaking cases where CTA is started explicitly (e.g. to handle', ""            // 'Move to other window' command from CTA2)."", '            return LaunchIntentDispatcher.dispatchToTabbedActivity(this, intent);', '        }', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(intent, DispatchedBy.ON_CREATE);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            return action;', '        }', '        return super.maybeDispatchLaunchIntent(intent, savedInstanceState);', '    }', '', '    // We know of at least one app that explicitly specifies .Main activity in custom tab', ""    // intents. The app shouldn't be doing that, but until it's updated, we need to support"", '    // such use case.', '    //', '    // This method attempts to treat VIEW intents explicitly sent to .Main as custom tab', '    // intents, and dispatch them accordingly. If the intent was not dispatched, the method', '    // returns Action.CONTINUE.', '    //', '    // The method also updates the supplied boolean histogram with the dispatching result,', '    // but only if the intent is a VIEW intent sent explicitly to .Main activity.', '    private @LaunchIntentDispatcher.Action int maybeDispatchExplicitMainViewIntent(', '            Intent intent, @DispatchedBy int dispatchedBy) {', ""        // The first check ensures that this is .Main activity alias (we can't check exactly, but"", '        // this gets us sufficiently close).', '        if (getClass().equals(ChromeTabbedActivity.class)', '                && Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getComponent() != null', '                && MAIN_LAUNCHER_ACTIVITY_NAME.equals(intent.getComponent().getClassName())) {', '            @LaunchIntentDispatcher.Action', '            int action = LaunchIntentDispatcher.dispatchToCustomTabActivity(this, intent);', '            switch (dispatchedBy) {', '                case DispatchedBy.ON_CREATE:', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnCreate"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                case DispatchedBy.ON_NEW_INTENT:', '', '                    RecordHistogram.recordBooleanHistogram(', '                            ""Android.MainActivity.ExplicitMainViewIntentDispatched.OnNewIntent"",', '                            action != LaunchIntentDispatcher.Action.CONTINUE);', '                    break;', '                default:', '                    assert false : ""Unknown dispatchedBy value "" + dispatchedBy;', '            }', '            if (action == LaunchIntentDispatcher.Action.CONTINUE) {', '                // Intent was not dispatched, record its source.', '                @IntentHandler.ExternalAppId', '                int externalId = IntentHandler.determineExternalIntentSource(intent);', '                RecordHistogram.recordEnumeratedHistogram(', '                        ""Android.MainActivity.UndispatchedExplicitMainViewIntentSource"", externalId,', '                        IntentHandler.ExternalAppId.NUM_ENTRIES);', '', ""                // Crash if intent came from us, but only in debug builds and only if we weren't"", ""                // explicitly told not to. Hopefully we'll get enough reports to find where"", '                // these intents come from.', '                if (externalId == IntentHandler.ExternalAppId.CHROME', '                        && 0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)', '                        && !CommandLine.getInstance().hasSwitch(', '                                ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS)) {', '                    String intentInfo = intent.toString();', '                    Bundle extras = intent.getExtras();', '                    if (extras != null) {', '                        intentInfo +=', '                                "", extras.keySet = ["" + TextUtils.join("", "", extras.keySet()) + ""]"";', '                    }', '                    String message = String.format((Locale) null,', '                            ""VIEW intent sent to .Main activity alias was not dispatched. PLEASE ""', '                                    + ""report the following info to crbug.com/789732: \\""%s\\"". Use ""', '                                    + ""--%s flag to disable this check."",', '                            intentInfo, ChromeSwitches.DONT_CRASH_ON_VIEW_MAIN_INTENTS);', '                    throw new IllegalStateException(message);', '                }', '            }', '            return action;', '        }', '        return LaunchIntentDispatcher.Action.CONTINUE;', '    }', '', '    @Override', '    public void initializeCompositor() {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeCompositor"");', '            super.initializeCompositor();', '', '            // LocaleManager can only function after the native library is loaded.', '            mLocaleManager = LocaleManager.getInstance();', '            mLocaleManager.setSettingsLauncher(SETTINGS_LAUNCHER);', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '', '            mTabModelOrchestrator.onNativeLibraryReady(getTabContentManager());', '', '            mTabModelObserver = new TabModelSelectorTabModelObserver(mTabModelSelector) {', '                @Override', '                public void didCloseTab(int tabId, boolean incognito) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                @Override', '                public void tabPendingClosure(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(true);', '                }', '', '                @Override', '                public void tabRemoved(Tab tab) {', '                    closeIfNoTabsAndHomepageEnabled(false);', '                }', '', '                private void closeIfNoTabsAndHomepageEnabled(boolean isPendingClosure) {', '                    if (getTabModelSelector().getTotalTabCount() == 0) {', '                        // If the last tab is closed, and homepage is enabled, then exit Chrome.', '                        if (HomepageManager.shouldCloseAppWithZeroTabs()) {', '                            finish();', '                        } else if (isPendingClosure) {', '                            NewTabPageUma.recordNTPImpression(', '                                    NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                        }', '                    }', '', '                    // TODO(960196) : remove this when the associated bug fix. This is a band-aid', '                    //  fix for TabGrid and closing tabs with TabGroupUi.', '                    //  If one of the following is true, then exit Chrome when TabGroupsAndroid is', '                    //  enabled, and tab switcher is not shown:', '                    //   1. If the very last tab is closed.', '                    //   2. If normal tab model is selected and no normal tabs.', '                    if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(ChromeTabbedActivity.this)', '                            && !mOverviewModeController.overviewVisible()) {', '                        if (getTabModelSelector().getTotalTabCount() == 0', '                                || (!getTabModelSelector().isIncognitoSelected()', '                                        && getTabModelSelector().getModel(false).getCount() == 0)) {', '                            finish();', '                        }', '                    }', '                }', '', '                @Override', '                public void didAddTab(', '                        Tab tab, @TabLaunchType int type, @TabCreationState int creationState) {', '                    if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                            && !DeviceClassManager.enableAnimations()) {', '                        Toast.makeText(ChromeTabbedActivity.this, R.string.open_in_new_tab_toast,', '                                     Toast.LENGTH_SHORT)', '                                .show();', '                    }', '                }', '', '                @Override', '                public void multipleTabsPendingClosure(List<Tab> tabs, boolean isAllTabs) {', '                    if (!isAllTabs) return;', '                    NewTabPageUma.recordNTPImpression(NewTabPageUma.NTP_IMPESSION_POTENTIAL_NOTAB);', '                }', '            };', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeCompositor"");', '        }', '    }', '', '    private void refreshSignIn() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.refreshSignIn"")) {', '            FirstRunSignInProcessor.start(this);', '        }', '    }', '', '    private void setupCompositorContentPreNativeForPhone() {', '        if (isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForPhone"")) {', '            CompositorViewHolder compositorViewHolder = getCompositorViewHolderSupplier().get();', '', '            // TODO(1169205): Remove all GTS enabled checks after M5 is default.', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {', '                TabManagementDelegate tabManagementDelegate =', '                        TabManagementModuleProvider.getDelegate();', '                if (tabManagementDelegate != null) {', '                    StartSurface startSurface = tabManagementDelegate.createStartSurface(this,', '                            mRootUiCoordinator.getScrimCoordinator(),', '                            mRootUiCoordinator.getBottomSheetController(), mStartSurfaceSupplier,', '                            mStartSurfaceParentTabSupplier, hadWarmStart(), getWindowAndroid(),', '                            compositorViewHolder, compositorViewHolder::getDynamicResourceLoader,', '                            getTabModelSelector(), getBrowserControlsManager(),', '                            getSnackbarManager(), getShareDelegateSupplier(),', '                            getToolbarManager()::getOmniboxStub, getTabContentManager(),', '                            getModalDialogManager(),', '                            /* chromeActivityNativeDelegate= */ this, getLifecycleDispatcher(),', '                            getTabCreatorManagerSupplier().get(),', '                            getMenuOrKeyboardActionController(),', '                            getMultiWindowModeStateDispatcher(), mJankTracker,', '                            getToolbarManager()::getToolbar);', '                }', '            }', '', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,', '                    mStartSurfaceSupplier.get(), getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPreNativeForTablet() {', '        if (!isTablet()) return;', '', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPreNativeForTablet"")) {', '            // clang-format off', '            mLayoutManager = new LayoutManagerChromeTablet(getCompositorViewHolderSupplier().get(),', '                    mContentContainer, getTabContentManagerSupplier(),', '                    () -> {', '                        if (!getCompositorViewHolderSupplier().hasValue()) return null;', '                        return getCompositorViewHolderSupplier().get().getLayerTitleCache();', '                    },', '                    mOverviewModeBehaviorSupplier,', '                    mRootUiCoordinator::getTopUiThemeColorProvider, mJankTracker);', '            mLayoutStateProviderOneshotSupplier.set(mLayoutManager);', '            // clang-format on', '            mOverviewModeController = mLayoutManager;', '        }', '    }', '', '    private void setupCompositorContentPostNative() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.setupCompositorContentPostNative"")) {', '            if (!isLayoutManagerCreated()) {', '                if (isTablet()) {', '                    setupCompositorContentPreNativeForTablet();', '                } else {', '                    setupCompositorContentPreNativeForPhone();', '                }', '            }', '', '            mLayoutManager.setEnableAnimations(DeviceClassManager.enableAnimations());', '', '            // TODO(yusufo): get rid of findViewById(R.id.url_bar).', '            initializeCompositorContent(mLayoutManager, findViewById(R.id.url_bar),', '                    mContentContainer, mControlContainer);', '        }', '    }', '', '    private boolean isLayoutManagerCreated() {', '        return mLayoutManager != null;', '    }', '', '    private void initializeToolbarManager() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initializeToolbarManager"")) {', '            mUndoBarPopupController.initialize();', '', '            OnClickListener tabSwitcherClickHandler = v -> {', '                if (ChromeFeatureList.isEnabled(ChromeFeatureList.TOOLBAR_IPH_ANDROID)) {', '                    Profile profile = mTabModelProfileSupplier.get();', '                    if (profile != null) {', '                        TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                EventConstants.TAB_SWITCHER_BUTTON_CLICKED);', '                    }', '                }', '', '                if (getFullscreenManager().getPersistentFullscreenMode()) {', '                    return;', '                }', '', '                if (isInOverviewMode()', '                        && !ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                    hideOverview();', '                } else {', '                    showOverview(StartSurfaceState.SHOWING_TABSWITCHER);', '                }', '            };', '            OnClickListener newTabClickHandler = v -> {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This assumes that the keyboard can not be seen at the same time as the', '                // newtab button on the toolbar.', '                getCurrentTabCreator().launchNTP();', '                mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);', '                if (getTabModelSelector().isIncognitoSelected()) {', '                    RecordUserAction.record(""MobileToolbarStackViewNewIncognitoTab"");', '                } else {', '                    RecordUserAction.record(""MobileToolbarStackViewNewTab"");', '                }', '                RecordUserAction.record(""MobileTopToolbarNewTabButton"");', '', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '            };', '            OnClickListener bookmarkClickHandler = v -> addOrEditBookmark(getActivityTab());', '', '            Supplier<Boolean> showStartSurfaceSupplier = () -> {', '                // If incognito is selected, tapping the home button stays on the current incognito', '                // tab.', '                if (ReturnToChromeExperimentsUtil.shouldShowStartSurfaceAsTheHomePageOnPhone(', '                            this, isTablet())', '                        && !mTabModelSelector.isIncognitoSelected()) {', '                    StartSurfaceUserData.setKeepTab(getActivityTab(), true);', '                    showOverview(StartSurfaceState.SHOWING_HOMEPAGE);', '                    return true;', '                }', '                return false;', '            };', '', '            getToolbarManager().initializeWithNative(mLayoutManager, tabSwitcherClickHandler,', '                    newTabClickHandler, bookmarkClickHandler, null, showStartSurfaceSupplier);', '', '            if (!TabUiFeatureUtilities.supportInstantStart(isTablet(), this)) {', '                assert !(mOverviewModeController != null', '                        && mOverviewModeController.overviewVisible());', '            }', '        }', '    }', '', '    private void maybeCreateIncognitoTabSnapshotController() {', '        try (TraceEvent e = TraceEvent.scoped(', '                     ""ChromeTabbedActivity.maybeCreateIncognitoTabSnapshotController"")) {', '            if (!CommandLine.getInstance().hasSwitch(', '                        ChromeSwitches.ENABLE_INCOGNITO_SNAPSHOTS_IN_ANDROID_RECENTS)) {', '                IncognitoTabSnapshotController.createIncognitoTabSnapshotController(', '                        this, getWindow(), mLayoutManager, mTabModelSelector);', '            }', '', '            mUIWithNativeInitialized = true;', '            onAccessibilityTabSwitcherModeChanged();', '', '            // The dataset has already been created, we need to initialize our state.', '            mTabModelSelector.notifyChanged();', '', '            // Check for incognito tabs to handle the case where Chrome was swiped away in the', '            // background.', '            if (!IncognitoTabHostUtils.doIncognitoTabsExist()) {', '                IncognitoNotificationManager.dismissIncognitoNotification();', '                DownloadNotificationService.getInstance().cancelOffTheRecordDownloads();', '            }', '        }', '    }', '', '    private void maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.""', '                     + ""maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver"")) {', '            FeedSurfaceTracker.getInstance().startup();', '', '            if (UsageStatsService.isEnabled()) {', '                UsageStatsService.getInstance().createPageViewObserver(', '                        this, getActivityTabProvider(), getTabContentManagerSupplier());', '            }', '        }', '    }', '', '    private void initJourneyManager() {', '        assert mOverviewModeController != null;', '', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.initJourneyManager"")) {', '            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TAB_ENGAGEMENT_REPORTING_ANDROID)) {', '                // The lifecycle of this object is managed by the lifecycle dispatcher.', '                new JourneyManager(getTabModelSelector(), getLifecycleDispatcher(),', '                        mOverviewModeController, new EngagementTimeUtil());', '            }', '        }', '    }', '', '    @Override', '    public void onNewIntent(Intent intent) {', ""        // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly"", '        // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,', '        // and not Chrome', '        Intent intentForDispatching = new Intent(intent);', '        intentForDispatching.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);', '        @LaunchIntentDispatcher.Action', '        int action = maybeDispatchExplicitMainViewIntent(', '                intentForDispatching, DispatchedBy.ON_NEW_INTENT);', '        if (action != LaunchIntentDispatcher.Action.CONTINUE) {', '            // Pressing back button in CCT should bring user to the caller activity.', '            moveTaskToBack(true);', '            // Intent was dispatched to CustomTabActivity, consume it.', '            return;', '        }', '', '        mIntentHandlingTimeMs = SystemClock.uptimeMillis();', '        super.onNewIntent(intent);', '    }', '', '    @Override', '    public void startNativeInitialization() {', '        try (TraceEvent e = TraceEvent.scoped(""ChromeTabbedActivity.startNativeInitialization"")) {', ""            // This is on the critical path so don't delay."", '            if (ChromeFeatureList.isEnabled(', '                        ChromeFeatureList.DARKEN_WEBSITES_CHECKBOX_IN_THEMES_SETTING)) {', '                WebContentsDarkModeController.createInstance();', '            }', '            setupCompositorContentPostNative();', '', ""            // All this initialization can be expensive so it's split into multiple tasks."", '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::refreshSignIn));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initializeToolbarManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeCreateIncognitoTabSnapshotController));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::onAccessibilityTabSwitcherModeChanged));', '', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(', '                            this::maybeGetFeedAppLifecycleAndMaybeCreatePageViewObserver));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::initJourneyManager));', '            PostTask.postTask(UiThreadTaskTraits.DEFAULT,', '                    mCallbackController.makeCancelable(this::finishNativeInitialization));', '            ChromeAccessibilityUtil.get().addObserver(this);', '        }', '    }', '', '    @Override', '    public void finishNativeInitialization() {', '        super.finishNativeInitialization();', '', '        // TODO(jinsukkim): Let these classes handle the registration by themselves.', '        mCompositorViewHolder = getCompositorViewHolderSupplier().get();', '        mOverviewListLayout = (OverviewListLayout) mLayoutManager.getOverviewListLayout();', '        getTabObscuringHandler().addObserver(mCompositorViewHolder);', '        getTabObscuringHandler().addObserver(mOverviewListLayout);', '', '        ChromeAccessibilityUtil.get().addObserver(mLayoutManager);', '        if (isTablet()) ChromeAccessibilityUtil.get().addObserver(mCompositorViewHolder);', '    }', '', '    @Override', '    public void onResumeWithNative() {', '        super.onResumeWithNative();', '', '        IncognitoStartup.onResumeWithNative(', '                getTabModelSelectorSupplier(), TABBED_MODE_COMPONENT_NAMES);', '', '        mLocaleManager.setSnackbarManager(getSnackbarManager());', '        mLocaleManager.startObservingPhoneChanges();', '', '        if (isWarmOnResume()) {', '            NavigationPredictorBridge.onActivityWarmResumed();', '        } else {', '            NavigationPredictorBridge.onColdStart();', '        }', '', '        // This call is not guarded by a feature flag.', '        SearchEngineChoiceNotification.handleSearchEngineChoice(', '                this, getSnackbarManager(), SETTINGS_LAUNCHER);', '', '        if (!isWarmOnResume()) {', '            SuggestionsMetrics.recordArticlesListVisible();', '        }', '    }', '', '    @Override', '    public void onPauseWithNative() {', '        mTabModelSelector.commitAllTabClosures();', '        CookiesFetcher.persistCookies();', '', '        mLocaleManager.setSnackbarManager(null);', '        mLocaleManager.stopObservingPhoneChanges();', '', '        NavigationPredictorBridge.onPause();', '', '        super.onPauseWithNative();', '    }', '', '    @Override', '    public void onStopWithNative() {', '        super.onStopWithNative();', '', '        mTabModelOrchestrator.saveState();', '        mHasDeterminedOverviewStateForCurrentSession = false;', '    }', '', '    @Override', '    public void onStartWithNative() {', '        mMainIntentMetrics.logLaunchBehavior();', '        super.onStartWithNative();', '', ""        // Don't call setInitialOverviewState if we're waiting for the tab's creation or we risk"", '        // showing a glimpse of the tab selector during start up.', '        if (!mPendingInitialTabCreation) {', '            setInitialOverviewState();', '        }', '', '        if (TabUiFeatureUtilities.isConditionalTabStripEnabled()', '                || ConditionalTabStripUtils.getOptOutIndicator()) {', '            ConditionalTabStripUtils.updateFeatureExpiration(', '                    mInactivityTracker.getLastBackgroundedTimeMs());', '        }', '', '        Bundle savedInstanceState = getSavedInstanceState();', '        if (savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false)) {', '            // This will be executed only once since SavedInstanceState will be reset a few lines', '            // later.', '            AndroidSessionDurationsServiceState.restoreNativeFromSerialized(savedInstanceState,', '                    getCurrentTabModel().getProfile().getPrimaryOTRProfile(', '                            /* createIfNeeded= */ true));', '        }', '', '        resetSavedInstanceState();', '        StartSurfaceConfiguration.addFeedVisibilityObserver();', '        BookmarkUtils.maybeExpireLastBookmarkLocationForReadLater(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    @Override', '    public void onNewIntentWithNative(Intent intent) {', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.onNewIntentWithNative"");', '', '            super.onNewIntentWithNative(intent);', '            if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                logMainIntentBehavior(intent);', '            }', '', '            if (CommandLine.getInstance().hasSwitch(ContentSwitches.ENABLE_TEST_INTENTS)) {', '                handleDebugIntent(intent);', '            }', '', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.onNewIntentWithNative"");', '        }', '    }', '', '    @Override', '    public @ActivityType int getActivityType() {', '        return ActivityType.TABBED;', '    }', '', '    @Override', '    public ChromeTabCreator getTabCreator(boolean incognito) {', '        return (ChromeTabCreator) super.getTabCreator(incognito);', '    }', '', '    @Override', '    public ChromeTabCreator getCurrentTabCreator() {', '        return (ChromeTabCreator) super.getCurrentTabCreator();', '    }', '', '    @Override', '    public OverviewModeBehavior getOverviewModeBehavior() {', '        return mOverviewModeController;', '    }', '', '    @Override', '    public @Nullable OneshotSupplier<OverviewModeBehavior> getOverviewModeBehaviorSupplier() {', '        return mOverviewModeBehaviorSupplier;', '    }', '', '    /**', '     * @return The toolbar button in-product help controller for this activity.', '     * TODO(pnoland, https://crbug.com/865801): remove this in favor', ""     *        of injecting the controller directly where it's needed."", '     */', '    public ToolbarButtonInProductHelpController getToolbarButtonInProductHelpController() {', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getToolbarButtonInProductHelpController();', '    }', '', '    private void handleDebugIntent(Intent intent) {', '        if (ACTION_CLOSE_TABS.equals(intent.getAction())) {', '            getTabModelSelector().closeAllTabs();', '        } else if (MemoryPressureListener.handleDebugIntent(', '                           ChromeTabbedActivity.this, intent.getAction())) {', '            // Handled.', '        }', '    }', '', '    private void setTrackColdStartupMetrics(boolean shouldTrackColdStartupMetrics) {', '        assert getActivityTabStartupMetricsTracker() != null;', '', '        if (shouldTrackColdStartupMetrics) {', '            getActivityTabStartupMetricsTracker().trackStartupMetrics(STARTUP_UMA_HISTOGRAM_SUFFIX);', '        } else {', '            getActivityTabStartupMetricsTracker().cancelTrackingStartupMetrics();', '        }', '', '        // Paint Preview should follow the same logic as startup UMA histograms as the feature', '        // should only run on cold startup of Chrome when the user is unable to interact before', '        // entering a tab.', '        StartupPaintPreviewHelper.setShouldShowOnRestore(shouldTrackColdStartupMetrics);', '    }', '', '    private void setInitialOverviewState() {', '        if (mHasDeterminedOverviewStateForCurrentSession) return;', '', '        mHasDeterminedOverviewStateForCurrentSession = true;', '        boolean isOverviewVisible = mOverviewModeController.overviewVisible();', '', '        if (shouldRefreshAndShowOverview(isOverviewVisible)) {', '            if (getCurrentTabModel() != null) {', '                RecordHistogram.recordCountHistogram(', '                        TAB_COUNT_ON_RETURN, getCurrentTabModel().getCount());', '            }', '            if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this) && !isTablet()) {', '                mStartSurfaceSupplier.get().getController().enableRecordingFirstMeaningfulPaint(', '                        getOnCreateTimestampMs());', '            }', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '            return;', '        }', '', '        if (getActivityTab() == null && !isOverviewVisible) {', '            mOverviewShownOnStart = true;', '            // Cancel recording cold startup metrics if an overview is shown as they expect a tab to', '            // be the first thing shown after startup.', '            setTrackColdStartupMetrics(false);', '            showOverview(StartSurfaceState.SHOWING_START);', '        }', '', '        if (IntentUtils.isMainIntentFromLauncher(getIntent())', '                && mOverviewModeController.overviewVisible()) {', '            RecordUserAction.record(""MobileStartup.UserEnteredTabSwitcher"");', '        }', '    }', '', '    private boolean shouldRefreshAndShowOverview(boolean isOverviewVisible) {', '        // If StartSurfaceConfiguration.NEW_SURFACE_FROM_HOME_BUTTON is turned on, MV tiles and', '        // carousels may be hidden before Chrome is brought to the background. If overview should be', '        // shown, no matter overview was already visible or not, we should call', '        // showOverview(StartSurfaceState.SHOWING_START) to show MV tiles and carousels again.', '        return shouldShowOverviewPageOnStart()', '                && (!isOverviewVisible', '                        || StartSurfaceConfiguration.shouldShowNewSurfaceFromHomeButton());', '    }', '', '    /**', '     * Returns whether grid Tab switcher or the Start surface should be shown at startup.', '     */', '    private boolean shouldShowOverviewPageOnStart() {', '        return ReturnToChromeExperimentsUtil.shouldShowOverviewPageOnStart(', '                this, getIntent(), getTabModelSelector(), mInactivityTracker);', '    }', '', '    private void logMainIntentBehavior(Intent intent) {', '        assert IntentUtils.isMainIntentFromLauncher(intent);', '        // TODO(tedchoc): We should cache the last visible time and reuse it to avoid different', '        //                values of this depending on when it is called after the activity was', '        //                shown.', '', '        // Temporary safety check to make sure none of this code runs if the feature is', '        // disabled.', '        if (ReengagementNotificationController.isEnabled()) {', '            if (mCallbackController != null) {', '                new OneShotCallback<>(', '                        mTabModelProfileSupplier, mCallbackController.makeCancelable(profile -> {', '                            assert profile != null : ""Unexpectedly null profile from TabModel."";', '                            if (profile == null) return;', '', '                            TrackerFactory.getTrackerForProfile(profile).notifyEvent(', '                                    EventConstants.STARTED_FROM_MAIN_INTENT);', '                        }));', '            }', '        }', '', '        mMainIntentMetrics.onMainIntentWithNative(', '                mInactivityTracker.getTimeSinceLastBackgroundedMs());', '    }', '', '    /** Access the main intent metrics for test validation. */', '    @VisibleForTesting', '    public MainIntentBehaviorMetrics getMainIntentBehaviorMetricsForTesting() {', '        return mMainIntentMetrics;', '    }', '', '    @VisibleForTesting', '    public ChromeInactivityTracker getInactivityTrackerForTesting() {', '        return mInactivityTracker;', '    }', '', '    @Override', '    public void initializeState() {', '        // This method goes through 3 steps:', ""        // 1. Load the saved tab state (but don't start restoring the tabs yet)."", '        // 2. Process the Intent that this activity received and if that should result in any', '        //    new tabs, create them.  This is done after step 1 so that the new tab gets', '        //    created after previous tab state was restored.', '        // 3. If no tabs were created in any of the above steps, create an NTP, otherwise', '        //    start asynchronous tab restore (loading the previously active tab synchronously', '        //    if no new tabs created in step 2).', '', '        // Only look at the original intent if this is not a ""restoration"" and we are allowed to', '        // process intents. Any subsequent intents are carried through onNewIntent.', '        try {', '            TraceEvent.begin(""ChromeTabbedActivity.initializeState"");', '', '            super.initializeState();', '            Log.i(TAG, ""#initializeState"");', '            Intent intent = getIntent();', '', '            boolean hadCipherData =', '                    CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());', '', '            boolean noRestoreState =', '                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);', '            if (noRestoreState) {', '                // Clear the state files because they are inconsistent and useless from now on.', '                mTabModelOrchestrator.clearState();', '            } else {', '                // State should be clear when we start first run and hence we do not need to load', '                // a previous state. This may change the current Model, watch out for initialization', '                // based on the model.', '                // Never attempt to restore incognito tabs when this activity was previously swiped', '                // away in Recents. http://crbug.com/626629', '                boolean ignoreIncognitoFiles = !hadCipherData;', '                mTabModelOrchestrator.loadState(ignoreIncognitoFiles);', '            }', '', '            mInactivityTracker.register(this.getLifecycleDispatcher());', '            boolean isIntentWithEffect = false;', '            boolean isMainIntentFromLauncher = false;', '            if (getSavedInstanceState() == null && intent != null) {', '                if (!shouldIgnoreIntent()) {', '                    isIntentWithEffect = mIntentHandler.onNewIntent(intent);', '                }', '', '                if (IntentUtils.isMainIntentFromLauncher(intent)) {', '                    isMainIntentFromLauncher = true;', '                    logMainIntentBehavior(intent);', '                }', '            }', '', '            mIntentMetadataOneshotSupplier.set(', '                    new ToolbarIntentMetadata(isMainIntentFromLauncher, isIntentWithEffect));', '', '            // If we have tabs to reparent and getSavedInstanceState() is non-null, then the tabs', '            // are coming from night mode tab reparenting. In this case, reparenting happens', '            // synchronously along with tab restoration so there are no tabs waiting for', '            // reparenting like there are for other tab reparenting operations.', '            boolean hasTabWaitingForReparenting =', '                    AsyncTabParamsManagerSingleton.getInstance().hasParamsWithTabToReparent()', '                    && getSavedInstanceState() == null;', '            mCreatedTabOnStartup = getCurrentTabModel().getCount() > 0', '                    || mTabModelOrchestrator.getRestoredTabCount() > 0 || isIntentWithEffect', '                    || hasTabWaitingForReparenting;', '', '            // We always need to try to restore tabs. The set of tabs might be empty, but at least', '            // it will trigger the notification that tab restore is complete which is needed by', '            // other parts of Chrome such as sync.', '            boolean activeTabBeingRestored = !isIntentWithEffect', '                    || (shouldShowOverviewPageOnStart()', '                            && !mTabModelSelector.isIncognitoSelected());', '', '            mTabModelOrchestrator.restoreTabs(activeTabBeingRestored);', '', '            // Only create an initial tab if no tabs were restored and no intent was handled.', '            // Also, check whether the active tab was supposed to be restored and that the total', '            // tab count is now non zero.  If this is not the case, tab restore failed and we need', '            // to create a new tab as well.', '            if (!mCreatedTabOnStartup', '                    || (!hasTabWaitingForReparenting && activeTabBeingRestored', '                            && getTabModelSelector().getTotalTabCount() == 0)) {', '                // If homepage URI is not determined, due to PartnerBrowserCustomizations provider', '                // async reading, then create a tab at the async reading finished. If it takes', '                // too long, just create NTP.', '', '                mPendingInitialTabCreation = true;', '                PartnerBrowserCustomizations.getInstance().setOnInitializeAsyncFinished(() -> {', '                    if (!isActivityFinishingOrDestroyed()) {', '                        createInitialTab();', '                    }', '                }, INITIAL_TAB_CREATION_TIMEOUT_MS);', '            }', '', '            // If initial tab creation is pending, this will instead be handled when we create the', '            // initial tab in #createInitialTab.', '            if (!mPendingInitialTabCreation) {', '                mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '            }', '        } finally {', '            TraceEvent.end(""ChromeTabbedActivity.initializeState"");', '        }', '    }', '', '    private boolean hasStartWithNativeBeenCalled() {', '        int activity_state = getLifecycleDispatcher().getCurrentActivityState();', '        return activity_state == ActivityLifecycleDispatcher.ActivityState.STARTED_WITH_NATIVE', '                || activity_state == ActivityLifecycleDispatcher.ActivityState.RESUMED_WITH_NATIVE;', '    }', '', '    /**', '     * Create an initial tab for cold start without restored tabs.', '     */', '    private void createInitialTab() {', '        Log.i(TAG, ""#createInitialTab executed."");', '        mPendingInitialTabCreation = false;', '', '        // If the start surface or grid tab switcher will be shown on start, do not create a new', '        // tab.', '        if (!shouldShowOverviewPageOnStart()) {', '            String url = HomepageManager.getHomepageUri();', '            if (TextUtils.isEmpty(url)) {', '                url = UrlConstants.NTP_URL;', '            } else {', '                // Migrate legacy NTP URLs (chrome://newtab) to the newer format', '                // (chrome-native://newtab)', '                if (UrlUtilities.isNTPUrl(url)) {', '                    url = UrlConstants.NTP_URL;', '                }', '            }', '', '            getTabCreator(false).launchUrl(url, TabLaunchType.FROM_STARTUP);', '        }', '', ""        // If we didn't call setInitialOverviewState() in onStartWithNative() because"", '        // mPendingInitialTabCreation was true then do so now.', '        if (hasStartWithNativeBeenCalled()) {', '            setInitialOverviewState();', '        }', '', '        mAppLaunchDrawBlocker.onActiveTabAvailable(isTabRegularNtp(getActivityTab()));', '    }', '', '    @Override', '    public void onAccessibilityModeChanged(boolean enabled) {', '        onAccessibilityTabSwitcherModeChanged();', '    }', '', '    private void onAccessibilityTabSwitcherModeChanged() {', '        if (!mUIWithNativeInitialized) return;', '', '        boolean accessibilityTabSwitcherEnabled =', '                DeviceClassManager.enableAccessibilityLayout(this);', '        if (mOverviewModeController != null && mOverviewModeController.overviewVisible()', '                && (mIsAccessibilityTabSwitcherEnabled == null', '                        || mIsAccessibilityTabSwitcherEnabled', '                                != DeviceClassManager.enableAccessibilityLayout(this))) {', '            /**', '             * If Start surface homepage is showing and launching NTP will show the Start surface', '             * again, skips the calls of hideOverview() and launchNTP(). We need to check', '             * {@link ReturnToChromeExperimentsUtil#shouldShowStartSurfaceHomeAsNTP(Context,', '             * boolean, boolean)} to see whether Start surface can be shown when accessibility is', '             * enabled.', '             */', '            if (mStartSurfaceSupplier.get() == null', '                    || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                            != StartSurfaceState.SHOWN_HOMEPAGE', '                    || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                            this, getCurrentTabModel().isIncognito(), isTablet())) {', '                mOverviewModeController.hideOverview(true);', '                if (getTabModelSelector().getCurrentModel().getCount() == 0) {', '                    getCurrentTabCreator().launchNTP();', '                }', '            }', '        }', '        mIsAccessibilityTabSwitcherEnabled = accessibilityTabSwitcherEnabled;', '', '        if (ChromeAccessibilityUtil.get().isAccessibilityEnabled()) {', '            RecordHistogram.recordBooleanHistogram(', '                    ""Accessibility.Android.TabSwitcherPreferenceEnabled"",', '                    mIsAccessibilityTabSwitcherEnabled);', '        }', '    }', '', '    /**', '     * Internal class which performs the intent handling operations delegated by IntentHandler.', '     */', '    private class InternalIntentDelegate implements IntentHandler.IntentHandlerDelegate {', '        /**', '         * Processes a url view intent.', '         *', '         * @param url The url from the intent.', '         */', '        @Override', '        public void processUrlViewIntent(LoadUrlParams loadUrlParams, @TabOpenType int tabOpenType,', '                String externalAppId, int tabIdToBringToFront, Intent intent) {', '            if (isActivityFinishingOrDestroyed()) {', '                return;', '            }', '            if (isFromChrome(intent, externalAppId)) {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromChrome"");', '            } else {', '                RecordUserAction.record(""MobileTabbedModeViewIntentFromApp"");', '            }', '', '            final String url = loadUrlParams.getUrl();', '            boolean fromLauncherShortcut = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false);', '            boolean fromAppWidget = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false);', '            boolean focus = false;', '', '            TabModel tabModel = getCurrentTabModel();', '            switch (tabOpenType) {', '                case TabOpenType.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:', '                    mTabModelOrchestrator.tryToRestoreTabStateForUrl(url);', '                    int tabToBeClobberedIndex = TabModelUtils.getTabIndexByUrl(tabModel, url);', '                    Tab tabToBeClobbered = tabModel.getTabAt(tabToBeClobberedIndex);', '                    if (tabToBeClobbered != null) {', '                        TabModelUtils.setIndex(tabModel, tabToBeClobberedIndex);', '                        tabToBeClobbered.reload();', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    int shortcutSource = intent.getIntExtra(', '                            WebappConstants.EXTRA_SOURCE, ShortcutSource.UNKNOWN);', '                    LaunchMetrics.recordHomeScreenLaunchIntoTab(url, shortcutSource);', '                    if (fromAppWidget && url.startsWith(UrlConstants.CHROME_DINO_URL)) {', '                        RecordUserAction.record(""QuickActionSearchWidget.StartDinoGame"");', '                    }', '                    break;', '                case TabOpenType.BRING_TAB_TO_FRONT:', '                    mTabModelOrchestrator.tryToRestoreTabStateForId(tabIdToBringToFront);', '', '                    int tabIndex = TabModelUtils.getTabIndexById(tabModel, tabIdToBringToFront);', '                    if (tabIndex == TabModel.INVALID_TAB_INDEX) {', '                        TabModel otherModel =', '                                getTabModelSelector().getModel(!tabModel.isIncognito());', '                        tabIndex = TabModelUtils.getTabIndexById(otherModel, tabIdToBringToFront);', '                        if (tabIndex != TabModel.INVALID_TAB_INDEX) {', '                            getTabModelSelector().selectModel(otherModel.isIncognito());', '                            TabModelUtils.setIndex(otherModel, tabIndex);', '                        } else {', '                            Log.e(TAG, ""Failed to bring tab to front because it doesn\'t exist."");', '                            return;', '                        }', '                    } else {', '                        TabModelUtils.setIndex(tabModel, tabIndex);', '                    }', '                    break;', '                case TabOpenType.CLOBBER_CURRENT_TAB:', '                    // The browser triggered the intent. This happens when clicking links which', '                    // can be handled by other applications (e.g. www.youtube.com links).', '                    Tab currentTab = getActivityTab();', '                    if (currentTab != null) {', '                        RedirectHandlerTabHelper.updateIntentInTab(currentTab, intent);', '                        currentTab.loadUrl(loadUrlParams);', '                    } else {', '                        launchIntent(loadUrlParams, externalAppId, true, intent);', '                    }', '                    break;', '                case TabOpenType.REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:', '                    launchIntent(loadUrlParams, externalAppId, false, intent);', '                    break;', '                case TabOpenType.REUSE_TAB_MATCHING_ID_ELSE_NEW_TAB:', '                    int tabId = IntentUtils.safeGetIntExtra(', '                            intent, TabOpenType.REUSE_TAB_MATCHING_ID_STRING, Tab.INVALID_TAB_ID);', '                    if (tabId != Tab.INVALID_TAB_ID) {', '                        mTabModelOrchestrator.tryToRestoreTabStateForId(tabId);', '                        int matchingTabIndex = TabModelUtils.getTabIndexById(tabModel, tabId);', '                        boolean loaded = false;', '                        if (matchingTabIndex != TabModel.INVALID_TAB_INDEX) {', '                            Tab tab = tabModel.getTabAt(matchingTabIndex);', '                            if (tab.getUrl().getSpec().equals(url)', '                                    || tab.getUrl().getSpec().equals(IntentUtils.safeGetStringExtra(', '                                            intent, TabOpenType.REUSE_TAB_ORIGINAL_URL_STRING))) {', '                                tabModel.setIndex(matchingTabIndex, TabSelectionType.FROM_USER);', '                                tab.loadUrl(loadUrlParams);', '                                loaded = true;', '                            }', '                        }', '                        if (!loaded) {', '                            launchIntent(loadUrlParams, externalAppId, false, intent);', '                        }', '                    }', '                    break;', '                case TabOpenType.OPEN_NEW_TAB:', '                    if (fromLauncherShortcut) {', '                        recordLauncherShortcutAction(false);', '                        reportNewTabShortcutUsed(false);', '                    }', '', '                    launchIntent(loadUrlParams, externalAppId, true, intent);', '                    break;', '                case TabOpenType.OPEN_NEW_INCOGNITO_TAB:', '                    if (!TextUtils.equals(externalAppId, getPackageName())) {', '                        assert false : ""Only Chrome is allowed to open incognito tabs"";', '                        Log.e(TAG, ""Only Chrome is allowed to open incognito tabs"");', '                        return;', '                    }', '', '                    if (!IncognitoUtils.isIncognitoModeEnabled()) {', '                        // The incognito launcher shortcut is manipulated in #onDeferredStartup(),', ""                        // so it's possible for a user to invoke the shortcut before it's disabled."", '                        // Quick actions search widget is installed on the home screen and may', '                        // need to be updated before the incognito button is removed.', '                        // Opening an incognito tab while incognito mode is disabled from somewhere', '                        // besides the launcher shortcut of from quick action search widget is an', '                        // error.', '                        if (fromAppWidget || fromLauncherShortcut) {', '                            // We are using the message introduced for quick action search widget', '                            // for both the widget and the launcher shortcut here.', '                            Toast.makeText(ChromeTabbedActivity.this,', '                                         R.string.quick_action_search_widget_message_no_incognito,', '                                         Toast.LENGTH_LONG)', '                                    .show();', '                        } else {', '                            assert false : ""Tried to open incognito tab while incognito disabled"";', '                            Log.e(TAG, ""Tried to open incognito tab while incognito disabled"");', '                        }', '', '                        return;', '                    }', '', '                    if (url == null || url.equals(UrlConstants.NTP_URL)) {', '                        if (fromLauncherShortcut) {', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);', '                            recordLauncherShortcutAction(true);', '                            reportNewTabShortcutUsed(true);', '                        } else if (fromAppWidget) {', '                            RecordUserAction.record(""QuickActionSearchWidget.StartIncognito"");', '                            getTabCreator(true).launchUrl(', '                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);', '                        } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);', '                            if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {', '                                // Since the Tab is created in the foreground, its View will gain', '                                // focus, and since the Tab and the URL bar are not yet in the same', ""                                // View hierarchy, setting the URL bar's focus here won't clear the"", ""                                // Tab's focus. When the Tab is added to the hierarchy, we want the"", ""                                // URL bar to retain focus, so we clear the Tab's focus here."", '                                tab.getView().clearFocus();', '                                focus = true;', '                            }', '', '                            IncognitoTabLauncher.recordUse();', '                        } else {', '                            // Used by the Account management screen to open a new incognito tab.', '                            // Account management screen collects its metrics separately.', '                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,', '                                    TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);', '                        }', '                    } else {', '                        @TabLaunchType', '                        Integer launchType = IntentHandler.getTabLaunchType(intent);', '                        if (launchType == null) launchType = TabLaunchType.FROM_LINK;', '                        getTabCreator(true).launchUrl(', '                                url, launchType, intent, mIntentHandlingTimeMs);', '                    }', '                    break;', '                default:', '                    assert false : ""Unknown TabOpenType: "" + tabOpenType;', '                    break;', '            }', '', '            getToolbarManager().setUrlBarFocusOnceNativeInitialized(focus,', '                    focus ? OmniboxFocusReason.LAUNCH_NEW_INCOGNITO_TAB', '                          : OmniboxFocusReason.UNFOCUS);', '', '            if (tabModel.getCount() > 0 && isInOverviewMode() && !isTablet()', '                    && !shouldShowOverviewPageOnStart()) {', '                mOverviewModeController.hideOverview(true);', '            }', '        }', '', '        @Override', '        public long getIntentHandlingTimeMs() {', '            return mIntentHandlingTimeMs;', '        }', '', '        @Override', '        public void processWebSearchIntent(String query) {', '            assert false;', '        }', '', '        @Override', '        public void processTranslateTabIntent(', '                @Nullable String targetLanguageCode, @Nullable String expectedUrl) {', '            TranslateIntentHandler.translateTab(getActivityTab(), targetLanguageCode, expectedUrl);', '        }', '', '        private boolean isFromChrome(Intent intent, String externalAppId) {', '            // To determine if the processed intent is from Chrome, check for any of the following:', '            // 1.) The authentication token that will be added to trusted intents.', '            // 2.) The app ID matches Chrome.  This value can be spoofed by other applications, but', '            //     in cases where we were not able to add the authentication token this is our only', '            //     indication the intent was from Chrome.', '            return IntentHandler.wasIntentSenderChrome(intent)', '                    || TextUtils.equals(externalAppId, getPackageName());', '        }', '    }', '', '    @Override', '    public void performPreInflationStartup() {', '        // Create JankTracker before invoking super, because the parent class will invoke', '        // createRootUiCoordinator(...), which in our case requires the JankTracker to already have', '        // been created.', '        mJankTracker = new JankTrackerImpl(this);', '', '        super.performPreInflationStartup();', '', '        // Decide whether to record startup UMA histograms. This is done  early in the main', '        // Activity.onCreate() to avoid recording navigation delays when they require user input to', '        // proceed. For example, FRE (First Run Experience) happens before the activity is created,', '        // and triggers initialization of the native library.', '        //', '        // An uninitialized native library is an indication of an application start that is followed', '        // by navigation immediately without user input.', '        if (!LibraryLoader.getInstance().isInitialized()) {', '            setTrackColdStartupMetrics(true);', '        }', '', '        supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);', '', '        IncognitoTabHostRegistry.getInstance().register(mIncognitoTabHost);', '', '        mStartupPaintPreviewHelperSupplier.attach(getWindowAndroid().getUnownedUserDataHost());', '    }', '', '    @Override', '    protected RootUiCoordinator createRootUiCoordinator() {', '        return new TabbedRootUiCoordinator(this, this::onOmniboxFocusChanged,', '                getShareDelegateSupplier(), getActivityTabProvider(), mTabModelProfileSupplier,', '                mBookmarkBridgeSupplier, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), mStartSurfaceSupplier,', '                mIntentMetadataOneshotSupplier, mLayoutStateProviderOneshotSupplier,', '                mStartSurfaceParentTabSupplier, getBrowserControlsManager(), getWindowAndroid(),', '                mJankTracker, getLifecycleDispatcher(), getLayoutManagerSupplier(),', '                /* menuOrKeyboardActionController= */ this, this::getActivityThemeColor,', '                getModalDialogManagerSupplier(), /* appMenuBlocker= */ this, this::supportsAppMenu,', '                this::supportsFindInPage, getTabCreatorManagerSupplier(), getFullscreenManager(),', '                getCompositorViewHolderSupplier(), getTabContentManagerSupplier(),', '                getOverviewModeBehaviorSupplier(), this::getSnackbarManager, getActivityType(),', '                this::isInOverviewMode, this::isWarmOnResume,', '                /* appMenuDelegate= */ this, /* statusBarColorProvider= */ this,', '                mEphemeralTabCoordinatorSupplier, getIntentRequestTracker(),', '                getControlContainerHeightResource(), this::getInsetObserverView,', '                this::backShouldCloseTab);', '    }', '', '    @Override', '    protected int getControlContainerLayoutId() {', '        return R.layout.control_container;', '    }', '', '    @Override', '    public int getControlContainerHeightResource() {', '        return R.dimen.control_container_height;', '    }', '', '    @Override', '    protected int getToolbarLayoutId() {', '        return isTablet() ? R.layout.toolbar_tablet : R.layout.toolbar_phone;', '    }', '', '    @Override', '    protected int getToolbarShadowResource() {', '        final boolean themeRefactorEnabled =', '                CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID);', '        return themeRefactorEnabled ? R.drawable.toolbar_hairline', '                                    : R.drawable.modern_toolbar_shadow;', '    }', '', '    @Override', '    protected int getToolbarShadowLayoutHeight() {', '        final int res = CachedFeatureFlags.isEnabled(ChromeFeatureList.THEME_REFACTOR_ANDROID)', '                ? R.dimen.toolbar_hairline_height', '                : R.dimen.toolbar_shadow_height;', '        return getResources().getDimensionPixelSize(res);', '    }', '', '    @Override', '    public void performPostInflationStartup() {', '        super.performPostInflationStartup();', '', '        FontPreloader.getInstance().onPostInflationStartupTabbedActivity();', '', '        TabModelSelector tabModelSelector = getTabModelSelector();', '        IncognitoProfileDestroyer.observeTabModelSelector(tabModelSelector);', '        IncognitoNotificationPresenceController.observeTabModelSelector(tabModelSelector);', '', '        // Critical path for startup. Create the minimum objects needed', '        // to allow a blank screen draw (without depending on any native code)', '        // and then yield ASAP.', '        if (isFinishing()) return;', '', ""        // Don't show the keyboard until user clicks in."", '        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN', '                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);', '', '        mContentContainer = (ViewGroup) findViewById(android.R.id.content);', '        mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);', '', '        Supplier<Boolean> dialogVisibilitySupplier = null;', '        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {', '            dialogVisibilitySupplier = () -> {', '                assert mStartSurfaceSupplier.get() != null;', '                assert getToolbarManager().getTabGroupUi() != null;', '                // Return true if dialog from either tab switcher or tab strip is visible.', '', '                ToolbarManager toolbarManager = getToolbarManager();', '                TabGroupUi tabGroupUi = toolbarManager.getTabGroupUi();', '                boolean isDialogVisible = tabGroupUi.isTabGridDialogVisible();', '', '                Supplier<Boolean> tabSwitcherDialogVisibilitySupplier =', '                        mStartSurfaceSupplier.get().getTabGridDialogVisibilitySupplier();', '', '                if (tabSwitcherDialogVisibilitySupplier != null) {', '                    isDialogVisible = isDialogVisible || tabSwitcherDialogVisibilitySupplier.get();', '                }', '                return isDialogVisible;', '            };', '        }', '', '        mUndoBarPopupController = new UndoBarController(this, mTabModelSelector,', '                this::getSnackbarManager, mOverviewModeBehaviorSupplier, dialogVisibilitySupplier);', '', '        mInactivityTracker = new ChromeInactivityTracker(', '                ChromePreferenceKeys.TABBED_ACTIVITY_LAST_BACKGROUNDED_TIME_MS_PREF);', '', '        assert getActivityTabStartupMetricsTracker() != null;', '        if (StartupPaintPreviewHelper.isEnabled()) {', '            StartupPaintPreviewHelper paintPreviewHelper = new StartupPaintPreviewHelper(', '                    getWindowAndroid(), getOnCreateTimestampMs(), getBrowserControlsManager(),', '                    getTabModelSelector(), shouldShowOverviewPageOnStart(), () -> {', '                        return getToolbarManager() == null', '                                ? null', '                                : getToolbarManager().getProgressBarCoordinator();', '                    });', '            mStartupPaintPreviewHelperSupplier.set(paintPreviewHelper);', '            getActivityTabStartupMetricsTracker().registerPaintPreviewObserver(paintPreviewHelper);', '        }', '    }', '', '    private boolean shouldIgnoreIntent() {', '        if (mShouldIgnoreIntent == null) {', '            // We call this only once because mIntentHandler#shouldIgnoreIntent has side effects.', '            mShouldIgnoreIntent =', '                    mIntentHandler.shouldIgnoreIntent(getIntent(), /*startedActivity=*/true);', '        }', '        return mShouldIgnoreIntent;', '    }', '', '    @Override', '    protected final void dispatchOnInflationComplete() {', '        super.dispatchOnInflationComplete();', '', '        // When the feature flag {@link ChromeFeatureList.INSTANT_START} turns on phones (not', '        // tablet), a view-only start page created on Java will be shown before native is', '        // initialized. The {@link prepareToShowStartPagePreNative()} is only called in a cold', '        // start.', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                && TabUiFeatureUtilities.supportInstantStart(isTablet(), this) && !hadWarmStart()) {', '            prepareToShowStartPagePreNative();', '        }', '    }', '', '    /**', '     * Prepares to show the start page before native is initialized. For example, create', '     * an LayoutManagerChrome object, add overview mode observer and so on.', '     */', '    private void prepareToShowStartPagePreNative() {', '        assert TabUiFeatureUtilities.supportInstantStart(isTablet() && !hadWarmStart(), this);', '        try (TraceEvent e =', '                        TraceEvent.scoped(""ChromeTabbedActivity.prepareToShowStartPagePreNative"")) {', '            setupCompositorContentPreNativeForPhone();', '            getCompositorViewHolderSupplier().get().setLayoutManager(mLayoutManager);', '', '            if (shouldShowOverviewPageOnStart()) {', '                mLayoutManager.setTabModelSelector(mTabModelSelector);', '                mIsAccessibilityTabSwitcherEnabled =', '                        DeviceClassManager.enableAccessibilityLayout(this);', '                assert !mHasDeterminedOverviewStateForCurrentSession;', '                setInitialOverviewState();', '            }', '        }', '    }', '', '    @Override', '    protected TabModelOrchestrator createTabModelOrchestrator() {', '        boolean tabMergingEnabled =', '                mMultiInstanceManager != null && mMultiInstanceManager.isTabModelMergingEnabled();', '        mTabModelOrchestrator = new TabbedModeTabModelOrchestrator(tabMergingEnabled);', '        return mTabModelOrchestrator;', '    }', '', '    @Override', '    protected void createTabModels() {', '        assert mTabModelSelector == null;', '        assert mWindowId != INVALID_WINDOW_ID;', '', '        Bundle savedInstanceState = getSavedInstanceState();', '', '        // We determine the model as soon as possible so every systems get initialized coherently.', '        boolean startIncognito = savedInstanceState != null', '                && savedInstanceState.getBoolean(IS_INCOGNITO_SELECTED, false);', '', '        mNextTabPolicySupplier = new ChromeNextTabPolicySupplier(mOverviewModeBehaviorSupplier);', '', '        boolean tabModelWasCreated = mTabModelOrchestrator.createTabModels(', '                this, this, mNextTabPolicySupplier, mWindowId);', '        if (!tabModelWasCreated) {', '            finish();', '            return;', '        }', '', '        if (mMultiInstanceManager != null) {', '            int assignedIndex = TabWindowManagerSingleton.getInstance().getIndexForWindow(this);', '            // The given index and the one computed by TabWindowManager should be one and the same.', '            assert !MultiWindowUtils.isMultiInstanceApi31Enabled() || assignedIndex == mWindowId;', '            mMultiInstanceManager.initialize(assignedIndex, getTaskId());', '        }', '', '        mTabModelSelector = mTabModelOrchestrator.getTabModelSelector();', '        mTabModelSelector.addObserver(new TabModelSelectorObserver() {', '            @Override', '            public void onTabStateInitialized() {', '                if (!mCreatedTabOnStartup) return;', '', '                TabModel model = mTabModelSelector.getModel(false);', '                TasksUma.recordTasksUma(model);', '            }', '        });', '', '        mTabModelSelectorTabObserver = new TabModelSelectorTabObserver(mTabModelSelector) {', '            @Override', '            public void onDidFinishNavigation(Tab tab, NavigationHandle navigation) {', '                if (!navigation.hasCommitted() || !navigation.isInPrimaryMainFrame()) {', '                    return;', '                }', '                DataReductionPromoInfoBar.maybeLaunchPromoInfoBar(ChromeTabbedActivity.this,', '                        tab.getWebContents(), navigation.getUrl(), tab.isShowingErrorPage(),', '                        navigation.isFragmentNavigation(), navigation.httpStatusCode());', '                if (SyncErrorPromptUtils.isMessageUiEnabled()) {', '                    SyncErrorMessage.maybeShowMessageUi(', '                            getWindowAndroid(), ChromeTabbedActivity.this);', '                } else {', '                    SyncErrorInfoBar.maybeLaunchSyncErrorInfoBar(tab.getWebContents());', '                }', '                SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());', '            }', '        };', '        mAppIndexingUtil = new AppIndexingUtil(mTabModelSelector);', '', '        if (startIncognito) mTabModelSelector.selectModel(true);', '    }', '', '    @Override', '    protected LaunchCauseMetrics createLaunchCauseMetrics() {', '        return new TabbedActivityLaunchCauseMetrics(this);', '    }', '', '    @Override', '    public AppMenuPropertiesDelegate createAppMenuPropertiesDelegate() {', '        return new TabbedAppMenuPropertiesDelegate(this, getActivityTabProvider(),', '                getMultiWindowModeStateDispatcher(), getTabModelSelector(), getToolbarManager(),', '                getWindow().getDecorView(), this, mOverviewModeBehaviorSupplier,', '                ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()', '                        ? mStartSurfaceSupplier', '                        : null,', '                mBookmarkBridgeSupplier,', '                ()', '                        -> getTabCreator(/*incognito=*/false)', '                                   .launchUrl(NewTabPageUtils.encodeNtpUrl(', '                                                      NewTabPageLaunchOrigin.WEB_FEED),', '                                           TabLaunchType.FROM_CHROME_UI),', '                getModalDialogManager(), getSnackbarManager());', '    }', '', '    private TabDelegateFactory getTabDelegateFactory() {', '        if (mTabDelegateFactory == null) {', '            mTabDelegateFactory = new TabbedModeTabDelegateFactory(this,', '                    getAppBrowserControlsVisibilityDelegate(), getShareDelegateSupplier(),', '                    mEphemeralTabCoordinatorSupplier,', '                    ((TabbedRootUiCoordinator) mRootUiCoordinator)::onContextMenuCopyLink,', '                    mRootUiCoordinator.getBottomSheetController(),', '                    /* ChromeActivityNativeDelegate */ this, /* isCustomTab= */ false,', '                    getBrowserControlsManager(), getFullscreenManager(),', '                    /* TabCreatorManager */ this, getTabModelSelectorSupplier(),', '                    getCompositorViewHolderSupplier(), getModalDialogManagerSupplier(),', '                    this::getSnackbarManager, getBrowserControlsManager(), getActivityTabProvider(),', '                    getLifecycleDispatcher(), getWindowAndroid(), this::getLastUserInteractionTime,', '                    this::hadWarmStart, mJankTracker, getToolbarManager()::getToolbar);', '        }', '        return mTabDelegateFactory;', '    }', '', '    @Override', '    protected Pair<ChromeTabCreator, ChromeTabCreator> createTabCreators() {', '        ChromeTabCreator.OverviewNTPCreator overviewNTPCreator = null;', '', '        if (ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '            overviewNTPCreator = new ChromeTabCreator.OverviewNTPCreator() {', '                @Override', '                public boolean handleCreateNTPIfNeeded(boolean isNTP, boolean incognito,', '                        Tab parentTab, @NewTabPageLaunchOrigin int launchOrigin) {', '                    boolean shouldShowStart =', '                            showStartSurfaceHomeForNTP(isNTP, incognito, parentTab, launchOrigin);', '                    if (shouldShowStart) {', '                        mStartSurfaceParentTabSupplier.set(parentTab);', '                    }', '                    return shouldShowStart;', '                }', '', '                @Override', '                public void preTabInitialization(Tab tab, String url) {', '                    StartSurfaceConfiguration.maySetUserDataForEmptyTab(tab, url);', '                }', '            };', '        }', '        return Pair.create(', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, false, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()),', '                new ChromeTabCreator(this, getWindowAndroid(), getStartupTabPreloader(),', '                        this::getTabDelegateFactory, true, overviewNTPCreator,', '                        AsyncTabParamsManagerSingleton.getInstance(), getTabModelSelectorSupplier(),', '                        getCompositorViewHolderSupplier()));', '    }', '', '    @Override', '    protected void initDeferredStartupForActivity() {', '        super.initDeferredStartupForActivity();', '        DeferredStartupHandler.getInstance().addDeferredTask(() -> {', '            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);', '            RecordHistogram.recordSparseHistogram(', '                    ""MemoryAndroid.DeviceMemoryClass"", am.getMemoryClass());', '', '            LauncherShortcutActivity.updateIncognitoShortcut(ChromeTabbedActivity.this);', '', '            ChromeSurveyController.initialize(mTabModelSelector, getLifecycleDispatcher(),', '                    ChromeTabbedActivity.this, MessageDispatcherProvider.from(getWindowAndroid()));', '', '            if (mStartSurfaceSupplier.get() != null) {', '                mStartSurfaceSupplier.get().onOverviewShownAtLaunch(', '                        mOverviewShownOnStart, getOnCreateTimestampMs());', '            }', '        });', '    }', '', '    @Override', '    protected void recordIntentToCreationTime(long timeMs) {', '        super.recordIntentToCreationTime(timeMs);', '        RecordHistogram.recordCustomTimesHistogram(""MobileStartup.IntentToCreationTime.TabbedMode"",', '                timeMs, 1, DateUtils.SECOND_IN_MILLIS * 30, 50);', '    }', '', '    @Override', '    protected boolean isStartedUpCorrectly(Intent intent) {', '        mWindowId = 0;', '        Bundle savedInstanceState = getSavedInstanceState();', '        int windowId = getExtraWindowIdFromIntent(intent);', '        if (savedInstanceState != null && savedInstanceState.containsKey(WINDOW_INDEX)) {', '            // Activity is recreated after destruction. |windowId| must not be valid in this case.', '            assert windowId == INVALID_WINDOW_ID;', '            mWindowId = savedInstanceState.getInt(WINDOW_INDEX, 0);', '        } else if (mMultiInstanceManager != null) {', ""            // |allocInstanceId| doesn't do any disk I/O that would add a long-running task"", '            // to pre-inflation startup.', '            boolean preferNew = getExtraPreferNewFromIntent(intent);', '            mWindowId = mMultiInstanceManager.allocInstanceId(windowId, getTaskId(), preferNew);', '        }', '        if (mWindowId == INVALID_WINDOW_ID) {', '            Log.i(TAG, ""Window ID not allocated. Finishing the activity"");', '            Toast.makeText(this, R.string.max_number_of_windows, Toast.LENGTH_LONG).show();', '            return false;', '        }', '', '        if (mMultiInstanceManager != null', '                && !mMultiInstanceManager.isStartedUpCorrectly(getTaskId())) {', '            return false;', '        }', '', '        return super.isStartedUpCorrectly(intent);', '    }', '', '    private static int getExtraWindowIdFromIntent(Intent intent) {', '        int windowId = IntentUtils.safeGetIntExtra(', '                intent, IntentHandler.EXTRA_WINDOW_ID, INVALID_WINDOW_ID);', '        return IntentUtils.isTrustedIntentFromSelf(intent) ? windowId : INVALID_WINDOW_ID;', '    }', '', '    private static boolean getExtraPreferNewFromIntent(Intent intent) {', '        return IntentUtils.safeGetBooleanExtra(intent, IntentHandler.EXTRA_PREFER_NEW, false);', '    }', '', '    @Override', '    public void terminateIncognitoSession() {', '        getTabModelSelector().getModel(true).closeAllTabs();', '    }', '', '    @Override', '    public boolean onMenuOrKeyboardAction(final int id, boolean fromMenu) {', '        final Tab currentTab = getActivityTab();', '        boolean currentTabIsNtp = isTabNtp(currentTab);', '        if (id == R.id.new_tab_menu_id) {', '            getTabModelSelector().getModel(false).commitAllTabClosures();', '            RecordUserAction.record(""MobileMenuNewTab"");', '            RecordUserAction.record(""MobileNewTabOpened"");', '            ReturnToChromeExperimentsUtil.onNewTabOpened();', '            reportNewTabShortcutUsed(false);', '            if (fromMenu) RecordUserAction.record(""MobileMenuNewTab.AppMenu"");', '', '            getTabCreator(false).launchNTP();', '', '            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);', '        } else if (id == R.id.new_incognito_tab_menu_id) {', '            if (IncognitoUtils.isIncognitoModeEnabled()) {', '                getTabModelSelector().getModel(false).commitAllTabClosures();', '                // This action must be recorded before opening the incognito tab since UMA actions', '                // are dropped when an incognito tab is open.', '                RecordUserAction.record(""MobileMenuNewIncognitoTab"");', '                RecordUserAction.record(""MobileNewTabOpened"");', '                ReturnToChromeExperimentsUtil.onNewTabOpened();', '                reportNewTabShortcutUsed(true);', '                if (fromMenu) RecordUserAction.record(""MobileMenuNewIncognitoTab.AppMenu"");', '                getTabCreator(true).launchNTP();', '            }', '        } else if (id == R.id.all_bookmarks_menu_id) {', ""            // Note that 'currentTab' could be null in overview mode when start surface is"", '            // enabled.', '            getCompositorViewHolderSupplier().get().hideKeyboard(() -> {', '                BookmarkUtils.showBookmarkManager(', '                        ChromeTabbedActivity.this, getCurrentTabModel().isIncognito());', '            });', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_BOOKMARKS_MANAGER);', '            }', '', '            @BrowserProfileType', '            int type = getCurrentTabModel().isIncognito() ? BrowserProfileType.INCOGNITO', '                                                          : BrowserProfileType.REGULAR;', '            RecordHistogram.recordEnumeratedHistogram(', '                    ""Bookmarks.OpenBookmarkManager.PerProfileType"", type,', '                    BrowserProfileType.MAX_VALUE + 1);', '', '            RecordUserAction.record(""MobileMenuAllBookmarks"");', '        } else if (id == R.id.recent_tabs_menu_id) {', '            LoadUrlParams params =', '                    new LoadUrlParams(UrlConstants.RECENT_TABS_URL, PageTransition.AUTO_BOOKMARK);', '            boolean isInOverviewMode = isInOverviewMode();', '            if (isInOverviewMode && !isTablet()', '                    && ReturnToChromeExperimentsUtil.isStartSurfaceHomepageEnabled()) {', '                // When tapping the ""Recent tabs"" menu item from the overview page (Start surface or', '                // GTS), we will create the tab with the launch type FROM_START_SURFACE. Thus, if', '                // the back button is tapped on this ""Recent tabs"" page, it can go back to the', '                // overview page.', '                ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurface(', '                        params, getCurrentTabModel().isIncognito(), null);', '            } else if (currentTab != null) {', '                currentTab.loadUrl(params);', '            } else {', '                getTabCreator(getCurrentTabModel().isIncognito())', '                        .createNewTab(params, TabLaunchType.FROM_CHROME_UI, null);', '            }', '            if (isInOverviewMode) {', '                mOverviewModeController.hideOverview(true);', '            }', '', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_RECENT_TABS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuRecentTabs"");', '            ReturnToChromeExperimentsUtil.onRecentTabsOpened();', '        } else if (id == R.id.close_tab) {', '            getCurrentTabModel().closeTab(currentTab, true, false, true);', '            RecordUserAction.record(""MobileTabClosed"");', '        } else if (id == R.id.close_all_tabs_menu_id) {', '            // Close both incognito and normal tabs', '            getTabModelSelector().closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllTabs"");', '        } else if (id == R.id.close_all_incognito_tabs_menu_id) {', '            // Close only incognito tabs', '            getTabModelSelector().getModel(true).closeAllTabs();', '            RecordUserAction.record(""MobileMenuCloseAllIncognitoTabs"");', '        } else if (id == R.id.focus_url_bar) {', '            boolean isUrlBarVisible = !mOverviewModeController.overviewVisible()', '                    && (!isTablet() || getCurrentTabModel().getCount() != 0);', '            if (isUrlBarVisible) {', '                getToolbarManager().setUrlBarFocus(', '                        true, OmniboxFocusReason.MENU_OR_KEYBOARD_ACTION);', '            }', '        } else if (id == R.id.downloads_menu_id) {', '            OTRProfileID otrProfileID = null;', '            if (currentTab != null && currentTab.getWebContents() != null) {', '                Profile profile = Profile.fromWebContents(currentTab.getWebContents());', '                otrProfileID = profile != null ? profile.getOTRProfileID() : null;', '            }', '            DownloadUtils.showDownloadManager(', '                    this, currentTab, otrProfileID, DownloadOpenSource.MENU);', '            if (currentTabIsNtp) {', '                NewTabPageUma.recordAction(NewTabPageUma.ACTION_OPENED_DOWNLOADS_MANAGER);', '            }', '            RecordUserAction.record(""MobileMenuDownloadManager"");', '        } else if (id == R.id.open_recently_closed_tab) {', '            TabModel currentModel = mTabModelSelector.getCurrentModel();', '            if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedTab();', '            RecordUserAction.record(""MobileTabClosedUndoShortCut"");', '        } else if (id == R.id.enter_vr_id) {', '            VrModuleProvider.getDelegate().enterVrIfNecessary();', '        } else {', '            return super.onMenuOrKeyboardAction(id, fromMenu);', '        }', '        return true;', '    }', '', '    private boolean isTabNtp(Tab tab) {', '        return tab != null && UrlUtilities.isNTPUrl(tab.getUrl());', '    }', '', '    private boolean isTabRegularNtp(Tab tab) {', '        return isTabNtp(tab) && !tab.isIncognito();', '    }', '', '    private void onOmniboxFocusChanged(boolean hasFocus) {', '        mTabModalHandler.onOmniboxFocusChanged(hasFocus);', '    }', '', '    private void recordLauncherShortcutAction(boolean isIncognito) {', '        if (isIncognito) {', '            RecordUserAction.record(""Android.LauncherShortcut.NewIncognitoTab"");', '        } else {', '            RecordUserAction.record(""Android.LauncherShortcut.NewTab"");', '        }', '    }', '', '    @Override', '    public boolean handleBackPressed() {', '        if (!mUIWithNativeInitialized) return false;', '', '        if (getManualFillingComponent().handleBackPress()) return true;', '', '        if (exitFullscreenIfShowing()) {', '            return true;', '        }', '', '        // TODO(1091411): Find a better mechanism for back-press handling for features.', '        if (mRootUiCoordinator.getBottomSheetController().handleBackPress()) return true;', '', '        if (mTabModalHandler.handleBackPress()) return true;', '', '        final Tab currentTab = getActivityTab();', '        if (currentTab == null) {', '            moveTaskToBack(true);', '            return true;', '        }', '', '        // If we are in the tab switcher mode (not in the Start surface homepage) and not a tablet,', '        // then leave tab switcher mode on back.', '        if (mOverviewModeController.overviewVisible() && !isTablet()', '                && (mStartSurfaceSupplier.get() == null', '                        || mStartSurfaceSupplier.get().getController().getStartSurfaceState()', '                                == StartSurfaceState.SHOWN_TABSWITCHER)) {', '            mOverviewModeController.hideOverview(true);', '            return true;', '        }', '', '        final WebContents webContents = currentTab.getWebContents();', '        if (webContents != null) {', '            RenderFrameHost focusedFrame = webContents.getFocusedFrame();', '            if (focusedFrame != null && focusedFrame.signalCloseWatcherIfActive()) return true;', '        }', '', '        if (getToolbarManager().back()) return true;', '', '        // If the current tab url is HELP_URL, then the back button should close the tab to', '        // get back to the previous state. The reason for startsWith check is that the', '        // actual redirected URL is a different system language based help url.', '        final @TabLaunchType int type = currentTab.getLaunchType();', '        final boolean helpUrl = currentTab.getUrl().getSpec().startsWith(HELP_URL_PREFIX);', '        if (type == TabLaunchType.FROM_CHROME_UI && helpUrl) {', '            getCurrentTabModel().closeTab(currentTab);', '            return true;', '        }', '', ""        // If we aren't in the overview mode, we handle the Tab with launchType"", '        // TabLaunchType.FROM_START_SURFACE or has ""OpenedFromStart"" property.', '        if (!mOverviewModeController.overviewVisible()', '                && (type == TabLaunchType.FROM_START_SURFACE', '                        || StartSurfaceUserData.isOpenedFromStart(currentTab))) {', '            if (StartSurfaceUserData.getKeepTab(currentTab)', '                    || StartSurfaceUserData.isOpenedFromStart(currentTab)) {', '                // If the current tab is created from the start surface with the keepTab property,', '                // shows the Start surface Homepage to prevent a loop between the current tab and', '                // previous overview mode. Once in the Start surface, it will close Chrome if back', '                // button is tapped again.', '                showOverview(StartSurfaceState.SHOWING_HOMEPAGE);']}, {'a': ['                if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                        && !StartSurfaceUserData.getKeepTab(currentTab)) {'], 'b': ['                if (type == TabLaunchType.FROM_LONGPRESS_BACKGROUND) {']}, {'ab': ['                    getCurrentTabModel().closeTab(currentTab);', '                }', '            } else {', '                // Otherwise, clicking the back button should close the tab and go back to the', '                // previous overview mode.', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS);', '                if (!currentTab.isClosing()) {', '                    getCurrentTabModel().closeTab(currentTab);', '                }', '            }', '            return true;', '        }', '', '        final boolean shouldCloseTab = backShouldCloseTab(currentTab);', '', '        // Minimize the app if either:', '        // - we decided not to close the tab', '        // - we decided to close the tab, but it was opened by an external app, so we will go', '        //   exit Chrome on top of closing the tab', '        final boolean minimizeApp =', '                !shouldCloseTab || TabAssociatedApp.isOpenedFromExternalApp(currentTab);', '        if (minimizeApp) {', '            if (shouldCloseTab) {', '                sendToBackground(currentTab);', '                return true;', '            } else {', '                sendToBackground(null);', '                return true;', '            }', '        } else if (shouldCloseTab) {', '            currentTab.getWebContents().dispatchBeforeUnload(false);', '            return true;', '        }', '', '        assert false : ""The back button should have already been handled by this point"";', '        return false;', '    }', '', '    /**', '     * [true]: Reached the bottom of the back stack on a tab the user did not explicitly', '     * create (i.e. it was created by an external app or opening a link in background, etc).', '     * [false]: Reached the bottom of the back stack on a tab that the user explicitly', '     * created (e.g. selecting ""new tab"" from menu).', '     *', '     * @return Whether pressing the back button on the provided Tab should close the Tab.', '     */', '    @Override', '    public boolean backShouldCloseTab(Tab tab) {', '        if (!tab.isInitialized()) {', '            return false;', '        }', '        @TabLaunchType', '        int type = tab.getLaunchType();', '', '        return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_EXTERNAL_APP', '                || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND', '                || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND', '                || (type == TabLaunchType.FROM_RESTORE', '                        && CriticalPersistedTabData.from(tab).getParentId() != Tab.INVALID_TAB_ID);', '    }', '', '    /**', '     * Sends this Activity to the background.', '     *', '     * @param tabToClose Tab that will be closed once the app is not visible.', '     */', '    private void sendToBackground(@Nullable final Tab tabToClose) {', '        Log.i(TAG, ""sendToBackground(): "" + tabToClose);', '        moveTaskToBack(true);', '        if (tabToClose != null) {', ""            // In the case of closing a tab upon minimization, don't allow the close action to"", ""            // happen until after our app is minimized to make sure we don't get a brief glimpse of"", '            // the newly active tab before we exit Chrome.', '            //', ""            // If the runnable doesn't run before the Activity dies, Chrome won't crash but the tab"", ""            // won't be closed (crbug.com/587565)."", '            mHandler.postDelayed(() -> {', '                boolean hasNextTab =', '                        getCurrentTabModel().getNextTabIfClosed(tabToClose.getId()) != null;', '                getCurrentTabModel().closeTab(tabToClose, false, true, false);', '', '                // If there is no next tab to open, enter overview mode.', '                if (!hasNextTab) showOverview(StartSurfaceState.SHOWING_START);', '            }, CLOSE_TAB_ON_MINIMIZE_DELAY_MS);', '        }', '    }', '', '    @Override', '    public boolean moveTaskToBack(boolean nonRoot) {', '        try {', '            return super.moveTaskToBack(nonRoot);', '        } catch (NullPointerException e) {', '            // Work around framework bug described in https://crbug.com/817567.', '            finish();', '            return true;', '        }', '    }', '', '    /**', '     * Launch a URL from an intent.', '     *', '     * @param url           The url from the intent.', '     * @param referer       Optional referer URL to be used.', '     * @param headers       Optional headers to be sent when opening the URL.', '     * @param externalAppId External app id.', '     * @param forceNewTab   Whether to force the URL to be launched in a new tab or to fall', '     *                      back to the default behavior for making that determination.', '     * @param isRendererInitiated Whether the intent is originally from browser renderer process.', '     * @param initiatorOrigin Origin that initiates the intent.', '     * @param intent        The original intent.', '     */', '    private Tab launchIntent(', '            LoadUrlParams loadUrlParams, String externalAppId, boolean forceNewTab, Intent intent) {', '        if (mUIWithNativeInitialized && !UrlUtilities.isNTPUrl(loadUrlParams.getUrl())) {', '            mOverviewModeController.hideOverview(false);', '            getToolbarManager().finishAnimations();', '        }', '        if (IntentHandler.wasIntentSenderChrome(intent)) {', '            // If the intent was launched by chrome, open the new tab in the appropriate model.', '            boolean isIncognito = IntentUtils.safeGetBooleanExtra(', '                    intent, IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB, false);', '            @TabLaunchType', '            Integer launchType = IntentHandler.getTabLaunchType(intent);', '            if (launchType == null) {', '                if (IntentUtils.safeGetBooleanExtra(', '                            intent, IntentHandler.EXTRA_INVOKED_FROM_SHORTCUT, false)) {', '                    launchType = TabLaunchType.FROM_LAUNCHER_SHORTCUT;', '                } else if (IntentUtils.safeGetBooleanExtra(', '                                   intent, IntentHandler.EXTRA_INVOKED_FROM_APP_WIDGET, false)) {', '                    launchType = TabLaunchType.FROM_APP_WIDGET;', '                } else if (IncognitoTabLauncher.didCreateIntent(intent)) {', '                    launchType = TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB;', '                } else {', '                    // Using FROM_LINK ensures the tab is parented to the current tab, which allows', '                    // the back button to close these tabs and restore selection to the previous', '                    // tab.', '                    launchType = TabLaunchType.FROM_LINK;', '                }', '            }', '            return getTabCreator(isIncognito).createNewTab(loadUrlParams, launchType, null, intent);', '        }', '', '        // Check if the tab is being created from a Reader Mode navigation.', '        if (ReaderModeManager.isEnabled() && ReaderModeManager.isReaderModeCreatedIntent(intent)) {', '            Bundle extras = intent.getExtras();', '            int readerParentId = IntentUtils.safeGetInt(', '                    extras, ReaderModeManager.EXTRA_READER_MODE_PARENT, Tab.INVALID_TAB_ID);', '            extras.remove(ReaderModeManager.EXTRA_READER_MODE_PARENT);', '            // Set the parent tab to the tab that Reader Mode started from.', '            if (readerParentId != Tab.INVALID_TAB_ID && mTabModelSelector != null) {', '                return getCurrentTabCreator().createNewTab(', '                        new LoadUrlParams(loadUrlParams.getUrl(), PageTransition.LINK),', '                        TabLaunchType.FROM_LINK, mTabModelSelector.getTabById(readerParentId));', '            }', '        }', '', '        return getTabCreator(false).launchUrlFromExternalApp(', '                loadUrlParams, externalAppId, forceNewTab, intent);', '    }', '', '    private void showOverview(@StartSurfaceState int state) {', '        showOverview(state, NewTabPageLaunchOrigin.UNKNOWN);', '    }', '', '    // TODO(crbug.com/1115757): After crrev.com/c/2315823, Overview state and Startsurface state are', '    // two different things, we actual can split this into two methods: showOverview() and', ""    // showStartSurface(state). Let's do some auditing and clean up before perform the actual split."", '    private void showOverview(', '            @StartSurfaceState int state, @NewTabPageLaunchOrigin int launchOrigin) {', '        assert (state == StartSurfaceState.SHOWING_TABSWITCHER', '                || state == StartSurfaceState.SHOWING_HOMEPAGE', '                || state == StartSurfaceState.SHOWING_PREVIOUS', '                || state == StartSurfaceState.SHOWING_START);', '        if (mIsAccessibilityTabSwitcherEnabled != null && mIsAccessibilityTabSwitcherEnabled', '                && mOverviewModeController != null) {', '            // TODO(1200727): This is a temporary fix that should be removed once grid tab switcher', '            //                is completely launched. The ""start surface"" is now created regardless', '            //                of the state of accessibility, so we check that mode first and try', '            //                showing the overview list before going to the start surface.', '            mOverviewModeController.showOverview(false);', '        } else if (mStartSurfaceSupplier.get() != null) {', '            if (ReturnToChromeExperimentsUtil.shouldHideStartSurfaceWithAccessibilityOn(this)', '                    || !HomepageManager.isHomepageEnabled()) {', '                state = StartSurfaceState.SHOWING_TABSWITCHER;', '            }', '            mStartSurfaceSupplier.get().getController().setOverviewState(state, launchOrigin);', '        }', '', '        if (mOverviewModeController == null) return;', '', '        if (mOverviewModeController.overviewVisible()) {', '            if (didFinishNativeInitialization()) {', '                getCompositorViewHolderSupplier().get().hideKeyboard(() -> {});', '            }', '            return;', '        }', '', '        Tab currentTab = getActivityTab();', ""        // If we don't have a current tab, show the overview mode."", '        if (currentTab == null) {', '            mOverviewModeController.showOverview(false);', '        } else {', '            getCompositorViewHolderSupplier().get().hideKeyboard(', '                    () -> mOverviewModeController.showOverview(true));', '            updateAccessibilityState(false);', '            TasksUma.recordTabLaunchType(getCurrentTabModel());', '        }', '    }', '', '    private void hideOverview() {', '        assert (mOverviewModeController.overviewVisible());', '        if (getCurrentTabModel().getCount() != 0) {', ""            // Don't hide overview if current tab stack is empty()"", '            mOverviewModeController.hideOverview(true);', '            updateAccessibilityState(true);', '        }', '    }', '', '    /**', '     * @return Whether opening a new tab is handled by the Start surface. It may show the Start', '     * surface, or open a new tab with the omnibox get focused, depending on the value of', '     * {@link StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB}.', '     */', '    private boolean showStartSurfaceHomeForNTP(boolean isNTP, boolean incognito, Tab parentTab,', '            @NewTabPageLaunchOrigin int launchOrigin) {', '        if (!isNTP', '                || !ReturnToChromeExperimentsUtil.shouldShowStartSurfaceHomeAsNTP(', '                        this, incognito, isTablet())) {', '            return false;', '        }', '', '        getTabModelSelector().selectModel(incognito);', '        if (StartSurfaceConfiguration.OMNIBOX_FOCUSED_ON_NEW_TAB.getValue()', '                && launchOrigin != NewTabPageLaunchOrigin.WEB_FEED) {', '            Runnable emptyTabCloseCallback = isInOverviewMode() ? () -> {', '                showOverview(StartSurfaceState.SHOWING_PREVIOUS, launchOrigin);', '            } : null;', '            ReturnToChromeExperimentsUtil.handleLoadUrlFromStartSurfaceAsNewTab(null,', '                    PageTransition.AUTO_TOPLEVEL, incognito, parentTab, getCurrentTabModel(),', '                    emptyTabCloseCallback);', '        } else if (TabUiFeatureUtilities.supportInstantStart(isTablet(), this)', '                || (getTabModelSelector().isTabStateInitialized() && isLayoutManagerCreated())) {', '            showOverview(StartSurfaceState.SHOWING_HOMEPAGE, launchOrigin);', '        }', '        return true;', '    }', '', '    private void updateAccessibilityState(boolean enabled) {', '        Tab currentTab = getActivityTab();', '        WebContents webContents = currentTab != null ? currentTab.getWebContents() : null;', '        if (webContents != null) {', '            WebContentsAccessibility.fromWebContents(webContents).setState(enabled);', '        }', '    }', '', '    @Override', '    public void onSaveInstanceState(Bundle outState) {', '        super.onSaveInstanceState(outState);', '        CipherFactory.getInstance().saveToBundle(outState);', '        outState.putInt(', '                WINDOW_INDEX, TabWindowManagerSingleton.getInstance().getIndexForWindow(this));', '        Boolean is_incognito = getCurrentTabModel().isIncognito();', '        outState.putBoolean(IS_INCOGNITO_SELECTED, is_incognito);', ""        // If it's Incognito and native is initialized and profile exists, serialize duration"", '        // service state.', '        if (is_incognito && ProfileManager.isInitialized()) {', '            AndroidSessionDurationsServiceState.serializeFromNative(', '                    outState, getCurrentTabModel().getProfile());', '        }', '    }', '', '    @Override', '    public void onDestroyInternal() {', '        if (mCallbackController != null) {', '            mCallbackController.destroy();', '            mCallbackController = null;', '        }', '', '        if (mTabModelSelectorTabObserver != null) {', '            mTabModelSelectorTabObserver.destroy();', '            mTabModelSelectorTabObserver = null;', '        }', '', '        if (mTabModelObserver != null) mTabModelObserver.destroy();', '', '        if (mUndoBarPopupController != null) {', '            mUndoBarPopupController.destroy();', '            mUndoBarPopupController = null;', '        }', '', '        if (mAppIndexingUtil != null) {', '            mAppIndexingUtil.destroy();', '            mAppIndexingUtil = null;', '        }', '', '        if (mStartSurfaceSupplier.get() != null) {', '            mStartSurfaceSupplier.get().destroy();', '        }', '', '        if (mStartupPaintPreviewHelperSupplier != null) {', '            mStartupPaintPreviewHelperSupplier.destroy();', '        }', '', '        if (mJankTracker != null) {', '            mJankTracker.destroy();', '            mJankTracker = null;', '        }', '', '        IncognitoTabHostRegistry.getInstance().unregister(mIncognitoTabHost);', '', '        TabObscuringHandler tabObscuringHandler = getTabObscuringHandler();', '        if (tabObscuringHandler != null) {', '            getTabObscuringHandler().removeObserver(mCompositorViewHolder);', '            getTabObscuringHandler().removeObserver(mOverviewListLayout);', '        }', '', '        if (isTablet()) ChromeAccessibilityUtil.get().removeObserver(mCompositorViewHolder);', '        ChromeAccessibilityUtil.get().removeObserver(this);', '        ChromeAccessibilityUtil.get().removeObserver(mLayoutManager);', '', '        if (mTabDelegateFactory != null) mTabDelegateFactory.destroy();', '', '        mAppLaunchDrawBlocker.destroy();', '', '        super.onDestroyInternal();', '    }', '', '    @Override', '    protected void destroyTabModels() {', '        if (mTabModelOrchestrator != null) {', '            mTabModelOrchestrator.destroy();', '        }', '    }', '', '    @Override', '    public void onTrimMemory(int level) {', '        super.onTrimMemory(level);', '        if (ChromeApplicationImpl.isSevereMemorySignal(level)) {', '            NativePageAssassin.getInstance().freezeAllHiddenPages();', '        }', '    }', '', '    @Override', '    public boolean dispatchKeyEvent(KeyEvent event) {', '        Boolean result = KeyboardShortcuts.dispatchKeyEvent(event, mUIWithNativeInitialized,', '                getFullscreenManager(), /* menuOrKeyboardActionController= */ this);', '        return result != null ? result : super.dispatchKeyEvent(event);', '    }', '', '    @Override', '    public boolean onKeyDown(int keyCode, KeyEvent event) {', '        if (!mUIWithNativeInitialized) {', '            return super.onKeyDown(keyCode, event);', '        }', '        // Detecting a long press of the back button via onLongPress is broken in Android N.', '        // To work around this, use a postDelayed, which is supported in all versions.', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()', '                && !getFullscreenManager().getPersistentFullscreenMode()) {', '            if (mShowHistoryRunnable == null) mShowHistoryRunnable = this::showFullHistorySheet;', '            mHandler.postDelayed(mShowHistoryRunnable, ViewConfiguration.getLongPressTimeout());', '            return super.onKeyDown(keyCode, event);', '        }', '        boolean isCurrentTabVisible = !mOverviewModeController.overviewVisible()', '                && (!isTablet() || getCurrentTabModel().getCount() != 0);', '        return KeyboardShortcuts.onKeyDown(event, isCurrentTabVisible, true, getTabModelSelector(),', '                       /* menuOrKeyboardActionController= */ this, getToolbarManager())', '                || super.onKeyDown(keyCode, event);', '    }', '', '    private void showFullHistorySheet() {', '        ((TabbedRootUiCoordinator) mRootUiCoordinator).showFullHistorySheet();', '    }', '', '    @Override', '    public boolean onKeyUp(int keyCode, KeyEvent event) {', '        if (keyCode == KeyEvent.KEYCODE_BACK && !isTablet()) {', '            mHandler.removeCallbacks(mShowHistoryRunnable);', '            mShowHistoryRunnable = null;', '            if (event.getEventTime() - event.getDownTime()', '                            >= ViewConfiguration.getLongPressTimeout()', '                    && NavigationSheet.isInstanceShowing(', '                            mRootUiCoordinator.getBottomSheetController())) {', '                // If tab history popup is showing, do not process the keyUp event', '                // which will dismiss it immediately.', '                return true;', '            }', '        }', '        return super.onKeyUp(keyCode, event);', '    }', '', '    @VisibleForTesting', '    public boolean hasPendingNavigationRunnableForTesting() {', '        ThreadUtils.assertOnUiThread();', '        return mShowHistoryRunnable != null;', '    }', '', '    @Override', '    public void onProvideKeyboardShortcuts(', '            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {', '        data.addAll(KeyboardShortcuts.createShortcutGroup(this));', '    }', '', '    @VisibleForTesting', '    public View getTabsView() {', '        return getCompositorViewHolderSupplier().get();', '    }', '', '    @VisibleForTesting', '    public LayoutManagerChrome getLayoutManager() {', '        return (LayoutManagerChrome) getCompositorViewHolderSupplier().get().getLayoutManager();', '    }', '', '    @VisibleForTesting', '    public Layout getOverviewListLayout() {', '        return getLayoutManager().getOverviewListLayout();', '    }', '', '    @VisibleForTesting', '    public StartSurface getStartSurface() {', '        return mStartSurfaceSupplier.get();', '    }', '', '    private ComposedBrowserControlsVisibilityDelegate getAppBrowserControlsVisibilityDelegate() {', '        // TODO(jinsukkim): Move this to RootUiCoordinator.', '        return ((TabbedRootUiCoordinator) mRootUiCoordinator)', '                .getAppBrowserControlsVisibilityDelegate();', '    }', '', '    @Override', '    protected ModalDialogManager createModalDialogManager() {', '        ModalDialogManager manager = super.createModalDialogManager();', '        // TODO(crbug.com/1157310): Transition this::method refs to dedicated suppliers.', '        mTabModalHandler = new TabModalLifetimeHandler(this, getLifecycleDispatcher(), manager,', '                this::getAppBrowserControlsVisibilityDelegate, this::getTabObscuringHandler,', '                this::getToolbarManager, this::getContextualSearchManager,', '                getTabModelSelectorSupplier(), this::getBrowserControlsManager,', '                this::getFullscreenManager);', '        return manager;', '    }', '', '    // App Menu related code -----------------------------------------------------------------------', '', '    @Override', '    public boolean canShowAppMenu() {', '        // The popup menu relies on the model created during the full UI initialization, so do not', '        // attempt to show the menu until the UI creation has finished.', '        if (!mUIWithNativeInitialized) return false;', '', ""        // If the current active tab is showing a tab modal dialog, an app menu shouldn't be shown"", '        // in any cases, e.g. when a hardware menu button is clicked.', '        Tab tab = getActivityTab();', '        if (tab != null && ChromeTabModalPresenter.isDialogShowing(tab)) return false;', '', '        return super.canShowAppMenu();', '    }', '', '    @Override', '    public boolean isInOverviewMode() {', '        return mOverviewModeController != null && mOverviewModeController.overviewVisible();', '    }', '', '    @Override', '    protected IntentHandlerDelegate createIntentHandlerDelegate() {', '        return new InternalIntentDelegate();', '    }', '', '    @Override', '    public void onSceneChange(Layout layout) {', '        super.onSceneChange(layout);', '        if (!layout.shouldDisplayContentOverlay()) mTabModelSelector.onTabsViewShown();', '    }', '', '    /**', '     * Writes the tab state to disk.', '     */', '    @VisibleForTesting', '    public void saveState() {', '        mTabModelOrchestrator.saveState();', '    }', '', '    @Override', '    public void onEnterVr() {', '        super.onEnterVr();', '        mControlContainer.setVisibility(View.INVISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate == null) {', '            mVrBrowserControlsVisibilityDelegate =', '                    new BrowserControlsVisibilityDelegate(BrowserControlsState.BOTH);', '            getAppBrowserControlsVisibilityDelegate().addDelegate(', '                    mVrBrowserControlsVisibilityDelegate);', '        }', '        mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.HIDDEN);', '    }', '', '    @Override', '    public void onExitVr() {', '        super.onExitVr();', '        mControlContainer.setVisibility(View.VISIBLE);', '        if (mVrBrowserControlsVisibilityDelegate != null) {', '            mVrBrowserControlsVisibilityDelegate.set(BrowserControlsState.BOTH);', '        }', '    }', '', '    @Override', '    protected void applyThemeOverlays() {', '        super.applyThemeOverlays();', '', '        if (TabManagementModuleProvider.getDelegate() != null) {', '            TabManagementModuleProvider.getDelegate().applyThemeOverlays(this);', '        }', '    }', '', '    @Override', '    protected boolean supportsDynamicColors() {', '        return CachedFeatureFlags.isEnabled(ChromeFeatureList.DYNAMIC_COLOR_ANDROID);', '    }', '', '    /**', '     * Reports that a new tab launcher shortcut was selected or an action equivalent to a shortcut', '     * was performed.', '     * @param isIncognito Whether the shortcut or action created a new incognito tab.', '     */', '    @TargetApi(Build.VERSION_CODES.N_MR1)', '    private void reportNewTabShortcutUsed(boolean isIncognito) {', '        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) return;', '', '        ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);', '        shortcutManager.reportShortcutUsed(', '                isIncognito ? ""new-incognito-tab-shortcut"" : ""new-tab-shortcut"");', '    }', '', '    @VisibleForTesting', '    public MultiInstanceManager getMultiInstanceMangerForTesting() {', '        return mMultiInstanceManager;', '    }', '', '    @VisibleForTesting', '    public ChromeNextTabPolicySupplier getNextTabPolicySupplier() {', '        return (ChromeNextTabPolicySupplier) mNextTabPolicySupplier;', '    }', '}', '']}]",chromium%2Fsrc~main~Ib8e4eafef2405d982bc64a050f47a12c26242ec2,18d923c044f261448f485740f8bb60731b5e9be5,chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java,343e0792_12916045_before.java,343e0792_12916045_after.java,ChromeTabbedActivity::handleBackPressed,True,True,"package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { VAR_352 ( VAR_368 ) ; VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } else { VAR_352 ( VAR_912 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_914 = VAR_679 ( VAR_604 ) ; final boolean VAR_915 = ! VAR_914 || VAR_916 ( VAR_604 ) ; if ( VAR_915 ) { if ( VAR_914 ) { VAR_917 ( VAR_604 ) ; return true ; } else { VAR_917 ( null ) ; return true ; } } else if ( VAR_914 ) { VAR_877 ( ) . VAR_918 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_919 ( ) ) { return false ; } int type = VAR_920 ( ) ; return type == VAR_640 || type == VAR_921 || type == VAR_922 || type == VAR_271 || ( type == VAR_923 && VAR_924 . from ( VAR_255 ) . VAR_925 ( ) != VAR_611 ) ; } private void VAR_917 ( Log . i ( TAG , STRING_68 + VAR_926 ) ; VAR_402 ( true ) ; if ( VAR_926 != null ) { VAR_927 ( ( ) - > { boolean VAR_928 = VAR_452 ( ) . VAR_929 ( VAR_926 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_926 , false , true , false ) ; if ( ! VAR_928 ) VAR_352 ( VAR_491 ) ; } , VAR_930 ) ; } } public boolean VAR_402 ( boolean VAR_931 ) { try { return super . VAR_402 ( VAR_931 ) ; } catch ( VAR_932 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_933 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_934 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_935 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_936 ( ) && VAR_937 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_938 ( ) ; int VAR_939 = VAR_940 ( VAR_221 , VAR_941 , VAR_611 ) ; VAR_221 . remove ( VAR_941 ) ; if ( VAR_939 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_942 ) , VAR_640 , VAR_943 ( VAR_939 ) ) ; } } return VAR_466 ( false ) . VAR_944 ( VAR_565 , VAR_566 , VAR_933 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_945 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_912 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_946 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_947 ( this ) || ! VAR_948 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_949 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_950 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_946 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_946 ( true ) ) ; VAR_951 ( false ) ; VAR_952 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_951 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_953 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_954 VAR_955 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_912 , VAR_810 ) ; } : null ; VAR_956 ( null , VAR_957 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_955 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_958 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_951 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_959 ( VAR_901 ) . VAR_960 ( VAR_549 ) ; } } public void VAR_961 ( VAR_446 VAR_962 ) { super . VAR_961 ( VAR_962 ) ; VAR_509 . getInstance ( ) . VAR_963 ( VAR_962 ) ; VAR_964 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_965 = VAR_452 ( ) . VAR_556 ( ) ; VAR_966 ( VAR_450 , VAR_965 ) ; if ( VAR_965 && VAR_967 ( ) ) { VAR_968 ( VAR_962 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_969 ( ) { if ( VAR_498 != null ) { VAR_970 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_971 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_972 ( ) ; if ( VAR_724 != null ) { VAR_973 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_974 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_975 ( ) ; } if ( VAR_731 != null ) { VAR_976 ( ) ; } if ( VAR_313 != null ) { VAR_977 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_978 ( VAR_660 ) ; VAR_979 VAR_980 = VAR_418 ( ) ; if ( VAR_980 != null ) { VAR_418 ( ) . VAR_981 ( VAR_414 ) ; VAR_418 ( ) . VAR_981 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_981 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_981 ( this ) ; VAR_412 . get ( ) . VAR_981 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_982 ( ) ; VAR_983 ( ) ; super . VAR_969 ( ) ; } protected void VAR_984 ( ) { if ( VAR_744 != null ) { VAR_985 ( ) ; } } public void VAR_986 ( int VAR_987 ) { super . VAR_986 ( VAR_987 ) ; if ( VAR_988 ( VAR_987 ) ) { VAR_989 . getInstance ( ) . VAR_990 ( ) ; } } public boolean VAR_991 ( VAR_992 event ) { Boolean result = VAR_993 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_991 ( event ) ; } public boolean VAR_994 ( int VAR_995 , VAR_992 event ) { if ( ! VAR_377 ) { return super . VAR_994 ( VAR_995 , event ) ; } if ( VAR_995 == VAR_996 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_997 == null ) VAR_997 = this : : VAR_998 ; VAR_927 ( VAR_997 , VAR_999 ( ) ) ; return super . VAR_994 ( VAR_995 , event ) ; } boolean VAR_1000 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1001 ( event , VAR_1000 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_994 ( VAR_995 , event ) ; } private void VAR_998 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_998 ( ) ; } public boolean VAR_1002 ( int VAR_995 , VAR_992 event ) { if ( VAR_995 == VAR_996 && ! VAR_286 ( ) ) { VAR_1003 ( VAR_997 ) ; VAR_997 = null ; if ( VAR_1004 ( ) - VAR_1005 ( ) >= VAR_999 ( ) && VAR_1006 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1002 ( VAR_995 , event ) ; } public boolean VAR_1007 ( ) { VAR_1008 ( ) ; return VAR_997 != null ; } public void VAR_1009 ( List < VAR_1010 > data , VAR_1011 VAR_1012 , int VAR_1013 ) { data . addAll ( VAR_1014 ( this ) ) ; } public View VAR_1015 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1016 VAR_1017 ( ) { return ( VAR_1016 ) VAR_289 ( ) . get ( ) . VAR_1017 ( ) ; } public VAR_1018 VAR_1019 ( ) { return VAR_1017 ( ) . VAR_1019 ( ) ; } public VAR_293 VAR_1020 ( ) { return VAR_298 . get ( ) ; } private VAR_1021 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1022 VAR_1023 ( ) { VAR_1022 VAR_1024 = super . VAR_1023 ( ) ; VAR_1025 = new VAR_1026 ( this , VAR_309 ( ) , VAR_1024 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1024 ; } public boolean VAR_1027 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1028 ( VAR_255 ) ) return false ; return super . VAR_1027 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1029 VAR_1030 ( ) { return new VAR_561 ( ) ; } public void VAR_1031 ( VAR_1018 VAR_1032 ) { super . VAR_1031 ( VAR_1032 ) ; if ( ! VAR_1033 ( ) ) VAR_1034 ( ) ; } public void VAR_1035 ( ) { VAR_436 ( ) ; } public void VAR_1036 ( ) { super . VAR_1036 ( ) ; VAR_1037 ( VAR_1038 ) ; if ( VAR_1039 == null ) { VAR_1039 = new VAR_1040 ( VAR_1041 ) ; VAR_799 ( ) . VAR_1042 ( VAR_1039 ) ; } VAR_1039 . set ( VAR_1043 ) ; } public void VAR_1044 ( ) { super . VAR_1044 ( ) ; VAR_1037 ( VAR_1045 ) ; if ( VAR_1039 != null ) { VAR_1039 . set ( VAR_1041 ) ; } } protected void VAR_1046 ( ) { super . VAR_1046 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1046 ( this ) ; } } protected boolean VAR_1047 ( ) { return VAR_688 ( VAR_1048 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1049 < VAR_1050 ) return ; VAR_1051 VAR_1052 = VAR_819 ( VAR_1053 class ) ; VAR_1054 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1055 VAR_1056 ( ) { return VAR_742 ; } public VAR_751 VAR_1057 ( ) { return ( VAR_751 ) VAR_750 ; } }","package VAR_1 ; import VAR_2 ; import VAR_3 ; import VAR_4 ; import VAR_5 . Context ; import VAR_6 ; import VAR_7 ; import VAR_8 ; import VAR_9 ; import VAR_10 ; import VAR_11 ; import VAR_12 ; import VAR_13 ; import VAR_14 . Pair ; import VAR_15 ; import VAR_16 ; import VAR_17 ; import VAR_18 . View ; import VAR_19 ; import VAR_20 ; import VAR_21 ; import VAR_22 ; import VAR_23 ; import VAR_24 ; import VAR_25 ; import VAR_26 ; import VAR_27 ; import VAR_28 ; import VAR_29 ; import VAR_30 ; import VAR_31 ; import VAR_32 ; import VAR_33 ; import VAR_34 . Log ; import VAR_35 ; import VAR_36 ; import VAR_37 ; import VAR_38 ; import VAR_39 ; import VAR_40 ; import VAR_41 ; import VAR_42 ; import VAR_43 ; import VAR_44 ; import VAR_45 ; import VAR_46 ; import VAR_47 ; import VAR_48 ; import VAR_49 ; import VAR_50 ; import VAR_51 . R ; import VAR_52 ; import VAR_53 ; import VAR_54 ; import VAR_55 ; import VAR_56 ; import VAR_57 ; import VAR_58 ; import VAR_59 ; import VAR_60 ; import VAR_61 ; import VAR_62 ; import VAR_63 ; import VAR_64 ; import VAR_65 ; import VAR_66 ; import VAR_67 ; import VAR_68 ; import VAR_69 ; import VAR_70 ; import VAR_71 ; import VAR_72 ; import VAR_73 ; import VAR_74 ; import VAR_75 ; import VAR_76 ; import VAR_77 ; import VAR_78 ; import VAR_79 ; import VAR_80 ; import VAR_81 ; import VAR_82 ; import VAR_83 ; import VAR_84 ; import VAR_85 ; import VAR_86 ; import VAR_87 ; import VAR_88 ; import VAR_89 ; import VAR_90 ; import VAR_91 ; import VAR_92 ; import VAR_93 ; import VAR_94 ; import VAR_95 ; import VAR_96 ; import VAR_97 ; import VAR_98 ; import VAR_99 ; import VAR_100 ; import VAR_101 ; import VAR_102 ; import VAR_103 ; import VAR_104 ; import VAR_105 ; import VAR_106 ; import VAR_107 ; import VAR_108 ; import VAR_109 ; import VAR_110 ; import VAR_111 ; import VAR_112 ; import VAR_113 ; import VAR_114 ; import VAR_115 ; import VAR_116 ; import VAR_117 ; import VAR_118 ; import VAR_119 ; import VAR_120 ; import VAR_121 ; import VAR_122 ; import VAR_123 ; import VAR_124 ; import VAR_125 ; import VAR_126 ; import VAR_127 ; import VAR_128 ; import VAR_129 ; import VAR_130 ; import VAR_131 ; import VAR_132 ; import VAR_133 ; import VAR_134 ; import VAR_135 ; import VAR_136 ; import VAR_137 ; import VAR_138 ; import VAR_139 ; import VAR_140 ; import VAR_141 ; import VAR_142 ; import VAR_143 ; import VAR_144 ; import VAR_145 ; import VAR_146 ; import VAR_147 ; import VAR_148 ; import VAR_149 ; import VAR_150 ; import VAR_151 ; import VAR_152 ; import VAR_153 ; import VAR_154 ; import VAR_155 ; import VAR_156 ; import VAR_157 ; import VAR_158 ; import VAR_159 ; import VAR_160 ; import VAR_161 ; import VAR_162 ; import VAR_163 ; import VAR_164 ; import VAR_165 ; import VAR_166 ; import VAR_167 ; import VAR_168 ; import VAR_169 ; import VAR_170 ; import VAR_171 ; import VAR_172 ; import VAR_173 ; import VAR_174 ; import VAR_175 ; import VAR_176 ; import VAR_177 ; import VAR_178 ; import VAR_179 ; import VAR_180 ; import VAR_181 ; import VAR_182 ; import VAR_183 ; import VAR_184 ; import VAR_185 ; import VAR_186 ; import VAR_187 ; import VAR_188 ; import VAR_189 ; import VAR_190 ; import VAR_191 ; import VAR_192 ; import VAR_193 ; import VAR_194 ; import VAR_195 ; import VAR_196 ; import VAR_197 ; import VAR_198 ; import VAR_199 ; import VAR_200 ; import VAR_201 ; import VAR_202 ; import VAR_203 . HashSet ; import VAR_203 . List ; import VAR_204 ; public class VAR_205 extends VAR_206 < VAR_207 > implements VAR_208 { private static final String TAG = STRING_1 ; private static final String VAR_209 = STRING_2 VAR_210 STRING_3 VAR_211 STRING_4 VAR_212 STRING_5 . VAR_213 STRING_6 VAR_214 STRING_7 VAR_215 STRING_8 VAR_216 STRING_9 VAR_217 STRING_10 VAR_218 VAR_219 value STRING_11 VAR_220 STRING_12 , VAR_221 . keySet = [ STRING_13 , STRING_14 ] STRING_15 VAR_222 VAR_223 VAR_224 VAR_225 VAR_226 VAR_227 VAR_228 VAR_229 VAR_230 STRING_16 VAR_231 the VAR_232 info to VAR_233 / INT_1 : STRING_17 + STRING_18 , VAR_234 , VAR_235 ) ; throw new IllegalStateException ( message ) ; } } return action ; } return VAR_236 ; } public void VAR_237 ( ) { try { VAR_238 ( STRING_19 ) ; super . VAR_237 ( ) ; VAR_239 = VAR_240 . getInstance ( ) ; VAR_241 ( VAR_242 ) ; VAR_243 ( this , null ) ; VAR_244 ( VAR_245 ( ) ) ; VAR_246 = new VAR_247 ( VAR_248 ) { public void VAR_249 ( int VAR_250 , boolean VAR_251 ) { VAR_252 ( false ) ; } public void VAR_253 ( VAR_254 VAR_255 ) { VAR_252 ( true ) ; } public void VAR_256 ( VAR_254 VAR_255 ) { VAR_252 ( false ) ; } private void VAR_252 ( boolean VAR_257 ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 ) { if ( VAR_260 ( ) ) { VAR_261 ( ) ; } else if ( VAR_257 ) { VAR_262 ( VAR_263 ) ; } } if ( VAR_264 ( VAR_265 this ) && ! VAR_266 ( ) ) { if ( VAR_258 ( ) . VAR_259 ( ) == 0 || ( ! VAR_258 ( ) . VAR_267 ( ) && VAR_258 ( ) . VAR_268 ( false ) . VAR_269 ( ) == 0 ) ) { VAR_261 ( ) ; } } } public void VAR_270 ( VAR_254 VAR_255 , if ( type == VAR_271 && ! VAR_272 ( ) ) { VAR_273 ( VAR_265 this , VAR_274 , VAR_275 ) . VAR_276 ( ) ; } } public void VAR_277 ( List < VAR_254 > VAR_278 , boolean VAR_279 ) { if ( ! VAR_279 ) return ; VAR_262 ( VAR_263 ) ; } } ; } finally { VAR_280 ( STRING_19 ) ; } } private void VAR_281 ( ) { try ( VAR_282 e = VAR_283 ( STRING_20 ) ) { VAR_284 . start ( this ) ; } } private void VAR_285 ( ) { if ( VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_21 ) ) { VAR_287 VAR_288 = VAR_289 ( ) . get ( ) ; if ( VAR_264 ( this ) ) { VAR_290 VAR_291 = VAR_292 ( ) ; if ( VAR_291 != null ) { VAR_293 VAR_294 = VAR_295 ( this , VAR_296 ( ) , VAR_297 ( ) , VAR_298 , VAR_299 , VAR_300 ( ) , VAR_301 ( ) , VAR_288 , VAR_288 : : VAR_302 , VAR_258 ( ) , VAR_303 ( ) , VAR_304 ( ) , VAR_305 ( ) , VAR_306 ( ) : : VAR_307 , VAR_245 ( ) , VAR_308 ( ) , this , VAR_309 ( ) , VAR_310 ( ) . get ( ) , VAR_311 ( ) , VAR_312 ( ) , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } } VAR_315 = new VAR_316 ( VAR_288 , VAR_317 , VAR_298 . get ( ) , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_326 ( ) { if ( ! VAR_286 ( ) ) return ; try ( VAR_282 e = VAR_283 ( STRING_22 ) ) { VAR_315 = new VAR_327 ( VAR_289 ( ) . get ( ) , VAR_317 , VAR_318 ( ) , ( ) - > { if ( ! VAR_289 ( ) . VAR_319 ( ) ) return null ; return VAR_289 ( ) . get ( ) . VAR_320 ( ) ; } , VAR_321 , VAR_322 : : VAR_323 , VAR_313 ) ; VAR_324 . set ( VAR_315 ) ; VAR_325 = VAR_315 ; } } private void VAR_328 ( ) { try ( VAR_282 e = VAR_283 ( STRING_23 ) ) { if ( ! VAR_329 ( ) ) { if ( VAR_286 ( ) ) { VAR_326 ( ) ; } else { VAR_285 ( ) ; } } VAR_330 ( VAR_272 ( ) ) ; VAR_331 ( VAR_315 , VAR_332 ( VAR_333 ) , VAR_317 , VAR_334 ) ; } } private boolean VAR_329 ( ) { return VAR_315 != null ; } private void VAR_335 ( ) { try ( VAR_282 e = VAR_283 ( STRING_24 ) ) { VAR_336 ( ) ; VAR_337 VAR_338 = v - > { if ( VAR_339 ( VAR_340 ) ) { VAR_341 VAR_342 = VAR_343 . get ( ) ; if ( VAR_342 != null ) { VAR_344 ( VAR_342 ) . VAR_345 ( VAR_346 ) ; } } if ( VAR_347 ( ) . VAR_348 ( ) ) { return ; } if ( VAR_349 ( ) && ! VAR_350 ( ) ) { VAR_351 ( ) ; } else { VAR_352 ( VAR_353 ) ; } } ; VAR_337 VAR_354 = v - > { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_356 ( ) . VAR_357 ( ) ; VAR_243 ( VAR_265 this , null ) ; if ( VAR_258 ( ) . VAR_267 ( ) ) { VAR_358 . record ( STRING_25 ) ; } else { VAR_358 . record ( STRING_26 ) ; } VAR_358 . record ( STRING_27 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; } ; VAR_337 VAR_360 = v - > VAR_361 ( VAR_362 ( ) ) ; VAR_363 < Boolean > VAR_364 = ( ) - > { if ( VAR_365 ( this , VAR_286 ( ) ) && ! VAR_366 ( ) ) { VAR_367 ( VAR_362 ( ) , true ) ; VAR_352 ( VAR_368 ) ; return true ; } return false ; } ; VAR_306 ( ) . VAR_369 ( VAR_315 , VAR_338 , VAR_354 , VAR_360 , null , VAR_364 ) ; if ( ! VAR_370 ( VAR_286 ( ) , this ) ) { assert ! ( VAR_325 != null && VAR_266 ( ) ) ; } } } private void VAR_371 ( ) { try ( VAR_282 e = VAR_283 ( STRING_29 ) ) { if ( ! VAR_372 . getInstance ( ) . VAR_373 ( VAR_374 ) ) { VAR_375 ( this , VAR_376 ( ) , VAR_315 , VAR_248 ) ; } VAR_377 = true ; VAR_378 ( ) ; VAR_379 ( ) ; if ( ! VAR_380 ( ) ) { VAR_381 ( ) ; VAR_382 . getInstance ( ) . VAR_383 ( ) ; } } } private void VAR_384 ( ) { try ( VAR_282 e = VAR_283 ( STRING_30 + STRING_31 ) ) { VAR_385 . getInstance ( ) . VAR_386 ( ) ; if ( VAR_387 ( ) ) { VAR_388 . getInstance ( ) . VAR_389 ( this , VAR_390 ( ) , VAR_318 ( ) ) ; } } } private void VAR_391 ( ) { assert VAR_325 != null ; try ( VAR_282 e = VAR_283 ( STRING_32 ) ) { if ( VAR_339 ( VAR_392 ) ) { new VAR_393 ( VAR_258 ( ) , VAR_309 ( ) , VAR_325 , new VAR_394 ( ) ) ; } } } public void VAR_395 ( VAR_396 VAR_223 ) { VAR_396 VAR_397 = new VAR_396 ( VAR_223 ) ; VAR_398 ( VAR_399 ) ; int action = VAR_400 ( VAR_397 , VAR_401 ) ; if ( action != VAR_236 ) { VAR_402 ( true ) ; return ; } VAR_403 = VAR_404 ( ) ; super . VAR_395 ( VAR_223 ) ; } public void VAR_405 ( ) { try ( VAR_282 e = VAR_283 ( STRING_33 ) ) { if ( VAR_339 ( VAR_406 ) ) { VAR_407 ( ) ; } VAR_328 ( ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_281 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_335 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_371 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_378 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_384 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_391 ) ) ; VAR_408 ( VAR_409 , VAR_410 ( this : : VAR_411 ) ) ; VAR_412 . get ( ) . VAR_413 ( this ) ; } } public void VAR_411 ( ) { super . VAR_411 ( ) ; VAR_414 = VAR_289 ( ) . get ( ) ; VAR_415 = ( VAR_416 ) VAR_417 ( ) ; VAR_418 ( ) . VAR_413 ( VAR_414 ) ; VAR_418 ( ) . VAR_413 ( VAR_415 ) ; VAR_412 . get ( ) . VAR_413 ( VAR_315 ) ; if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_413 ( VAR_414 ) ; } public void VAR_419 ( ) { super . VAR_419 ( ) ; VAR_420 ( VAR_421 ( ) , VAR_422 ) ; VAR_423 ( VAR_304 ( ) ) ; VAR_424 ( ) ; if ( VAR_425 ( ) ) { VAR_426 ( ) ; } else { VAR_427 ( ) ; } VAR_428 ( this , VAR_304 ( ) , VAR_242 ) ; if ( ! VAR_425 ( ) ) { VAR_429 ( ) ; } } public void VAR_430 ( ) { VAR_431 ( ) ; VAR_432 ( ) ; VAR_423 ( null ) ; VAR_433 ( ) ; VAR_434 ( ) ; super . VAR_430 ( ) ; } public void VAR_435 ( ) { super . VAR_435 ( ) ; VAR_436 ( ) ; VAR_437 = false ; } public void VAR_438 ( ) { VAR_439 ( ) ; super . VAR_438 ( ) ; if ( ! VAR_440 ) { VAR_441 ( ) ; } if ( VAR_442 ( ) || VAR_443 ( ) ) { VAR_444 ( VAR_445 ( ) ) ; } VAR_446 VAR_447 = VAR_448 ( ) ; if ( VAR_447 != null && VAR_449 ( VAR_450 , false ) ) { VAR_451 ( VAR_447 , VAR_452 ( ) . VAR_453 ( ) . VAR_454 ( true ) ) ; } VAR_455 ( ) ; VAR_456 ( ) ; VAR_457 ( VAR_458 ( ) ) ; } public void VAR_459 ( VAR_396 VAR_223 ) { try { VAR_238 ( STRING_34 ) ; super . VAR_459 ( VAR_223 ) ; if ( VAR_460 ( VAR_223 ) ) { VAR_461 ( VAR_223 ) ; } if ( VAR_372 . getInstance ( ) . VAR_373 ( VAR_462 ) ) { VAR_463 ( VAR_223 ) ; } } finally { VAR_280 ( STRING_34 ) ; } } public return VAR_464 ; } public VAR_465 VAR_466 ( boolean VAR_251 ) { return ( VAR_465 ) super . VAR_466 ( VAR_251 ) ; } public VAR_465 VAR_356 ( ) { return ( VAR_465 ) super . VAR_356 ( ) ; } public VAR_467 VAR_468 ( ) { return VAR_325 ; } public return VAR_321 ; } public VAR_469 VAR_470 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_470 ( ) ; } private void VAR_463 ( VAR_396 VAR_223 ) { if ( VAR_472 . equals ( VAR_473 ( ) ) ) { VAR_258 ( ) . VAR_474 ( ) ; } else if ( VAR_475 ( VAR_265 this , VAR_473 ( ) ) ) { } } private void VAR_476 ( boolean VAR_477 ) { assert VAR_478 ( ) != null ; if ( VAR_477 ) { VAR_478 ( ) . VAR_479 ( VAR_480 ) ; } else { VAR_478 ( ) . VAR_481 ( ) ; } VAR_482 ( VAR_477 ) ; } private void VAR_441 ( ) { if ( VAR_437 ) return ; VAR_437 = true ; boolean VAR_483 = VAR_266 ( ) ; if ( VAR_484 ( VAR_483 ) ) { if ( VAR_452 ( ) != null ) { VAR_485 ( VAR_486 , VAR_452 ( ) . VAR_269 ( ) ) ; } if ( VAR_264 ( this ) && ! VAR_286 ( ) ) { VAR_298 . get ( ) . VAR_487 ( ) . VAR_488 ( VAR_489 ( ) ) ; } VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; return ; } if ( VAR_362 ( ) == null && ! VAR_483 ) { VAR_490 = true ; VAR_476 ( false ) ; VAR_352 ( VAR_491 ) ; } if ( VAR_460 ( VAR_492 ( ) ) && VAR_266 ( ) ) { VAR_358 . record ( STRING_35 ) ; } } private boolean VAR_484 ( boolean VAR_483 ) { return VAR_493 ( ) && ( ! VAR_483 || VAR_494 ( ) ) ; } private boolean VAR_493 ( ) { return VAR_495 ( this , VAR_492 ( ) , VAR_258 ( ) , VAR_496 ) ; } private void VAR_461 ( VAR_396 VAR_223 ) { assert VAR_460 ( VAR_223 ) ; if ( VAR_497 ( ) ) { if ( VAR_498 != null ) { new VAR_499 < > ( VAR_343 , VAR_410 ( VAR_342 - > { assert VAR_342 != null : STRING_36 ; if ( VAR_342 == null ) return ; VAR_344 ( VAR_342 ) . VAR_345 ( VAR_500 ) ; } ) ) ; } } VAR_501 ( VAR_458 ( ) ) ; } public VAR_502 VAR_503 ( ) { return VAR_504 ; } public VAR_505 VAR_506 ( ) { return VAR_496 ; } public void VAR_507 ( ) { try { VAR_238 ( STRING_37 ) ; super . VAR_507 ( ) ; Log . i ( TAG , STRING_38 ) ; VAR_396 VAR_223 = VAR_492 ( ) ; boolean VAR_508 = VAR_509 . getInstance ( ) . VAR_510 ( VAR_448 ( ) ) ; boolean VAR_511 = VAR_372 . getInstance ( ) . VAR_373 ( VAR_512 ) ; if ( VAR_511 ) { VAR_513 ( ) ; } else { boolean VAR_514 = ! VAR_508 ; VAR_515 ( VAR_514 ) ; } VAR_516 ( this . VAR_309 ( ) ) ; boolean VAR_517 = false ; boolean VAR_518 = false ; if ( VAR_448 ( ) == null && VAR_223 != null ) { if ( ! VAR_519 ( ) ) { VAR_517 = VAR_520 ( VAR_223 ) ; } if ( VAR_460 ( VAR_223 ) ) { VAR_518 = true ; VAR_461 ( VAR_223 ) ; } } VAR_521 . set ( new VAR_522 ( VAR_518 , VAR_517 ) ) ; boolean VAR_523 = VAR_524 . getInstance ( ) . VAR_525 ( ) && VAR_448 ( ) == null ; VAR_526 = VAR_452 ( ) . VAR_269 ( ) > 0 || VAR_527 ( ) > 0 || VAR_517 || VAR_523 ; boolean VAR_528 = ! VAR_517 || ( VAR_493 ( ) && ! VAR_366 ( ) ) ; VAR_529 ( VAR_528 ) ; if ( ! VAR_526 || ( ! VAR_523 && VAR_528 && VAR_258 ( ) . VAR_259 ( ) == 0 ) ) { VAR_440 = true ; VAR_530 . getInstance ( ) . VAR_531 ( ( ) - > { if ( ! VAR_532 ( ) ) { VAR_533 ( ) ; } } , VAR_534 ) ; } if ( ! VAR_440 ) { VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } } finally { VAR_280 ( STRING_37 ) ; } } private boolean VAR_537 ( ) { int VAR_538 = VAR_309 ( ) . VAR_539 ( ) ; return VAR_538 == VAR_540 || VAR_538 == VAR_541 ; } private void VAR_533 ( ) { Log . i ( TAG , STRING_39 ) ; VAR_440 = false ; if ( ! VAR_493 ( ) ) { String url = VAR_542 ( ) ; if ( VAR_543 . isEmpty ( url ) ) { url = VAR_544 ; } else { if ( VAR_545 ( url ) ) { url = VAR_544 ; } } VAR_466 ( false ) . VAR_546 ( url , VAR_547 ) ; } if ( VAR_537 ( ) ) { VAR_441 ( ) ; } VAR_535 ( VAR_536 ( VAR_362 ( ) ) ) ; } public void VAR_548 ( boolean VAR_549 ) { VAR_378 ( ) ; } private void VAR_378 ( ) { if ( ! VAR_377 ) return ; boolean VAR_550 = VAR_551 ( this ) ; if ( VAR_325 != null && VAR_266 ( ) && ( VAR_552 == null || VAR_552 != VAR_551 ( this ) ) ) { if ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) != VAR_554 || ! VAR_555 ( this , VAR_452 ( ) . VAR_556 ( ) , VAR_286 ( ) ) ) { VAR_557 ( true ) ; if ( VAR_258 ( ) . VAR_558 ( ) . VAR_269 ( ) == 0 ) { VAR_356 ( ) . VAR_357 ( ) ; } } } VAR_552 = VAR_550 ; if ( VAR_412 . get ( ) . VAR_559 ( ) ) { VAR_560 ( STRING_40 , VAR_552 ) ; } } private class VAR_561 implements VAR_562 { public void VAR_563 ( VAR_564 VAR_565 , String VAR_566 , int VAR_567 , VAR_396 VAR_223 ) { if ( VAR_532 ( ) ) { return ; } if ( VAR_568 ( VAR_223 , VAR_566 ) ) { VAR_358 . record ( STRING_41 ) ; } else { VAR_358 . record ( STRING_42 ) ; } final String url = VAR_569 ( ) ; boolean VAR_570 = VAR_571 ( VAR_223 , VAR_572 , false ) ; boolean VAR_573 = VAR_571 ( VAR_223 , VAR_574 , false ) ; boolean VAR_575 = false ; VAR_576 VAR_577 = VAR_452 ( ) ; switch ( VAR_578 ) { case VAR_579 : VAR_580 ( url ) ; int VAR_581 = VAR_582 ( VAR_577 , url ) ; VAR_254 VAR_583 = VAR_584 ( VAR_581 ) ; if ( VAR_583 != null ) { VAR_585 ( VAR_577 , VAR_581 ) ; VAR_586 ( ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } int VAR_588 = VAR_589 ( VAR_590 , VAR_591 ) ; VAR_592 ( url , VAR_588 ) ; if ( VAR_573 && url . startsWith ( VAR_593 ) ) { VAR_358 . record ( STRING_43 ) ; } break ; case VAR_594 : VAR_595 ( VAR_567 ) ; int VAR_596 = VAR_597 ( VAR_577 , VAR_567 ) ; if ( VAR_596 == VAR_598 ) { VAR_576 VAR_599 = VAR_258 ( ) . VAR_268 ( ! VAR_600 ( ) ) ; VAR_596 = VAR_597 ( VAR_599 , VAR_567 ) ; if ( VAR_596 != VAR_598 ) { VAR_258 ( ) . VAR_601 ( VAR_602 ( ) ) ; VAR_585 ( VAR_599 , VAR_596 ) ; } else { Log . e ( TAG , STRING_44 ) ; return ; } } else { VAR_585 ( VAR_577 , VAR_596 ) ; } break ; case VAR_603 : VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 != null ) { VAR_605 ( VAR_604 , VAR_223 ) ; VAR_606 ( VAR_565 ) ; } else { VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; } break ; case VAR_607 : VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; break ; case VAR_608 : int VAR_250 = VAR_609 ( VAR_223 , VAR_610 , VAR_611 ) ; if ( VAR_250 != VAR_611 ) { VAR_595 ( VAR_250 ) ; int VAR_612 = VAR_597 ( VAR_577 , VAR_250 ) ; boolean VAR_613 = false ; if ( VAR_612 != VAR_598 ) { VAR_254 VAR_255 = VAR_584 ( VAR_612 ) ; if ( VAR_614 ( ) . VAR_615 ( ) . equals ( url ) || VAR_614 ( ) . VAR_615 ( ) . equals ( VAR_616 ( VAR_223 , VAR_617 ) ) ) { VAR_618 ( VAR_612 , VAR_619 ) ; VAR_620 ( VAR_565 ) ; VAR_613 = true ; } } if ( ! VAR_613 ) { VAR_587 ( VAR_565 , VAR_566 , false , VAR_223 ) ; } } break ; case VAR_621 : if ( VAR_570 ) { VAR_622 ( false ) ; VAR_623 ( false ) ; } VAR_587 ( VAR_565 , VAR_566 , true , VAR_223 ) ; break ; case VAR_624 : if ( ! VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ) { assert false : STRING_45 ; Log . e ( TAG , STRING_45 ) ; return ; } if ( ! VAR_626 ( ) ) { if ( VAR_573 || VAR_570 ) { VAR_273 ( VAR_265 this , VAR_627 , VAR_628 ) . VAR_276 ( ) ; } else { assert false : STRING_46 ; Log . e ( TAG , STRING_46 ) ; } return ; } if ( url == null || url . equals ( VAR_544 ) ) { if ( VAR_570 ) { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_629 ) ; VAR_622 ( true ) ; VAR_623 ( true ) ; } else if ( VAR_573 ) { VAR_358 . record ( STRING_47 ) ; VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_630 ) ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_254 VAR_255 = VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_632 ) ; if ( VAR_633 ( VAR_223 ) ) { VAR_634 ( ) . VAR_635 ( ) ; VAR_575 = true ; } VAR_636 ( ) ; } else { VAR_466 ( true ) . VAR_546 ( VAR_544 , VAR_637 , VAR_223 , VAR_403 ) ; } } else { Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) VAR_638 = VAR_640 ; VAR_466 ( true ) . VAR_546 ( url , VAR_638 , VAR_223 , VAR_403 ) ; } break ; default : assert false : STRING_48 + VAR_578 ; break ; } VAR_306 ( ) . VAR_641 ( VAR_575 , VAR_575 ? VAR_642 : VAR_643 ) ; if ( VAR_644 ( ) > 0 && VAR_349 ( ) && ! VAR_286 ( ) && ! VAR_493 ( ) ) { VAR_557 ( true ) ; } } public long VAR_645 ( ) { return VAR_403 ; } public void VAR_646 ( String query ) { assert false ; } public void VAR_647 ( VAR_648 ( VAR_362 ( ) , VAR_649 , VAR_650 ) ; } private boolean VAR_568 ( VAR_396 VAR_223 , String VAR_566 ) { return VAR_651 ( VAR_223 ) || VAR_543 . equals ( VAR_566 , VAR_625 ( ) ) ; } } public void VAR_652 ( ) { VAR_313 = new VAR_653 ( this ) ; super . VAR_652 ( ) ; if ( ! VAR_654 . getInstance ( ) . VAR_655 ( ) ) { VAR_476 ( true ) ; } VAR_656 ( VAR_657 ) ; VAR_658 . getInstance ( ) . VAR_659 ( VAR_660 ) ; VAR_661 ( VAR_301 ( ) . VAR_662 ( ) ) ; } protected VAR_663 VAR_664 ( ) { return new VAR_471 ( this , this : : VAR_665 , VAR_305 ( ) , VAR_390 ( ) , VAR_343 , VAR_666 , this : : VAR_667 , VAR_421 ( ) , VAR_298 , VAR_521 , VAR_324 , VAR_299 , VAR_303 ( ) , VAR_301 ( ) , VAR_313 , VAR_309 ( ) , VAR_668 ( ) , this , this : : VAR_669 , VAR_670 ( ) , this , this : : VAR_671 , this : : VAR_672 , VAR_310 ( ) , VAR_347 ( ) , VAR_289 ( ) , VAR_318 ( ) , VAR_673 ( ) , this : : VAR_304 , VAR_674 ( ) , this : : VAR_349 , this : : VAR_425 , this , this , VAR_675 , VAR_676 ( ) , VAR_677 ( ) , this : : VAR_678 , this : : VAR_679 ) ; } protected int VAR_680 ( ) { return VAR_681 ; } public int VAR_677 ( ) { return VAR_682 ; } protected int VAR_683 ( ) { return VAR_286 ( ) ? VAR_684 : VAR_685 ; } protected int VAR_686 ( ) { final boolean VAR_687 = VAR_688 ( VAR_689 ) ; return VAR_687 ? VAR_690 : VAR_691 ; } protected int VAR_692 ( ) { final int res = VAR_688 ( VAR_689 ) ? VAR_693 : VAR_694 ; return VAR_695 ( ) . VAR_696 ( res ) ; } public void VAR_697 ( ) { super . VAR_697 ( ) ; VAR_698 . getInstance ( ) . VAR_699 ( ) ; VAR_700 VAR_701 = VAR_258 ( ) ; VAR_702 ( VAR_701 ) ; VAR_703 ( VAR_701 ) ; if ( VAR_704 ( ) ) return ; VAR_376 ( ) . VAR_705 ( VAR_706 | VAR_707 ) ; VAR_317 = ( VAR_708 ) VAR_332 ( VAR_709 . content ) ; VAR_334 = ( VAR_710 ) VAR_332 ( VAR_711 ) ; VAR_363 < Boolean > VAR_712 = null ; if ( VAR_713 ( this ) ) { VAR_712 = ( ) - > { assert VAR_298 . get ( ) != null ; assert VAR_306 ( ) . VAR_714 ( ) != null ; VAR_715 VAR_716 = VAR_306 ( ) ; VAR_717 VAR_718 = VAR_719 ( ) ; boolean VAR_720 = VAR_721 ( ) ; VAR_363 < Boolean > VAR_722 = VAR_298 . get ( ) . VAR_723 ( ) ; if ( VAR_722 != null ) { VAR_720 = VAR_720 || VAR_722 . get ( ) ; } return VAR_720 ; } ; } VAR_724 = new VAR_725 ( this , VAR_248 , this : : VAR_304 , VAR_321 , VAR_712 ) ; VAR_496 = new VAR_505 ( VAR_726 ) ; assert VAR_478 ( ) != null ; if ( VAR_727 ( ) ) { VAR_728 VAR_729 = new VAR_728 ( VAR_301 ( ) , VAR_489 ( ) , VAR_303 ( ) , VAR_258 ( ) , VAR_493 ( ) , ( ) - > { return VAR_306 ( ) == null ? null : VAR_306 ( ) . VAR_730 ( ) ; } ) ; VAR_731 . set ( VAR_729 ) ; VAR_478 ( ) . VAR_732 ( VAR_729 ) ; } } private boolean VAR_519 ( ) { if ( VAR_733 == null ) { VAR_733 = VAR_734 ( VAR_492 ( ) , true ) ; } return VAR_733 ; } protected final void VAR_735 ( ) { super . VAR_735 ( ) ; if ( VAR_350 ( ) && VAR_370 ( VAR_286 ( ) , this ) && ! VAR_300 ( ) ) { VAR_736 ( ) ; } } private void VAR_736 ( ) { assert VAR_370 ( VAR_286 ( ) && ! VAR_300 ( ) , this ) ; try ( VAR_282 e = VAR_283 ( STRING_49 ) ) { VAR_285 ( ) ; VAR_289 ( ) . get ( ) . VAR_737 ( VAR_315 ) ; if ( VAR_493 ( ) ) { VAR_738 ( VAR_248 ) ; VAR_552 = VAR_551 ( this ) ; assert ! VAR_437 ; VAR_441 ( ) ; } } } protected VAR_739 VAR_740 ( ) { boolean VAR_741 = VAR_742 != null && VAR_743 ( ) ; VAR_744 = new VAR_745 ( VAR_741 ) ; return VAR_744 ; } protected void VAR_746 ( ) { assert VAR_248 == null ; assert VAR_747 != VAR_748 ; VAR_446 VAR_447 = VAR_448 ( ) ; boolean VAR_749 = VAR_447 != null && VAR_449 ( VAR_450 , false ) ; VAR_750 = new VAR_751 ( VAR_321 ) ; boolean VAR_752 = VAR_753 ( this , this , VAR_750 , VAR_747 ) ; if ( ! VAR_752 ) { VAR_261 ( ) ; return ; } if ( VAR_742 != null ) { int VAR_754 = VAR_755 . getInstance ( ) . VAR_756 ( this ) ; assert ! VAR_757 ( ) || VAR_754 == VAR_747 ; VAR_758 ( VAR_754 , VAR_759 ( ) ) ; } VAR_248 = VAR_760 ( ) ; VAR_761 ( new VAR_762 ( ) { public void VAR_763 ( ) { if ( ! VAR_526 ) return ; VAR_576 model = VAR_764 ( false ) ; VAR_765 ( model ) ; } } ) ; VAR_766 = new VAR_767 ( VAR_248 ) { public void VAR_768 ( VAR_254 VAR_255 , VAR_769 VAR_770 ) { if ( ! VAR_771 ( ) || ! VAR_772 ( ) ) { return ; } VAR_773 ( VAR_265 this , VAR_774 ( ) , VAR_775 ( ) , VAR_776 ( ) , VAR_777 ( ) , VAR_778 ( ) ) ; if ( VAR_779 ( ) ) { VAR_780 ( VAR_301 ( ) , VAR_265 this ) ; } else { VAR_781 ( VAR_774 ( ) ) ; } VAR_782 ( VAR_774 ( ) ) ; } } ; VAR_783 = new VAR_784 ( VAR_248 ) ; if ( VAR_749 ) VAR_785 ( true ) ; } protected VAR_786 VAR_787 ( ) { return new VAR_788 ( this ) ; } public VAR_789 VAR_790 ( ) { return new VAR_791 ( this , VAR_390 ( ) , VAR_312 ( ) , VAR_258 ( ) , VAR_306 ( ) , VAR_376 ( ) . VAR_792 ( ) , this , VAR_321 , VAR_350 ( ) ? VAR_298 : null , VAR_666 , ( ) - > VAR_466 ( false ) . VAR_546 ( VAR_793 ( VAR_794 ) , VAR_637 ) , VAR_308 ( ) , VAR_304 ( ) ) ; } private VAR_795 VAR_796 ( ) { if ( VAR_797 == null ) { VAR_797 = new VAR_798 ( this , VAR_799 ( ) , VAR_305 ( ) , VAR_675 , ( ( VAR_471 ) VAR_322 ) : : VAR_800 , VAR_297 ( ) , this , false , VAR_303 ( ) , VAR_347 ( ) , this , VAR_421 ( ) , VAR_289 ( ) , VAR_670 ( ) , this : : VAR_304 , VAR_303 ( ) , VAR_390 ( ) , VAR_309 ( ) , VAR_301 ( ) , this : : VAR_801 , this : : VAR_300 , VAR_313 , VAR_306 ( ) : : VAR_314 ) ; } return VAR_797 ; } protected Pair < VAR_465 , VAR_465 > VAR_802 ( ) { VAR_803 VAR_804 = null ; if ( VAR_350 ( ) ) { VAR_804 = new VAR_803 ( ) { public boolean VAR_805 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , boolean VAR_808 = VAR_809 ( VAR_806 , VAR_251 , VAR_807 , VAR_810 ) ; if ( VAR_808 ) { VAR_299 . set ( VAR_807 ) ; } return VAR_808 ; } public void VAR_811 ( VAR_254 VAR_255 , String url ) { VAR_812 ( VAR_255 , url ) ; } } ; } return Pair . create ( new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , false , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) , new VAR_465 ( this , VAR_301 ( ) , VAR_813 ( ) , this : : VAR_796 , true , VAR_804 , VAR_524 . getInstance ( ) , VAR_421 ( ) , VAR_289 ( ) ) ) ; } protected void VAR_814 ( ) { super . VAR_814 ( ) ; VAR_815 . getInstance ( ) . VAR_816 ( ( ) - > { VAR_817 VAR_818 = ( VAR_817 ) VAR_819 ( VAR_820 ) ; VAR_821 ( STRING_50 , VAR_822 ( ) ) ; VAR_823 ( VAR_265 this ) ; VAR_824 ( VAR_248 , VAR_309 ( ) , VAR_265 this , VAR_825 . from ( VAR_301 ( ) ) ) ; if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_826 ( VAR_490 , VAR_489 ( ) ) ; } } ) ; } protected void VAR_827 ( long VAR_828 ) { super . VAR_827 ( VAR_828 ) ; VAR_829 ( STRING_51 , VAR_828 , 1 , VAR_830 * INT_2 , INT_3 ) ; } protected boolean VAR_831 ( VAR_396 VAR_223 ) { VAR_747 = 0 ; VAR_446 VAR_447 = VAR_448 ( ) ; int VAR_832 = VAR_833 ( VAR_223 ) ; if ( VAR_447 != null && VAR_447 . containsKey ( VAR_834 ) ) { assert VAR_832 == VAR_748 ; VAR_747 = VAR_447 . getInt ( VAR_834 , 0 ) ; } else if ( VAR_742 != null ) { boolean VAR_835 = VAR_836 ( VAR_223 ) ; VAR_747 = VAR_837 ( VAR_832 , VAR_759 ( ) , VAR_835 ) ; } if ( VAR_747 == VAR_748 ) { Log . i ( TAG , STRING_52 ) ; VAR_273 ( this , VAR_838 , VAR_628 ) . VAR_276 ( ) ; return false ; } if ( VAR_742 != null && ! VAR_839 ( VAR_759 ( ) ) ) { return false ; } return super . VAR_831 ( VAR_223 ) ; } private static int VAR_833 ( VAR_396 VAR_223 ) { int VAR_832 = VAR_609 ( VAR_223 , VAR_840 , VAR_748 ) ; return VAR_841 ( VAR_223 ) ? VAR_832 : VAR_748 ; } private static boolean VAR_836 ( VAR_396 VAR_223 ) { return VAR_571 ( VAR_223 , VAR_842 , false ) ; } public void VAR_843 ( ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; } public boolean VAR_844 ( final int id , boolean VAR_845 ) { final VAR_254 VAR_604 = VAR_362 ( ) ; boolean VAR_846 = VAR_847 ( VAR_604 ) ; if ( id == VAR_848 ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_53 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( false ) ; if ( VAR_845 ) VAR_358 . record ( STRING_54 ) ; VAR_466 ( false ) . VAR_357 ( ) ; VAR_243 ( this , null ) ; } else if ( id == VAR_849 ) { if ( VAR_626 ( ) ) { VAR_258 ( ) . VAR_268 ( false ) . VAR_355 ( ) ; VAR_358 . record ( STRING_55 ) ; VAR_358 . record ( STRING_28 ) ; VAR_359 ( ) ; VAR_623 ( true ) ; if ( VAR_845 ) VAR_358 . record ( STRING_56 ) ; VAR_466 ( true ) . VAR_357 ( ) ; } } else if ( id == VAR_850 ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { VAR_852 ( VAR_265 this , VAR_452 ( ) . VAR_556 ( ) ) ; } ) ; if ( VAR_846 ) { VAR_853 ( VAR_854 ) ; } int type = VAR_452 ( ) . VAR_556 ( ) ? VAR_855 : VAR_856 ; VAR_857 ( STRING_57 , type , VAR_858 + 1 ) ; VAR_358 . record ( STRING_58 ) ; } else if ( id == VAR_859 ) { VAR_564 params = new VAR_564 ( VAR_860 , VAR_861 ) ; boolean VAR_349 = VAR_349 ( ) ; if ( VAR_349 && ! VAR_286 ( ) && VAR_350 ( ) ) { VAR_862 ( params , VAR_452 ( ) . VAR_556 ( ) , null ) ; } else if ( VAR_604 != null ) { VAR_606 ( params ) ; } else { VAR_466 ( VAR_452 ( ) . VAR_556 ( ) ) . VAR_863 ( params , VAR_637 , null ) ; } if ( VAR_349 ) { VAR_557 ( true ) ; } if ( VAR_846 ) { VAR_853 ( VAR_864 ) ; } VAR_358 . record ( STRING_59 ) ; VAR_865 ( ) ; } else if ( id == VAR_866 ) { VAR_452 ( ) . VAR_867 ( VAR_604 , true , false , true ) ; VAR_358 . record ( STRING_60 ) ; } else if ( id == VAR_868 ) { VAR_258 ( ) . VAR_474 ( ) ; VAR_358 . record ( STRING_61 ) ; } else if ( id == VAR_869 ) { VAR_258 ( ) . VAR_268 ( true ) . VAR_474 ( ) ; VAR_358 . record ( STRING_62 ) ; } else if ( id == VAR_870 ) { boolean VAR_871 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; if ( VAR_871 ) { VAR_306 ( ) . VAR_872 ( true , VAR_873 ) ; } } else if ( id == VAR_874 ) { VAR_875 VAR_876 = null ; if ( VAR_604 != null && VAR_877 ( ) != null ) { VAR_341 VAR_342 = VAR_878 ( VAR_877 ( ) ) ; VAR_876 = VAR_342 != null ? VAR_879 ( ) : null ; } VAR_880 ( this , VAR_604 , VAR_876 , VAR_881 ) ; if ( VAR_846 ) { VAR_853 ( VAR_882 ) ; } VAR_358 . record ( STRING_63 ) ; } else if ( id == VAR_883 ) { VAR_576 VAR_884 = VAR_885 ( ) ; if ( ! VAR_886 ( ) ) VAR_887 ( ) ; VAR_358 . record ( STRING_64 ) ; } else if ( id == VAR_888 ) { VAR_889 ( ) . VAR_890 ( ) ; } else { return super . VAR_844 ( id , VAR_845 ) ; } return true ; } private boolean VAR_847 ( VAR_254 VAR_255 ) { return VAR_255 != null && VAR_545 ( VAR_614 ( ) ) ; } private boolean VAR_536 ( VAR_254 VAR_255 ) { return VAR_847 ( VAR_255 ) && ! VAR_891 ( ) ; } private void VAR_665 ( boolean VAR_892 ) { VAR_893 ( VAR_892 ) ; } private void VAR_622 ( boolean VAR_556 ) { if ( VAR_556 ) { VAR_358 . record ( STRING_65 ) ; } else { VAR_358 . record ( STRING_66 ) ; } } public boolean VAR_894 ( ) { if ( ! VAR_377 ) return false ; if ( VAR_895 ( ) . VAR_896 ( ) ) return true ; if ( VAR_897 ( ) ) { return true ; } if ( VAR_297 ( ) . VAR_896 ( ) ) return true ; if ( VAR_898 ( ) ) return true ; final VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_402 ( true ) ; return true ; } if ( VAR_266 ( ) && ! VAR_286 ( ) && ( VAR_298 . get ( ) == null || VAR_298 . get ( ) . VAR_487 ( ) . VAR_553 ( ) == VAR_899 ) ) { VAR_557 ( true ) ; return true ; } final VAR_900 VAR_901 = VAR_877 ( ) ; if ( VAR_901 != null ) { VAR_902 VAR_903 = VAR_904 ( ) ; if ( VAR_903 != null && VAR_905 ( ) ) return true ; } if ( VAR_306 ( ) . VAR_906 ( ) ) return true ; final final boolean VAR_907 = VAR_908 ( ) . VAR_615 ( ) . startsWith ( VAR_209 ) ; if ( type == VAR_637 && VAR_907 ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; return true ; } if ( ! VAR_266 ( ) && ( type == VAR_909 || VAR_910 ( VAR_604 ) ) ) { if ( VAR_911 ( VAR_604 ) || VAR_910 ( VAR_604 ) ) { VAR_352 ( VAR_368 ) ; if ( type == VAR_271 && ! VAR_911 ( VAR_604 ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } else { VAR_352 ( VAR_912 ) ; if ( ! VAR_913 ( ) ) { VAR_452 ( ) . VAR_867 ( VAR_604 ) ; } } return true ; } final boolean VAR_914 = VAR_679 ( VAR_604 ) ; final boolean VAR_915 = ! VAR_914 || VAR_916 ( VAR_604 ) ; if ( VAR_915 ) { if ( VAR_914 ) { VAR_917 ( VAR_604 ) ; return true ; } else { VAR_917 ( null ) ; return true ; } } else if ( VAR_914 ) { VAR_877 ( ) . VAR_918 ( false ) ; return true ; } assert false : STRING_67 ; return false ; } public boolean VAR_679 ( VAR_254 VAR_255 ) { if ( ! VAR_919 ( ) ) { return false ; } int type = VAR_920 ( ) ; return type == VAR_640 || type == VAR_921 || type == VAR_922 || type == VAR_271 || ( type == VAR_923 && VAR_924 . from ( VAR_255 ) . VAR_925 ( ) != VAR_611 ) ; } private void VAR_917 ( Log . i ( TAG , STRING_68 + VAR_926 ) ; VAR_402 ( true ) ; if ( VAR_926 != null ) { VAR_927 ( ( ) - > { boolean VAR_928 = VAR_452 ( ) . VAR_929 ( VAR_926 . getId ( ) ) != null ; VAR_452 ( ) . VAR_867 ( VAR_926 , false , true , false ) ; if ( ! VAR_928 ) VAR_352 ( VAR_491 ) ; } , VAR_930 ) ; } } public boolean VAR_402 ( boolean VAR_931 ) { try { return super . VAR_402 ( VAR_931 ) ; } catch ( VAR_932 e ) { VAR_261 ( ) ; return true ; } } private VAR_254 VAR_587 ( VAR_564 VAR_565 , String VAR_566 , boolean VAR_933 , VAR_396 VAR_223 ) { if ( VAR_377 && ! VAR_545 ( VAR_569 ( ) ) ) { VAR_557 ( false ) ; VAR_306 ( ) . VAR_934 ( ) ; } if ( VAR_651 ( VAR_223 ) ) { boolean VAR_556 = VAR_571 ( VAR_223 , VAR_935 , false ) ; Integer VAR_638 = VAR_639 ( VAR_223 ) ; if ( VAR_638 == null ) { if ( VAR_571 ( VAR_223 , VAR_572 , false ) ) { VAR_638 = VAR_629 ; } else if ( VAR_571 ( VAR_223 , VAR_574 , false ) ) { VAR_638 = VAR_630 ; } else if ( VAR_631 ( VAR_223 ) ) { VAR_638 = VAR_632 ; } else { VAR_638 = VAR_640 ; } } return VAR_466 ( VAR_556 ) . VAR_863 ( VAR_565 , VAR_638 , null , VAR_223 ) ; } if ( VAR_936 ( ) && VAR_937 ( VAR_223 ) ) { VAR_446 VAR_221 = VAR_938 ( ) ; int VAR_939 = VAR_940 ( VAR_221 , VAR_941 , VAR_611 ) ; VAR_221 . remove ( VAR_941 ) ; if ( VAR_939 != VAR_611 && VAR_248 != null ) { return VAR_356 ( ) . VAR_863 ( new VAR_564 ( VAR_569 ( ) , VAR_942 ) , VAR_640 , VAR_943 ( VAR_939 ) ) ; } } return VAR_466 ( false ) . VAR_944 ( VAR_565 , VAR_566 , VAR_933 , VAR_223 ) ; } private void VAR_352 ( VAR_352 ( state , VAR_945 ) ; } private void VAR_352 ( assert ( state == VAR_353 || state == VAR_368 || state == VAR_912 || state == VAR_491 ) ; if ( VAR_552 != null && VAR_552 && VAR_325 != null ) { VAR_946 ( false ) ; } else if ( VAR_298 . get ( ) != null ) { if ( VAR_947 ( this ) || ! VAR_948 ( ) ) { state = VAR_353 ; } VAR_298 . get ( ) . VAR_487 ( ) . VAR_949 ( state , VAR_810 ) ; } if ( VAR_325 == null ) return ; if ( VAR_266 ( ) ) { if ( VAR_950 ( ) ) { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > { } ) ; } return ; } VAR_254 VAR_604 = VAR_362 ( ) ; if ( VAR_604 == null ) { VAR_946 ( false ) ; } else { VAR_289 ( ) . get ( ) . VAR_851 ( ( ) - > VAR_946 ( true ) ) ; VAR_951 ( false ) ; VAR_952 ( VAR_452 ( ) ) ; } } private void VAR_351 ( ) { assert ( VAR_266 ( ) ) ; if ( VAR_452 ( ) . VAR_269 ( ) != 0 ) { VAR_557 ( true ) ; VAR_951 ( true ) ; } } private boolean VAR_809 ( boolean VAR_806 , boolean VAR_251 , VAR_254 VAR_807 , if ( ! VAR_806 || ! VAR_555 ( this , VAR_251 , VAR_286 ( ) ) ) { return false ; } VAR_258 ( ) . VAR_601 ( VAR_251 ) ; if ( VAR_953 . getValue ( ) && VAR_810 != VAR_794 ) { VAR_954 VAR_955 = VAR_349 ( ) ? ( ) - > { VAR_352 ( VAR_912 , VAR_810 ) ; } : null ; VAR_956 ( null , VAR_957 , VAR_251 , VAR_807 , VAR_452 ( ) , VAR_955 ) ; } else if ( VAR_370 ( VAR_286 ( ) , this ) || ( VAR_258 ( ) . VAR_958 ( ) && VAR_329 ( ) ) ) { VAR_352 ( VAR_368 , VAR_810 ) ; } return true ; } private void VAR_951 ( boolean VAR_549 ) { VAR_254 VAR_604 = VAR_362 ( ) ; VAR_900 VAR_901 = VAR_604 != null ? VAR_877 ( ) : null ; if ( VAR_901 != null ) { VAR_959 ( VAR_901 ) . VAR_960 ( VAR_549 ) ; } } public void VAR_961 ( VAR_446 VAR_962 ) { super . VAR_961 ( VAR_962 ) ; VAR_509 . getInstance ( ) . VAR_963 ( VAR_962 ) ; VAR_964 ( VAR_834 , VAR_755 . getInstance ( ) . VAR_756 ( this ) ) ; Boolean VAR_965 = VAR_452 ( ) . VAR_556 ( ) ; VAR_966 ( VAR_450 , VAR_965 ) ; if ( VAR_965 && VAR_967 ( ) ) { VAR_968 ( VAR_962 , VAR_452 ( ) . VAR_453 ( ) ) ; } } public void VAR_969 ( ) { if ( VAR_498 != null ) { VAR_970 ( ) ; VAR_498 = null ; } if ( VAR_766 != null ) { VAR_971 ( ) ; VAR_766 = null ; } if ( VAR_246 != null ) VAR_972 ( ) ; if ( VAR_724 != null ) { VAR_973 ( ) ; VAR_724 = null ; } if ( VAR_783 != null ) { VAR_974 ( ) ; VAR_783 = null ; } if ( VAR_298 . get ( ) != null ) { VAR_298 . get ( ) . VAR_975 ( ) ; } if ( VAR_731 != null ) { VAR_976 ( ) ; } if ( VAR_313 != null ) { VAR_977 ( ) ; VAR_313 = null ; } VAR_658 . getInstance ( ) . VAR_978 ( VAR_660 ) ; VAR_979 VAR_980 = VAR_418 ( ) ; if ( VAR_980 != null ) { VAR_418 ( ) . VAR_981 ( VAR_414 ) ; VAR_418 ( ) . VAR_981 ( VAR_415 ) ; } if ( VAR_286 ( ) ) VAR_412 . get ( ) . VAR_981 ( VAR_414 ) ; VAR_412 . get ( ) . VAR_981 ( this ) ; VAR_412 . get ( ) . VAR_981 ( VAR_315 ) ; if ( VAR_797 != null ) VAR_982 ( ) ; VAR_983 ( ) ; super . VAR_969 ( ) ; } protected void VAR_984 ( ) { if ( VAR_744 != null ) { VAR_985 ( ) ; } } public void VAR_986 ( int VAR_987 ) { super . VAR_986 ( VAR_987 ) ; if ( VAR_988 ( VAR_987 ) ) { VAR_989 . getInstance ( ) . VAR_990 ( ) ; } } public boolean VAR_991 ( VAR_992 event ) { Boolean result = VAR_993 ( event , VAR_377 , VAR_347 ( ) , this ) ; return result != null ? result : super . VAR_991 ( event ) ; } public boolean VAR_994 ( int VAR_995 , VAR_992 event ) { if ( ! VAR_377 ) { return super . VAR_994 ( VAR_995 , event ) ; } if ( VAR_995 == VAR_996 && ! VAR_286 ( ) && ! VAR_347 ( ) . VAR_348 ( ) ) { if ( VAR_997 == null ) VAR_997 = this : : VAR_998 ; VAR_927 ( VAR_997 , VAR_999 ( ) ) ; return super . VAR_994 ( VAR_995 , event ) ; } boolean VAR_1000 = ! VAR_266 ( ) && ( ! VAR_286 ( ) || VAR_452 ( ) . VAR_269 ( ) != 0 ) ; return VAR_1001 ( event , VAR_1000 , true , VAR_258 ( ) , this , VAR_306 ( ) ) || super . VAR_994 ( VAR_995 , event ) ; } private void VAR_998 ( ) { ( ( VAR_471 ) VAR_322 ) . VAR_998 ( ) ; } public boolean VAR_1002 ( int VAR_995 , VAR_992 event ) { if ( VAR_995 == VAR_996 && ! VAR_286 ( ) ) { VAR_1003 ( VAR_997 ) ; VAR_997 = null ; if ( VAR_1004 ( ) - VAR_1005 ( ) >= VAR_999 ( ) && VAR_1006 ( VAR_297 ( ) ) ) { return true ; } } return super . VAR_1002 ( VAR_995 , event ) ; } public boolean VAR_1007 ( ) { VAR_1008 ( ) ; return VAR_997 != null ; } public void VAR_1009 ( List < VAR_1010 > data , VAR_1011 VAR_1012 , int VAR_1013 ) { data . addAll ( VAR_1014 ( this ) ) ; } public View VAR_1015 ( ) { return VAR_289 ( ) . get ( ) ; } public VAR_1016 VAR_1017 ( ) { return ( VAR_1016 ) VAR_289 ( ) . get ( ) . VAR_1017 ( ) ; } public VAR_1018 VAR_1019 ( ) { return VAR_1017 ( ) . VAR_1019 ( ) ; } public VAR_293 VAR_1020 ( ) { return VAR_298 . get ( ) ; } private VAR_1021 VAR_799 ( ) { return ( ( VAR_471 ) VAR_322 ) . VAR_799 ( ) ; } protected VAR_1022 VAR_1023 ( ) { VAR_1022 VAR_1024 = super . VAR_1023 ( ) ; VAR_1025 = new VAR_1026 ( this , VAR_309 ( ) , VAR_1024 , this : : VAR_799 , this : : VAR_418 , this : : VAR_306 , this : : VAR_667 , VAR_421 ( ) , this : : VAR_303 , this : : VAR_347 ) ; return VAR_1024 ; } public boolean VAR_1027 ( ) { if ( ! VAR_377 ) return false ; VAR_254 VAR_255 = VAR_362 ( ) ; if ( VAR_255 != null && VAR_1028 ( VAR_255 ) ) return false ; return super . VAR_1027 ( ) ; } public boolean VAR_349 ( ) { return VAR_325 != null && VAR_266 ( ) ; } protected VAR_1029 VAR_1030 ( ) { return new VAR_561 ( ) ; } public void VAR_1031 ( VAR_1018 VAR_1032 ) { super . VAR_1031 ( VAR_1032 ) ; if ( ! VAR_1033 ( ) ) VAR_1034 ( ) ; } public void VAR_1035 ( ) { VAR_436 ( ) ; } public void VAR_1036 ( ) { super . VAR_1036 ( ) ; VAR_1037 ( VAR_1038 ) ; if ( VAR_1039 == null ) { VAR_1039 = new VAR_1040 ( VAR_1041 ) ; VAR_799 ( ) . VAR_1042 ( VAR_1039 ) ; } VAR_1039 . set ( VAR_1043 ) ; } public void VAR_1044 ( ) { super . VAR_1044 ( ) ; VAR_1037 ( VAR_1045 ) ; if ( VAR_1039 != null ) { VAR_1039 . set ( VAR_1041 ) ; } } protected void VAR_1046 ( ) { super . VAR_1046 ( ) ; if ( VAR_292 ( ) != null ) { VAR_292 ( ) . VAR_1046 ( this ) ; } } protected boolean VAR_1047 ( ) { return VAR_688 ( VAR_1048 ) ; } private void VAR_623 ( boolean VAR_556 ) { if ( VAR_1049 < VAR_1050 ) return ; VAR_1051 VAR_1052 = VAR_819 ( VAR_1053 class ) ; VAR_1054 ( VAR_556 ? STRING_69 : STRING_70 ) ; } public VAR_1055 VAR_1056 ( ) { return VAR_742 ; } public VAR_751 VAR_1057 ( ) { return ( VAR_751 ) VAR_750 ; } }","> just want to make sure that you really want to delete this VAR_255 in such a case.

Yes, I would intend for the VAR_255 to be closed in that case. That's what currently happens if the VAR_255 is created from the New VAR_254 Page feed.

> VAR_293UserData.setKeepVAR_254() is called when user taps either home button or VAR_255 switcher button on the VAR_255. It distinguishes the cases that tapping the VAR_906 button directly after opening the VAR_255 from the cases that user does multiple other steps. Wdyt?

I see, sounds like I should check ""KeepVAR_254"" before closing the VAR_255."
